<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PathSystem3D</name>
    </assembly>
    <members>
        <member name="T:PathSystem3D.Navigation.CollisionIndex">
            <summary>
            An x/y position in a region that indexes the objects that can collide at this x/y
             Also indexes way points for fast lookup
            right now i divide a 256fx256f to a 1280x1280  (0.2f x 0.2f) CollisionIndex[,]  where any box that touches in x/ys thhen its indexed no mater what the Z is.. then i can drill down any Z looking for openspaces for avatar capsules of 2f
            </summary>
        </member>
        <member name="F:PathSystem3D.Navigation.CollisionIndex.PX">
            <summary>
            Gets Point.X coordinate on the PathStore.
            </summary>
        </member>
        <member name="F:PathSystem3D.Navigation.CollisionIndex.PY">
            <summary>
            Gets Point.Y coordinate on the PathStore.
            </summary>
        </member>
        <member name="M:PathSystem3D.Navigation.CollisionIndex.ToString">
            <summary>
            object.ToString() override.
            Returns the textual description of the node.
            </summary>
            <returns>String describing this node.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.CollisionIndex.GetHashCode">
            <summary>
            Object.GetHashCode override.
            </summary>
            <returns>HashCode value.</returns>
        </member>
        <member name="T:PathSystem3D.Navigation.Debug.PathFinderDemo">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="F:PathSystem3D.Navigation.Debug.PathFinderDemo.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:PathSystem3D.Navigation.Debug.PathFinderDemo.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:PathSystem3D.Navigation.Debug.PathFinderDemo.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.Debug.PathFinderDemo.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.Debug.PathFinderDemo.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:PathSystem3D.Navigation.SimMovement">
            <summary>
            Class to search the best path between two nodes on a graph.
            </summary>
        </member>
        <member name="M:PathSystem3D.Navigation.SimMovement.#ctor(PathSystem3D.Navigation.SimGlobalRoutes)">
            <summary>
            AStar Constructor.
            </summary>
            <param name="G">The graph on which AStar will perform the search.</param>
        </member>
        <member name="M:PathSystem3D.Navigation.SimMovement.SearchPath(PathSystem3D.Navigation.SimWaypoint,PathSystem3D.Navigation.SimWaypoint)">
            <summary>
            Searches for the best path to reach the specified EndNode from the specified StartNode.
            </summary>
            <exception cref="T:System.ArgumentNullException">StartNode and EndNode cannot be null.</exception>
            <param name="StartNode">The node from which the path must start.</param>
            <param name="EndNode">The node to which the path must end.</param>
            <returns>'true' if succeeded / 'false' if failed.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimMovement.Initialize(PathSystem3D.Navigation.SimWaypoint,PathSystem3D.Navigation.SimWaypoint)">
            <summary>
            Use for a 'step by step' search only. This method is alternate to SearchPath.
            Initializes AStar before performing search steps manually with NextStep.
            </summary>
            <exception cref="T:System.ArgumentNullException">StartNode and EndNode cannot be null.</exception>
            <param name="StartNode">The node from which the path must start.</param>
            <param name="EndNode">The node to which the path must end.</param>
        </member>
        <member name="M:PathSystem3D.Navigation.SimMovement.NextStep">
            <summary>
            Use for a 'step by step' search only. This method is alternate to SearchPath.
            The algorithm must have been initialize before.
            </summary>
            <exception cref="T:System.InvalidOperationException">You must initialize AStar before using NextStep().</exception>
            <returns>'true' unless the search ended.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimMovement.ResultInformation(System.Int32@,System.Double@)">
            <summary>
            Returns information on the result.
            </summary>
            <param name="NbArcsOfPath">The number of arcs in the result path / -1 if no result.</param>
            <param name="CostOfPath">The cost of the result path / -1 if no result.</param>
            <returns>'true' if the search succeeded / 'false' if it failed.</returns>
        </member>
        <member name="P:PathSystem3D.Navigation.SimMovement.EuclidianHeuristic">
            <summary>
            Heuristic based on the euclidian distance : Sqrt(Dx²+Dy²+Dz²)
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.SimMovement.MaxAlongAxisHeuristic">
            <summary>
            Heuristic based on the maximum distance : Max(|Dx|, |Dy|, |Dz|)
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.SimMovement.ManhattanHeuristic">
            <summary>
            Heuristic based on the manhattan distance : |Dx|+|Dy|+|Dz|
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.SimMovement.ChoosenHeuristic">
            <summary>
            Gets/Sets the heuristic that AStar will use.
            It must be homogeneous to arc's cost.
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.SimMovement.DijkstraHeuristicBalance">
            <summary>
            This value must belong to [0; 1] and it determines the influence of the heuristic on the algorithm.
            If this influence value is set to 0, then the search will behave in accordance with the Dijkstra algorithm.
            If this value is set to 1, then the cost to come to the current node will not be used whereas only the heuristic will be taken into account.
            </summary>
            <exception cref="T:System.ArgumentException">Value must belong to [0;1].</exception>
        </member>
        <member name="P:PathSystem3D.Navigation.SimMovement.Open">
            <summary>
            Use for debug in 'step by step' mode only.
            Returns all the tracks found in the 'Open' list of the algorithm at a given time.
            A track is a list of the nodes visited to come to the current node.
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.SimMovement.Closed">
            <summary>
            Use for debug in a 'step by step' mode only.
            Returns all the tracks found in the 'Closed' list of the algorithm at a given time.
            A track is a list of the nodes visited to come to the current node.
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.SimMovement.Initialized">
            <summary>
            To know if the search has been initialized.
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.SimMovement.SearchStarted">
            <summary>
            To know if the search has been started.
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.SimMovement.SearchEnded">
            <summary>
            To know if the search has ended.
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.SimMovement.PathFound">
            <summary>
            To know if a path has been found.
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.SimMovement.StepCounter">
            <summary>
            Use for a 'step by step' search only.
            Gets the number of the current step.
            -1 if the search has not been initialized.
            0 if it has not been started.
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.SimMovement.PathByNodes">
            <summary>
            Gets the array of nodes representing the found path.
            </summary>
            <exception cref="T:System.InvalidOperationException">You cannot get a result unless the search has ended.</exception>
        </member>
        <member name="P:PathSystem3D.Navigation.SimMovement.PathByArcs">
            <summary>
            Gets the array of arcs representing the found path.
            </summary>
            <exception cref="T:System.InvalidOperationException">You cannot get a result unless the search has ended.</exception>
        </member>
        <member name="P:PathSystem3D.Navigation.SimMovement.PathByCoordinates">
            <summary>
            Gets the array of points representing the found path.
            </summary>
            <exception cref="T:System.InvalidOperationException">You cannot get a result unless the search has ended.</exception>
        </member>
        <member name="T:PathSystem3D.Navigation.SimMovement.Heuristic">
            <summary>
            A heuristic is a function that associates a value with a node to gauge it considering the node to reach.
            </summary>
        </member>
        <member name="T:PathSystem3D.Navigation.Track">
            <summary>
            A track is a succession of nodes which have been visited.
            Thus when it leads to the target node, it is easy to return the result path.
            These objects are contained in Open and Closed lists.
            </summary>
        </member>
        <member name="F:PathSystem3D.Navigation.Debug.DisplayImage.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:PathSystem3D.Navigation.Debug.DisplayImage.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:PathSystem3D.Navigation.Debug.DisplayImage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:PathSystem3D.Navigation.Debug.APropos">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="M:PathSystem3D.Navigation.Debug.APropos.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.Debug.APropos.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.Debug.APropos.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:PathSystem3D.Navigation.SimGlobalRoutes">
            <summary>
            Graph structure. It is defined with :
            It is defined with both a list of nodes and a list of arcs.
            </summary>
        </member>
        <member name="M:PathSystem3D.Navigation.SimGlobalRoutes.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>       
        </member>
        <member name="M:PathSystem3D.Navigation.SimGlobalRoutes.Clear">
            <summary>
            Empties the graph.
            </summary>
        </member>
        <member name="M:PathSystem3D.Navigation.SimGlobalRoutes.AddNode(PathSystem3D.Navigation.SimWaypoint)">
            <summary>
            Directly Adds a node to the graph.
            </summary>
            <param name="NewNode">The node to add.</param>
            <returns>'true' if it has actually been added / 'false' if the node is null or if it is already in the graph.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimGlobalRoutes.AddNode(System.Double,System.Double,System.Double)">
            <summary>
            Creates a node, adds to the graph and returns its reference.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="z">Z coordinate.</param>
            <returns>The reference of the new node / null if the node is already in the graph.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimGlobalRoutes.AddArc(PathSystem3D.Navigation.SimRoute)">
            <summary>
            Directly Adds an arc to the graph.
            </summary>
            <exception cref="T:System.ArgumentException">Cannot add an arc if one of its extremity nodes does not belong to the graph.</exception>
            <param name="NewArc">The arc to add.</param>
            <returns>'true' if it has actually been added / 'false' if the arc is null or if it is already in the graph.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimGlobalRoutes.AddArc(PathSystem3D.Navigation.SimWaypoint,PathSystem3D.Navigation.SimWaypoint,System.Double)">
            <summary>
            Creates an arc between two nodes that are already registered in the graph, adds it to the graph and returns its reference.
            </summary>
            <exception cref="T:System.ArgumentException">Cannot add an arc if one of its extremity nodes does not belong to the graph.</exception>
            <param name="StartNode">Start node for the arc.</param>
            <param name="EndNode">End node for the arc.</param>
            <param name="Weight">Weight for the arc.</param>
            <returns>The reference of the new arc / null if the arc is already in the graph.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimGlobalRoutes.Add2Arcs(PathSystem3D.Navigation.SimWaypoint,PathSystem3D.Navigation.SimWaypoint,System.Double)">
            <summary>
            Adds the two opposite arcs between both specified nodes to the graph.
            </summary>
            <exception cref="T:System.ArgumentException">Cannot add an arc if one of its extremity nodes does not belong to the graph.</exception>
            <param name="Node1"></param>
            <param name="Node2"></param>
            <param name="Weight"></param>
        </member>
        <member name="M:PathSystem3D.Navigation.SimGlobalRoutes.RemoveNode(PathSystem3D.Navigation.SimWaypoint)">
            <summary>
            Removes a node from the graph as well as the linked arcs.
            </summary>
            <param name="NodeToRemove">The node to remove.</param>
            <returns>'true' if succeeded / 'false' otherwise.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimGlobalRoutes.RemoveArc(PathSystem3D.Navigation.SimRoute)">
            <summary>
            Removes a node from the graph as well as the linked arcs.
            </summary>
            <param name="ArcToRemove">The arc to remove.</param>
            <returns>'true' if succeeded / 'false' otherwise.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimGlobalRoutes.BoundingBox(System.Double[]@,System.Double[]@)">
            <summary>
            Determines the bounding box of the entire graph.
            </summary>
            <exception cref="T:System.InvalidOperationException">Impossible to determine the bounding box for this graph.</exception>
            <param name="MinPoint">The point of minimal coordinates for the box.</param>
            <param name="MaxPoint">The point of maximal coordinates for the box.</param>
        </member>
        <member name="M:PathSystem3D.Navigation.SimGlobalRoutes.ClosestNode(System.Double,System.Double,System.Double,System.Double@,System.Boolean)">
            <summary>
            This function will find the closest node from a geographical position in space.
            </summary>
            <param name="PtX">X coordinate of the point from which you want the closest node.</param>
            <param name="PtY">Y coordinate of the point from which you want the closest node.</param>
            <param name="PtZ">Z coordinate of the point from which you want the closest node.</param>
            <param name="Distance">The distance to the closest node.</param>
            <param name="IgnorePassableProperty">if 'false', then nodes whose property Passable is set to false will not be taken into account.</param>
            <returns>The closest node that has been found.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimGlobalRoutes.ClosestNodes(PathSystem3D.Navigation.SimWaypoint,System.Double,System.Double,System.Boolean)">
            <summary>
            This function will find the nodes from a geographical position in space.
            </summary>
            <param name="P">Waypoint node.</param>
            <param name="MinDistance">The min distance to the node.</param>
            <param name="MaxDistance">The max distance to the node.</param>
            <param name="IgnorePassableProperty">if 'false', then nodes whose property Passable is set to false will not be taken into account.</param>
            <returns>The nodes that has been found.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimGlobalRoutes.ClosestArc(System.Double,System.Double,System.Double,System.Double@,System.Boolean)">
            <summary>
            This function will find the closest arc from a geographical position in space using projection.
            </summary>
            <param name="PtX">X coordinate of the point from which you want the closest arc.</param>
            <param name="PtY">Y coordinate of the point from which you want the closest arc.</param>
            <param name="PtZ">Z coordinate of the point from which you want the closest arc.</param>
            <param name="Distance">The distance to the closest arc.</param>
            <param name="IgnorePassableProperty">if 'false', then arcs whose property Passable is set to false will not be taken into account.</param>
            <returns>The closest arc that has been found.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimGlobalRoutes.ProjectOnLine(OpenMetaverse.Vector3d,OpenMetaverse.Vector3d,OpenMetaverse.Vector3d)">
            <summary>
            Returns the projection of a point on the line defined with two other points.
            When the projection is out of the segment, then the closest extremity is returned.
            </summary>
            <exception cref="T:System.ArgumentNullException">None of the arguments can be null.</exception>
            <exception cref="T:System.ArgumentException">P1 and P2 must be different.</exception>
            <param name="Pt">Point to project.</param>
            <param name="P1">First point of the line.</param>
            <param name="P2">Second point of the line.</param>
            <returns>The projected point if it is on the segment / The closest extremity otherwise.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimGlobalRoutes.VectOR(OpenMetaverse.Vector3d,OpenMetaverse.Vector3d)">
            <summary>
            Scalar product between two vectors.
            </summary>
            <param name="V1">First vector.</param>
            <param name="V2">Second vector.</param>
            <returns>Value resulting from the scalar product.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimGlobalRoutes.MakeDiff(OpenMetaverse.Vector3d,OpenMetaverse.Vector3d)">
            <summary>
            Constructs a Vector3D with two points.
            </summary>
            <param name="P1">First point of the vector.</param>
            <param name="P2">Second point of the vector.</param>
        </member>
        <member name="M:PathSystem3D.Navigation.SimGlobalRoutes.SquareNorm(OpenMetaverse.Vector3d)">
            <summary>
             Gets the square norm of the vector.
            </summary>
            <param name="v3">vector.</param>
        </member>
        <member name="M:PathSystem3D.Navigation.SimGlobalRoutes.SaveToFile">
            <summary>
            
            </summary>
        </member>
        <member name="M:PathSystem3D.Navigation.SimGlobalRoutes.LoadFromFile">
            <summary>
            
            </summary>
        </member>
        <member name="M:PathSystem3D.Navigation.SimGlobalRoutes.SaveFile(System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimGlobalRoutes.LoadFile(System.String)">
            <summary>
            
            </summary>
            <param name="pathName"></param>
            <returns></returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimGlobalRoutes.CreateClosestWaypoint(OpenMetaverse.Vector3d)">
            <summary>
            
            </summary>
            <param name="v3"></param>
            <returns></returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimGlobalRoutes.CreateClosestWaypointBox(OpenMetaverse.Vector3d,System.Double,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="v3"></param>
            <param name="radius"></param>
            <param name="numPoints"></param>
            <param name="Weight"></param>
            <returns></returns>
        </member>
        <member name="P:PathSystem3D.Navigation.SimGlobalRoutes.Nodes">
            <summary>
            Gets the List interface of the nodes in the graph.
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.SimGlobalRoutes.Arcs">
            <summary>
            Gets the List interface of the arcs in the graph.
            </summary>
        </member>
        <member name="T:PathSystem3D.Navigation.SimRoute">
            <summary>
            An arc is defined with its two extremity nodes StartNode and EndNode therefore it is oriented.
            It is also characterized by a crossing factor named 'Weight'.
            This value represents the difficulty to reach the ending node from the starting one.
            </summary>
        </member>
        <member name="M:PathSystem3D.Navigation.SimRoute.#ctor(PathSystem3D.Navigation.SimWaypoint,PathSystem3D.Navigation.SimWaypoint)">
            <summary>
            Arc constructor.
            </summary>
            <exception cref="T:System.ArgumentNullException">Extremity nodes cannot be null.</exception>
            <exception cref="T:System.ArgumentException">StartNode and EndNode must be different.</exception>
            <param name="Start">The node from which the arc starts.</param>
            <param name="End">The node to which the arc ends.</param>
        </member>
        <member name="M:PathSystem3D.Navigation.SimRoute.CalculateLength">
            <summary>
            Performs the calculous that returns the arc's length
            Can be overriden for derived types of arcs that are not linear.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimRoute.ToString">
            <summary>
            Returns the textual description of the arc.
            object.ToString() override.
            </summary>
            <returns>String describing this arc.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimRoute.Equals(System.Object)">
            <summary>
            Object.Equals override.
            Tells if two arcs are equal by comparing StartNode and EndNode.
            </summary>
            <exception cref="T:System.ArgumentException">Cannot compare an arc with another type.</exception>
            <param name="O">The arc to compare with.</param>
            <returns>'true' if both arcs are equal.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimRoute.GetHashCode">
            <summary>
            Object.GetHashCode override.
            </summary>
            <returns>HashCode value.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimRoute.InRouteBox(OpenMetaverse.Vector3d)">
            <summary>
            Quick min/max check to decide if w/in bounds
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimRoute.OnRoute(OpenMetaverse.Vector3d)">
            <summary>
            Check to see if this route contains the point
            </summary>
            <param name="point">point to be checked</param>
            <returns>return true when the point is on the route</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimRoute.ProjectOnLine(OpenMetaverse.Vector3d,OpenMetaverse.Vector3d,OpenMetaverse.Vector3d)">
            <summary>
            Returns the projection of a point on the line defined with two other points.
            When the projection is out of the segment, then the closest extremity is returned.
            </summary>
            <exception cref="T:System.ArgumentNullException">None of the arguments can be null.</exception>
            <exception cref="T:System.ArgumentException">P1 and P2 must be different.</exception>
            <param name="Pt">Point to project.</param>
            <param name="P1">First point of the line.</param>
            <param name="P2">Second point of the line.</param>
            <returns>The projected point if it is on the segment / The closest extremity otherwise.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimRoute.VectOR(OpenMetaverse.Vector3d,OpenMetaverse.Vector3d)">
            <summary>
            Scalar product between two vectors.
            </summary>
            <param name="V1">First vector.</param>
            <param name="V2">Second vector.</param>
            <returns>Value resulting from the scalar product.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimRoute.MakeDiff(OpenMetaverse.Vector3d,OpenMetaverse.Vector3d)">
            <summary>
            Constructs a Vector3D with two points.
            </summary>
            <param name="P1">First point of the vector.</param>
            <param name="P2">Second point of the vector.</param>
        </member>
        <member name="M:PathSystem3D.Navigation.SimRoute.SquareNorm(OpenMetaverse.Vector3d)">
            <summary>
             Gets the square norm of the vector.
            </summary>
            <param name="point">vector.</param>
        </member>
        <member name="F:PathSystem3D.Navigation.SimRoute.Dependants">
            <summary>
            When something is changed the Dependant Routes that must be updated
            </summary>
        </member>
        <member name="M:PathSystem3D.Navigation.SimRoute.AddDependant(PathSystem3D.Navigation.SimRoute)">
            <summary>
             When something is changed the simRouteMovement that must be updated
            </summary>
            <param name="simRouteMovement"></param>
        </member>
        <member name="M:PathSystem3D.Navigation.SimRoute.WhichRoute(OpenMetaverse.Vector3d)">
            <summary>
            Searches route(s) for the point
            </summary>
            <param name="point"></param>
            <returns>the route element with the point point</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimRoute.BlockedPoint(OpenMetaverse.Vector3d)">
            <summary>
            If this route contains the point then the route is blocked
            </summary>
            <param name="point"></param>
            <returns>return true if an element was marked blocked</returns>
        </member>
        <member name="P:PathSystem3D.Navigation.SimRoute.StartNode">
            <summary>
            Gets/Sets the node from which the arc starts.
            </summary>
            <exception cref="T:System.ArgumentNullException">StartNode cannot be set to null.</exception>
            <exception cref="T:System.ArgumentException">StartNode cannot be set to EndNode.</exception>
        </member>
        <member name="P:PathSystem3D.Navigation.SimRoute.EndNode">
            <summary>
            Gets/Sets the node to which the arc ends.
            </summary>
            <exception cref="T:System.ArgumentNullException">EndNode cannot be set to null.</exception>
            <exception cref="T:System.ArgumentException">EndNode cannot be set to StartNode.</exception>
        </member>
        <member name="P:PathSystem3D.Navigation.SimRoute.Weight">
            <summary>
            Sets/Gets the weight of the arc.
            This value is used to determine the cost of moving through the arc.
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.SimRoute.Passable">
            <summary>
            Gets/Sets the functional state of the arc.
            'true' means that the arc is in its normal state.
            'false' means that the arc will not be taken into account (as if it did not exist or if its cost were infinite).
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.SimRoute.Length">
            <summary>
            Gets arc's length.
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.SimRoute.Cost">
            <summary>
            Gets the cost of moving through the arc.
            Can be overriden when not simply equals to Weight*Length.
            </summary>
        </member>
        <member name="T:PathSystem3D.Navigation.SimRouteMulti">
            <summary>
            A SimRoute containing other SimRoutes
            </summary>
        </member>
        <member name="M:PathSystem3D.Navigation.PriorityQueueB`1.Push(`0)">
            <summary>
            Push an object onto the PQ
            </summary>
            <param name="O">The new object</param>
            <returns>The index in the list where the object is _now_. This will change when objects are taken from or put onto the PQ.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.PriorityQueueB`1.Pop">
            <summary>
            Get the smallest object and remove it.
            </summary>
            <returns>The smallest object</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.PriorityQueueB`1.Update(System.Int32)">
            <summary>
            Notify the PQ that the object at position i has changed
            and the PQ needs to restore order.
            Since you dont have access to any indexes (except by using the
            explicit IList.this) you should not call this function without knowing exactly
            what you do.
            </summary>
            <param name="i">The index of the changed object.</param>
        </member>
        <member name="M:PathSystem3D.Navigation.PriorityQueueB`1.Peek">
            <summary>
            Get the smallest object without removing it.
            </summary>
            <returns>The smallest object</returns>
        </member>
        <member name="T:PathSystem3D.Navigation.CollisionPlane">
            <summary>
            this is the 2D object for pathfinders like A*
            </summary>
        </member>
        <member name="M:PathSystem3D.Navigation.CollisionPlane.SurroundingBlocked0(System.Int32,System.Int32,System.Byte,System.Byte[0:,0:])">
            <summary>
             Private due to unchecked index
            </summary>
            <param name="PX"></param>
            <param name="PY"></param>
            <returns></returns>
        </member>
        <member name="M:THIRDPARTY.PrimMesher.SculptMesh.#ctor(System.Single[0:,0:],System.Single,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            ** Experimental ** May disappear from future versions ** not recommeneded for use in applications
            Construct a sculpt mesh from a 2D array of floats
            </summary>
            <param name="zMap"></param>
            <param name="xBegin"></param>
            <param name="xEnd"></param>
            <param name="yBegin"></param>
            <param name="yEnd"></param>
            <param name="viewerMode"></param>
        </member>
        <member name="M:THIRDPARTY.PrimMesher.SculptMesh.bitmap2Coords(System.Drawing.Bitmap,System.Int32,System.Boolean)">
            <summary>
            converts a bitmap to a list lists of coords, while scaling the image.
            the scaling is done in floating point so as to allow for reduced vertex position
            quantization as the position will be averaged between pixel values. this routine will
            likely fail if the bitmap width and height are not powers of 2.
            </summary>
            <param name="bitmap"></param>
            <param name="scale"></param>
            <param name="mirror"></param>
            <returns></returns>
        </member>
        <member name="M:THIRDPARTY.PrimMesher.SculptMesh.Copy">
            <summary>
            Duplicates a SculptMesh object. All object properties are copied by value, including lists.
            </summary>
            <returns></returns>
        </member>
        <member name="M:THIRDPARTY.PrimMesher.SculptMesh.AddPos(System.Single,System.Single,System.Single)">
            <summary>
            Adds a value to each XYZ vertex coordinate in the mesh
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:THIRDPARTY.PrimMesher.SculptMesh.AddRot(THIRDPARTY.PrimMesher.Quat)">
            <summary>
            Rotates the mesh
            </summary>
            <param name="q"></param>
        </member>
        <member name="M:THIRDPARTY.OpenSim.Region.Physics.Manager.PhysicsVector.GetBytes">
            <summary>
            These routines are the easiest way to store XYZ values in an Vector3 without requiring 3 calls.
            </summary>
            <returns></returns>
        </member>
        <member name="T:PathSystem3D.Navigation.Debug.WaypointProperties">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="F:PathSystem3D.Navigation.Debug.WaypointProperties.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:PathSystem3D.Navigation.Debug.WaypointProperties.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:PathSystem3D.Navigation.Debug.WaypointProperties.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.Debug.WaypointProperties.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.Debug.WaypointProperties.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="M:PathSystem3D.Mesher.MeshedObject.RemeshObject(PathSystem3D.Mesher.Box3Fill)">
            <summary>
            Build the Boxes
            </summary>
        </member>
        <member name="M:PathSystem3D.Mesher.MeshedObject.RayTriangleIntersection(OpenMetaverse.Vector3,OpenMetaverse.Vector3,OpenMetaverse.Vector3,OpenMetaverse.Vector3,OpenMetaverse.Vector3,OpenMetaverse.Vector3@)">
            <summary>
            Adapted from http://www.cs.virginia.edu/~gfx/Courses/2003/ImageSynthesis/papers/Acceleration/Fast%20MinimumStorage%20RayTriangle%20Intersection.pdf
            </summary>
            <param name="origin">Origin point of the ray</param>
            <param name="direction">Unit vector representing the direction of the ray</param>
            <param name="vert0">Position of the first triangle corner</param>
            <param name="vert1">Position of the second triangle corner</param>
            <param name="vert2">Position of the third triangle corner</param>
            <param name="collisionPoint">The collision point in the triangle</param>
            <returns>True if the ray passes through the triangle, otherwise false</returns>
        </member>
        <member name="M:PathSystem3D.Mesher.MeshedObject.RayTriangleIntersection(THIRDPARTY.OpenSim.Region.Physics.Meshing.Vertex,THIRDPARTY.OpenSim.Region.Physics.Meshing.Vertex,THIRDPARTY.OpenSim.Region.Physics.Meshing.Vertex,THIRDPARTY.OpenSim.Region.Physics.Meshing.Vertex,THIRDPARTY.OpenSim.Region.Physics.Meshing.Vertex,THIRDPARTY.OpenSim.Region.Physics.Meshing.Vertex@)">
            <summary>
            Adapted from http://www.cs.virginia.edu/~gfx/Courses/2003/ImageSynthesis/papers/Acceleration/Fast%20MinimumStorage%20RayTriangle%20Intersection.pdf
            </summary>
            <param name="origin">Origin point of the ray</param>
            <param name="direction">Unit vector representing the direction of the ray</param>
            <param name="vert0">Position of the first triangle corner</param>
            <param name="vert1">Position of the second triangle corner</param>
            <param name="vert2">Position of the third triangle corner</param>
            <param name="collisionPoint">The collision point in the triangle</param>
            <returns>True if the ray passes through the triangle, otherwise false</returns>
        </member>
        <member name="M:PathSystem3D.Mesher.Box3Fill.#ctor(System.Boolean)">
            <summary>
             Make the box infinatly small
            </summary>        
        </member>
        <member name="M:PathSystem3D.Mesher.Box3Fill.AddVertex(THIRDPARTY.OpenSim.Region.Physics.Meshing.Vertex,OpenMetaverse.Vector3)">
            <summary>
            Make sure box is big enough for this vertex
            </summary>
            <param name="v"></param>
            <returns>true if the box has grown</returns>
        </member>
        <member name="M:PathSystem3D.Mesher.Box3Fill.AddTriangle(THIRDPARTY.OpenSim.Region.Physics.Meshing.Triangle,OpenMetaverse.Vector3)">
            <summary>
            Add Triangle (this just pushes the size of the box outward if needed)
            </summary>
            <param name="t"></param>
            <returns>true if the boxsize was increased</returns>
        </member>
        <member name="F:THIRDPARTY.PrimMesher.Quat.X">
            <summary>X value</summary>
        </member>
        <member name="F:THIRDPARTY.PrimMesher.Quat.Y">
            <summary>Y value</summary>
        </member>
        <member name="F:THIRDPARTY.PrimMesher.Quat.Z">
            <summary>Z value</summary>
        </member>
        <member name="F:THIRDPARTY.PrimMesher.Quat.W">
            <summary>W value</summary>
        </member>
        <member name="T:THIRDPARTY.PrimMesher.Profile">
            <summary>
            generates a profile for extrusion
            </summary>
        </member>
        <member name="M:THIRDPARTY.PrimMesher.Profile.FlipNormals">
            <summary>
            Changes order of the vertex indices and negates the center vertex normal. Does not alter vertex normals of radial vertices
            </summary>
        </member>
        <member name="M:THIRDPARTY.PrimMesher.PrimMesh.ParamsToDisplayString">
            <summary>
            Human readable string representation of the parameters used to create a mesh.
            </summary>
            <returns></returns>
        </member>
        <member name="M:THIRDPARTY.PrimMesher.PrimMesh.#ctor(System.Int32,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Constructs a PrimMesh object and creates the profile for extrusion.
            </summary>
            <param name="sides"></param>
            <param name="profileStart"></param>
            <param name="profileEnd"></param>
            <param name="hollow"></param>
            <param name="hollowSides"></param>
        </member>
        <member name="M:THIRDPARTY.PrimMesher.PrimMesh.Extrude(THIRDPARTY.PrimMesher.PathType)">
            <summary>
            Extrudes a profile along a straight line path. Used for prim types box, cylinder, and prism.
            </summary>
        </member>
        <member name="M:THIRDPARTY.PrimMesher.PrimMesh.ExtrudeLinear">
            <summary>
            Extrudes a profile along a straight line path. Used for prim types box, cylinder, and prism.
            </summary>
        </member>
        <member name="M:THIRDPARTY.PrimMesher.PrimMesh.ExtrudeCircular">
            <summary>
            Extrude a profile into a circular path prim mesh. Used for prim types torus, tube, and ring.
            </summary>
        </member>
        <member name="M:THIRDPARTY.PrimMesher.PrimMesh.SurfaceNormal(System.Int32)">
            <summary>
            Calculate the surface normal for a face in the list of faces
            </summary>
            <param name="faceIndex"></param>
            <returns></returns>
        </member>
        <member name="M:THIRDPARTY.PrimMesher.PrimMesh.Copy">
            <summary>
            Duplicates a PrimMesh object. All object properties are copied by value, including lists.
            </summary>
            <returns></returns>
        </member>
        <member name="M:THIRDPARTY.PrimMesher.PrimMesh.CalcNormals">
            <summary>
            Calculate surface normals for all of the faces in the list of faces in this mesh
            </summary>
        </member>
        <member name="M:THIRDPARTY.PrimMesher.PrimMesh.AddPos(System.Single,System.Single,System.Single)">
            <summary>
            Adds a value to each XYZ vertex coordinate in the mesh
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:THIRDPARTY.PrimMesher.PrimMesh.AddRot(THIRDPARTY.PrimMesher.Quat)">
            <summary>
            Rotates the mesh
            </summary>
            <param name="q"></param>
        </member>
        <member name="M:THIRDPARTY.PrimMesher.PrimMesh.Scale(System.Single,System.Single,System.Single)">
            <summary>
            Scales the mesh
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:THIRDPARTY.PrimMesher.PrimMesh.DumpRaw(System.String,System.String,System.String)">
            <summary>
            Dumps the mesh to a Blender compatible "Raw" format file
            </summary>
            <param name="path"></param>
            <param name="name"></param>
            <param name="title"></param>
        </member>
        <member name="T:PathSystem3D.Navigation.SortableList">
            <summary>
            The SortableList allows to maintain a list sorted as long as needed.
            If no IComparer interface has been provided at construction, then the list expects the Objects to implement IComparer.
            If the list is not sorted it behaves like an ordinary list.
            When sorted, the list's "Add" method will put new objects at the right place.
            As well the "Contains" and "IndexOf" methods will perform a binary search.
            </summary>
        </member>
        <member name="M:PathSystem3D.Navigation.SortableList.#ctor">
            <summary>
            Default constructor.
            Since no IComparer is provided here, added objects must implement the IComparer interface.
            </summary>
        </member>
        <member name="M:PathSystem3D.Navigation.SortableList.#ctor(System.Int32)">
            <summary>
            Constructor.
            Since no IComparer is provided, added objects must implement the IComparer interface.
            </summary>
            <param name="Capacity">Capacity of the list (<see cref="P:System.Collections.ArrayList.Capacity">ArrayList.Capacity</see>)</param>
        </member>
        <member name="M:PathSystem3D.Navigation.SortableList.#ctor(System.Collections.IComparer)">
            <summary>
            Constructor.
            </summary>
            <param name="Comparer">Will be used to compare added elements for sort and search operations.</param>
        </member>
        <member name="M:PathSystem3D.Navigation.SortableList.#ctor(System.Collections.IComparer,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="Comparer">Will be used to compare added elements for sort and search operations.</param>
            <param name="Capacity">Capacity of the list (<see cref="P:System.Collections.ArrayList.Capacity">ArrayList.Capacity</see>)</param>
        </member>
        <member name="M:PathSystem3D.Navigation.SortableList.Add(System.Object)">
            <summary>
            IList implementation.
            If the <see cref="P:PathSystem3D.Navigation.SortableList.KeepSorted">KeepSorted</see> property is set to true, the object will be added at the right place.
            Else it will be added at the end of the list.
            </summary>
            <param name="O">The object to add.</param>
            <returns>The index where the object has been added.</returns>
            <exception cref="T:System.ArgumentException">The SortableList is set to use object's IComparable interface, and the specifed object does not implement this interface.</exception>
        </member>
        <member name="M:PathSystem3D.Navigation.SortableList.Contains(System.Object)">
            <summary>
            IList implementation.
            Search for a specified object in the list.
            If the list is sorted, a <see cref="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">BinarySearch</see> is performed using IComparer interface.
            Else the <see cref="M:PathSystem3D.Navigation.SortableList.Equals(System.Object)">Object.Equals</see> implementation is used.
            </summary>
            <param name="O">The object to look for</param>
            <returns>true if the object is in the list, otherwise false.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SortableList.IndexOf(System.Object)">
            <summary>
            IList implementation.
            Returns the index of the specified object in the list.
            If the list is sorted, a <see cref="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">BinarySearch</see> is performed using IComparer interface.
            Else the <see cref="M:PathSystem3D.Navigation.SortableList.Equals(System.Object)">Object.Equals</see> implementation of objects is used.
            </summary>
            <param name="O">The object to locate.</param>
            <returns>
            If the object has been found, a positive integer corresponding to its position.
            If the objects has not been found, a negative integer which is the bitwise complement of the index of the next element.
            </returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SortableList.Clear">
            <summary>
            IList implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
        </member>
        <member name="M:PathSystem3D.Navigation.SortableList.Insert(System.Int32,System.Object)">
            <summary>
            IList implementation.
            Inserts an objects at a specified index.
            Cannot be used if the list has its KeepSorted property set to true.
            </summary>
            <param name="Index">The index before which the object must be added.</param>
            <param name="O">The object to add.</param>
            <exception cref="T:System.ArgumentException">The SortableList is set to use object's IComparable interface, and the specifed object does not implement this interface.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less than zero or Index is greater than Count.</exception>
            <exception cref="T:System.InvalidOperationException">If the object is added at the specify index, the list will not be sorted any more and the <see cref="P:PathSystem3D.Navigation.SortableList.KeepSorted"/> property is set to true.</exception>
        </member>
        <member name="M:PathSystem3D.Navigation.SortableList.Remove(System.Object)">
            <summary>
            IList implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
            <param name="Value">The object whose value must be removed if found in the list.</param>
        </member>
        <member name="M:PathSystem3D.Navigation.SortableList.RemoveAt(System.Int32)">
            <summary>
            IList implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
            <param name="Index">Index of object to remove.</param>
        </member>
        <member name="M:PathSystem3D.Navigation.SortableList.CopyTo(System.Array,System.Int32)">
            <summary>
            IList.ICollection implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:PathSystem3D.Navigation.SortableList.GetEnumerator">
            <summary>
            IList.IEnumerable implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
            <returns>Enumerator on the list.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SortableList.Clone">
            <summary>
            ICloneable implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
            <returns>Cloned object.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SortableList.IndexOf(System.Object,System.Int32)">
            <summary>
            Idem IndexOf(object), but starting at a specified position in the list
            </summary>
            <param name="O">The object to locate.</param>
            <param name="Start">The index for start position.</param>
            <returns></returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SortableList.IndexOf(System.Object,PathSystem3D.Navigation.SortableList.Equality)">
            <summary>
            Idem IndexOf(object), but with a specified equality function
            </summary>
            <param name="O">The object to locate.</param>
            <param name="AreEqual">Equality function to use for the search.</param>
            <returns></returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SortableList.IndexOf(System.Object,System.Int32,PathSystem3D.Navigation.SortableList.Equality)">
            <summary>
            Idem IndexOf(object), but with a start index and a specified equality function
            </summary>
            <param name="O">The object to locate.</param>
            <param name="Start">The index for start position.</param>
            <param name="AreEqual">Equality function to use for the search.</param>
            <returns></returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SortableList.ToString">
            <summary>
            Object.ToString() override.
            Build a string to represent the list.
            </summary>
            <returns>The string refecting the list.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SortableList.Equals(System.Object)">
            <summary>
            Object.Equals() override.
            </summary>
            <returns>true if object is equal to this, otherwise false.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SortableList.GetHashCode">
            <summary>
            Object.GetHashCode() override.
            </summary>
            <returns>HashCode value.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SortableList.Sort">
            <summary>
            Sorts the elements in the list using <see cref="M:System.Collections.ArrayList.Sort">ArrayList.Sort</see>.
            Does nothing if the list is already sorted.
            </summary>
        </member>
        <member name="M:PathSystem3D.Navigation.SortableList.AddRange(System.Collections.ICollection)">
            <summary>
            If the <see cref="P:PathSystem3D.Navigation.SortableList.KeepSorted">KeepSorted</see> property is set to true, the object will be added at the right place.
            Else it will be appended to the list.
            </summary>
            <param name="C">The object to add.</param>
            <returns>The index where the object has been added.</returns>
            <exception cref="T:System.ArgumentException">The SortableList is set to use object's IComparable interface, and the specifed object does not implement this interface.</exception>
        </member>
        <member name="M:PathSystem3D.Navigation.SortableList.InsertRange(System.Int32,System.Collections.ICollection)">
            <summary>
            Inserts a collection of objects at a specified index.
            Should not be used if the list is the KeepSorted property is set to true.
            </summary>
            <param name="Index">The index before which the objects must be added.</param>
            <param name="C">The object to add.</param>
            <exception cref="T:System.ArgumentException">The SortableList is set to use objects's IComparable interface, and the specifed object does not implement this interface.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less than zero or Index is greater than Count.</exception>
            <exception cref="T:System.InvalidOperationException">If the object is added at the specify index, the list will not be sorted any more and the <see cref="P:PathSystem3D.Navigation.SortableList.KeepSorted"/> property is set to true.</exception>
        </member>
        <member name="M:PathSystem3D.Navigation.SortableList.LimitNbOccurrences(System.Object,System.Int32)">
            <summary>
            Limits the number of occurrences of a specified value.
            Same values are equals according to the Equals() method of objects in the list.
            The first occurrences encountered are kept.
            </summary>
            <param name="Value">Value whose occurrences number must be limited.</param>
            <param name="NbValuesToKeep">Number of occurrences to keep</param>
        </member>
        <member name="M:PathSystem3D.Navigation.SortableList.RemoveDuplicates">
            <summary>
            Removes all duplicates in the list.
            Each value encountered will have only one representant.
            </summary>
        </member>
        <member name="M:PathSystem3D.Navigation.SortableList.IndexOfMin">
            <summary>
            Returns the object of the list whose value is minimum
            </summary>
            <returns>The minimum object in the list</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SortableList.IndexOfMax">
            <summary>
            Returns the object of the list whose value is maximum
            </summary>
            <returns>The maximum object in the list</returns>
        </member>
        <member name="P:PathSystem3D.Navigation.SortableList.IsSorted">
            <summary>
            'Get only' property that indicates if the list is sorted.
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.SortableList.KeepSorted">
            <summary>
            Get : Indicates if the list must be kept sorted from now on.
            Set : Tells the list if it must stay sorted or not. Impossible to set to true if the list is not sorted.
            <see cref="P:PathSystem3D.Navigation.SortableList.KeepSorted">KeepSorted</see>==true implies that <see cref="P:PathSystem3D.Navigation.SortableList.IsSorted">IsSorted</see>==true
            </summary>
            <exception cref="T:System.InvalidOperationException">Cannot be set to true if the list is not sorted yet.</exception>
        </member>
        <member name="P:PathSystem3D.Navigation.SortableList.AddDuplicates">
            <summary>
            If set to true, it will not be possible to add an object to the list if its value is already in the list.
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.SortableList.Item(System.Int32)">
            <summary>
            IList implementation.
            Gets - or sets - object's value at a specified index.
            The set operation is impossible if the <see cref="P:PathSystem3D.Navigation.SortableList.KeepSorted">KeepSorted</see> property is set to true.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less than zero or Index is greater than Count.</exception>
            <exception cref="T:System.InvalidOperationException">[] operator cannot be used to set a value if KeepSorted property is set to true.</exception>
        </member>
        <member name="P:PathSystem3D.Navigation.SortableList.IsFixedSize">
            <summary>
            IList implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.SortableList.IsReadOnly">
            <summary>
            IList implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.SortableList.Count">
            <summary>
            IList.ICollection implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.SortableList.IsSynchronized">
            <summary>
            IList.ICollection implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.SortableList.SyncRoot">
            <summary>
            IList.ICollection implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.SortableList.Capacity">
            <summary>
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
        </member>
        <member name="T:PathSystem3D.Navigation.SortableList.Equality">
            <summary>
            Defines an equality for two objects
            </summary>
        </member>
        <member name="M:PathSystem3D.Navigation.SimAbstractMover.BlockTowardsVector(OpenMetaverse.Vector3)">
            <summary>
            Blocks points -45 to +45 degrees in front of Bot (assumes the bot is heading toward V3)
            </summary>
            <param name="v3"></param>
        </member>
        <member name="M:PathSystem3D.Navigation.SimCollisionPlaneMover.DepricateRoute(System.Collections.Generic.IEnumerable{OpenMetaverse.Vector3d},System.Double)">
            <summary>
            Make sure this the non-simplfied route
            </summary>
            <param name="route"></param>
        </member>
        <member name="M:PathSystem3D.Navigation.SimReRouteMover.TryGotoTarget(PathSystem3D.Navigation.SimPosition,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="pos"></param>
            <param name="IsFake"></param>
            <returns></returns>s
        </member>
        <member name="T:PathSystem3D.Navigation.SimPathStore">
            <summary>
            Graph structure. It is defined with :
            It is defined by a 2D matrix of CollisionIndex 
            It is used to perform operations on CollisionPlanes
            </summary>
        </member>
        <member name="F:PathSystem3D.Navigation.SimPathStore.IsSolidPredicate">
            <summary>
            By default no boxes are passable
            </summary>
        </member>
        <member name="F:PathSystem3D.Navigation.SimPathStore.GroundLevelDelegate">
            <summary>
            The Pathstore can implement this
            </summary>
        </member>
        <member name="M:PathSystem3D.Navigation.SimPathStore.BlockPointTemp(OpenMetaverse.Vector3,System.Collections.Generic.List{System.Threading.ThreadStart},System.Byte)">
            <summary>
            Blocks a point temporarily (one minute)
            However! if the point is of questionable quality it will permanently block it
            </summary>
            <param name="vector3"></param>
        </member>
        <member name="M:PathSystem3D.Navigation.SimPathStore.GetUsableLocalPositionOf(PathSystem3D.Navigation.CollisionPlane,OpenMetaverse.Vector3,System.Single)">
            <summary>
             The closet usable space to the v3 TODO
            </summary>
            <param name="v3"></param>
            <returns></returns>
                    
        </member>
        <member name="M:PathSystem3D.Navigation.SimPathStore.GetLocalLeftPos(PathSystem3D.Navigation.SimPosition,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="zAngleFromFace"></param>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimPathStore.GetWaypointOf(OpenMetaverse.Vector3)">
            <summary>
             The closet usable waypoint to the v3 TODO
            </summary>
            <param name="v3"></param>
            <returns></returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimPathStore.GetCollisionPlane(System.Double)">
            <summary>
             Todo needs a smarter way to grab the right layers.. 
               The CollisionPlane[] is pretty much a hack
            </summary>
            <param name="Z"></param>
            <returns></returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimPathStore.SetTraveled(System.Single,System.Single,System.Single)">
            <summary>
            Will not changed blocked points - if needed use SetPassable
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:PathSystem3D.Navigation.SimPathStore.#ctor(System.String,OpenMetaverse.Vector2,OpenMetaverse.Vector3d,OpenMetaverse.Vector3)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:PathSystem3D.Navigation.SimPathStore.Update(OpenMetaverse.UUID,OpenMetaverse.Vector3,OpenMetaverse.Quaternion)">
            <summary>
            
            </summary>
            <param name="agentID"></param>
            <param name="point"></param>
            <param name="rotation"></param>
        </member>
        <member name="T:PathSystem3D.Navigation.Debug.GraphFormer">
            <summary>
            Summary description for Form1.
            </summary>
        </member>
        <member name="M:PathSystem3D.Navigation.Debug.GraphFormer.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:PathSystem3D.Navigation.Debug.GraphFormer.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:PathSystem3D.Navigation.Debug.GraphFormer.GraphPanel_Paint(System.Object,System.Windows.Forms.PaintEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            
        </member>
        <member name="M:PathSystem3D.Navigation.Debug.GraphFormer.MainDebug">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="T:PathSystem3D.Navigation.SimWaypointImpl">
            <summary>
            Basically a node is defined with a geographical position in space.
            It is also characterized with both collections of outgoing arcs and incoming arcs.
            </summary>
        </member>
        <member name="M:PathSystem3D.Navigation.SimWaypointImpl.CreateLocal(System.Single,System.Single,System.Single,PathSystem3D.Navigation.SimPathStore)">
            <summary>
            Constructor.
            </summary>
            <param name="PositionX">X coordinate.</param>
            <param name="PositionY">Y coordinate.</param>
            <param name="PositionZ">Z coordinate.</param>
        </member>
        <member name="M:PathSystem3D.Navigation.SimWaypointImpl.ChangeXYZDebug(System.Double,System.Double,System.Double)">
            <summary>
            Modifies X, Y and Z coordinates
            </summary>
            <param name="PositionX">X coordinate.</param>
            <param name="PositionY">Y coordinate.</param>
            <param name="PositionZ">Z coordinate.</param>
        </member>
        <member name="M:PathSystem3D.Navigation.SimWaypointImpl.Isolate">
            <summary>
            Unlink this node from all current connected arcs.
            </summary>
        </member>
        <member name="M:PathSystem3D.Navigation.SimWaypointImpl.UntieIncomingArcs">
            <summary>
            Unlink this node from all current incoming arcs.
            </summary>
        </member>
        <member name="M:PathSystem3D.Navigation.SimWaypointImpl.UntieOutgoingArcs">
            <summary>
            Unlink this node from all current outgoing arcs.
            </summary>
        </member>
        <member name="M:PathSystem3D.Navigation.SimWaypointImpl.ArcGoingTo(PathSystem3D.Navigation.SimWaypoint)">
            <summary>
            Returns the arc that leads to the specified node if it exists.
            </summary>
            <exception cref="T:System.ArgumentNullException">Argument node must not be null.</exception>
            <param name="N">A node that could be reached from this one.</param>
            <returns>The arc leading to N from this / null if there is no solution.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimWaypointImpl.ArcComingFrom(PathSystem3D.Navigation.SimWaypoint)">
            <summary>
            Returns the arc that arc that comes to this from the specified node if it exists.
            </summary>
            <exception cref="T:System.ArgumentNullException">Argument node must not be null.</exception>
            <param name="N">A node that could reach this one.</param>
            <returns>The arc coming to this from N / null if there is no solution.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimWaypointImpl.ToString">
            <summary>
            object.ToString() override.
            Returns the textual description of the node.
            </summary>
            <returns>String describing this node.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimWaypointImpl.Clone">
            <summary>
            Returns a copy of this node.
            </summary>
            <returns>The reference of the new object.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimWaypointImpl.GetHashCode">
            <summary>
            Object.GetHashCode override.
            </summary>
            <returns>HashCode value.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimWaypointImpl.EuclidianDistance(PathSystem3D.Navigation.SimWaypoint,PathSystem3D.Navigation.SimWaypoint)">
            <summary>
            Returns the euclidian distance between two nodes : Sqrt(Dx²+Dy²+Dz²)
            </summary>
            <param name="N1">First node.</param>
            <param name="N2">Second node.</param>
            <returns>Distance value.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimWaypointImpl.SquareEuclidianDistance(PathSystem3D.Navigation.SimWaypoint,PathSystem3D.Navigation.SimWaypoint)">
            <summary>
            Returns the square euclidian distance between two nodes : Dx²+Dy²+Dz²
            </summary>
            <exception cref="T:System.ArgumentNullException">Argument nodes must not be null.</exception>
            <param name="N1">First node.</param>
            <param name="N2">Second node.</param>
            <returns>Distance value.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimWaypointImpl.ManhattanDistance(PathSystem3D.Navigation.SimWaypoint,PathSystem3D.Navigation.SimWaypoint)">
            <summary>
            Returns the manhattan distance between two nodes : |Dx|+|Dy|+|Dz|
            </summary>
            <exception cref="T:System.ArgumentNullException">Argument nodes must not be null.</exception>
            <param name="N1">First node.</param>
            <param name="N2">Second node.</param>
            <returns>Distance value.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimWaypointImpl.MaxDistanceAlongAxis(PathSystem3D.Navigation.SimWaypoint,PathSystem3D.Navigation.SimWaypoint)">
            <summary>
            Returns the maximum distance between two nodes : Max(|Dx|, |Dy|, |Dz|)
            </summary>
            <exception cref="T:System.ArgumentNullException">Argument nodes must not be null.</exception>
            <param name="N1">First node.</param>
            <param name="N2">Second node.</param>
            <returns>Distance value.</returns>
        </member>
        <member name="M:PathSystem3D.Navigation.SimWaypointImpl.BoundingBox(System.Collections.Generic.ICollection{PathSystem3D.Navigation.SimWaypoint},System.Double[]@,System.Double[]@)">
            <summary>
            Returns the bounding box that wraps the specified list of nodes.
            </summary>
            <exception cref="T:System.ArgumentException">The list must only contain elements of type Node.</exception>
            <exception cref="T:System.ArgumentException">The list of nodes is empty.</exception>
            <param name="NodesGroup">The list of nodes to wrap.</param>
            <param name="MinPoint">The point of minimal coordinates for the box.</param>
            <param name="MaxPoint">The point of maximal coordinates for the box.</param>
        </member>
        <member name="P:PathSystem3D.Navigation.SimWaypointImpl.IncomingArcs">
            <summary>
            Gets the list of the arcs that lead to this node.
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.SimWaypointImpl.OutgoingArcs">
            <summary>
            Gets the list of the arcs that start from this node.
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.SimWaypointImpl.IsPassable">
            Gets/Sets the functional state of the node.
            'true' means that the node is in its normal state.
            'false' means that the node will not be taken into account (as if it did not exist).
        </member>
        <member name="P:PathSystem3D.Navigation.SimWaypointImpl.DX">
            <summary>
            Gets X coordinate on the Graph debugger (whole world position).
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.SimWaypointImpl.DY">
            <summary>
            Gets Y coordinate on the Graph debugger
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.SimWaypointImpl.Position">
            <summary>
            Gets/Sets the geographical position of the node.
            </summary>
            <exception cref="T:System.ArgumentNullException">Cannot set the _GlobalPos to null.</exception>
        </member>
        <member name="P:PathSystem3D.Navigation.SimWaypointImpl.AccessibleNodes">
            <summary>
            Gets the array of nodes that can be directly reached from this one.
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.SimWaypointImpl.AccessingNodes">
            <summary>
            Gets the array of nodes that can directly reach this one.
            </summary>
        </member>
        <member name="P:PathSystem3D.Navigation.SimWaypointImpl.Molecule">
            <summary>
            Gets the array of nodes directly linked plus this one.
            </summary>
        </member>
        <member name="F:PathSystem3D.Navigation.Debug.PanelPathFinder.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:PathSystem3D.Navigation.Debug.PanelPathFinder.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:PathSystem3D.Navigation.Debug.PanelPathFinder.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:THIRDPARTY.OpenSim.Region.Physics.Meshing.Mesh.getIndexListAsIntLocked">
            <summary>
            creates a list of index values that defines triangle faces. THIS METHOD FREES ALL NON-PINNED MESH DATA
            </summary>
            <returns></returns>
        </member>
        <member name="M:THIRDPARTY.OpenSim.Region.Physics.Meshing.Mesh.releaseSourceMeshData">
            <summary>
            frees up the source mesh data to minimize memory - call this method after calling get*Locked() functions
            </summary>
        </member>
        <member name="T:PathSystem3D.Navigation.Debug.FlickerFreePanel">
            <summary>
            Summary description for FlickerFreePanel.
            </summary>
        </member>
    </members>
</doc>
