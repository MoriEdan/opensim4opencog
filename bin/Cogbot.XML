<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cogbot</name>
    </assembly>
    <members>
        <member name="F:cogbot.TheOpenSims.SimTypeUsage.LispScript">
            if set the client will attempt to run
            the lisp code that does the animation effects
        </member>
        <member name="F:cogbot.TheOpenSims.SimTypeSystem.objectTypes">
             
             STATIC METHODS
             
             
            
        </member>
        <member name="T:cogbot.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:cogbot.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:cogbot.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:cogbot.Properties.Resources.METAboltAuthor">
            <summary>
              Looks up a localized string similar to Legolas Luke.
            </summary>
        </member>
        <member name="P:cogbot.Properties.Resources.METAboltTitle">
            <summary>
              Looks up a localized string similar to METAbolt.
            </summary>
        </member>
        <member name="P:cogbot.Properties.Resources.METAboltVersion">
            <summary>
              Looks up a localized string similar to 0.9.1.12 (BETA).
            </summary>
        </member>
        <member name="M:cogbot.Listeners.Listener.GetModuleName">
            <summary>
             Name registered in the BotClient.registrationTypes collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:cogbot.Listeners.WorldObjects.GetVector(System.String[],System.Int32@)">
            <summary>
            Get a Vector relative to TheSimAvatar
            </summary>
            <param name="args"></param>
            <param name="argsUsed"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.Listeners.WorldObjects.GetZHeading(OpenMetaverse.Quaternion)">
            <summary>
            Convert a Quaternion to a Rotation around a Z-axis
            2*PI = North
            1/2*Pi = East
            PI = South
            3/2*PI = West
            </summary>
            <param name="simRotation">Radians</param>
            <returns></returns>
        </member>
        <member name="M:cogbot.Listeners.WorldObjects.AvatarAnimationHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>
            Process incoming avatar animations
            </summary>
            <param name="packet"></param>
            <param name="sim"></param>
        </member>
        <member name="M:cogbot.Listeners.WorldObjects.ViewerEffectHandler(System.Object,OpenMetaverse.PacketReceivedEventArgs)">
            <summary>
            Process an incoming effect
            </summary>
        </member>
        <member name="M:cogbot.Listeners.WorldObjects.CatchUp(OpenMetaverse.Simulator)">
             inspector.Show();
        </member>
        <member name="M:cogbot.Listeners.WorldObjects.SendOnAddSimObject(cogbot.TheOpenSims.SimObject)">
            <summary>
            Triggers the OnNewSimObject event.
            </summary>
        </member>
        <member name="M:cogbot.Listeners.WorldObjects.SendOnRemoveSimObject(cogbot.TheOpenSims.SimObject)">
            <summary>
            Triggers the OnRemoveSimObject event.
            </summary>
        </member>
        <member name="M:cogbot.Listeners.WorldObjects.SendOnUpdateDataAspect(cogbot.TheOpenSims.BotMentalAspect,System.String,System.Object,System.Object)">
            <summary>
            Triggers the OnUpdateDataAspect event.
            </summary>
        </member>
        <member name="M:cogbot.Listeners.WorldObjects.SendOnAddPartSimObject(cogbot.TheOpenSims.SimObject,System.String,System.Object,System.Object)">
            <summary>
            Triggers the OnAddPartSimObject event.
            </summary>
        </member>
        <member name="M:cogbot.Listeners.WorldObjects.SendOnRemovePartSimObject(cogbot.TheOpenSims.SimObject,System.String,System.Object,System.Object)">
            <summary>
            Triggers the OnRemovePartSimObject event.
            </summary>
        </member>
        <member name="M:cogbot.Listeners.WorldObjects.ExecuteLSL(System.String)">
            <summary>
            eval (thisClient.WorldSystem.GetScriptHolder "ScriptHolder")
            eval (thisClient.WorldSystem.ExecuteLSL "llOwnerSay(llGetObjectName());")
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:cogbot.Listeners.WorldObjects.GetInventoryObject(System.String)">
            <summary>
            first look in our folder then the the shared folder
            </summary>
            <param name="primName"></param>
            <returns></returns>
        </member>
        <member name="F:cogbot.Listeners.WorldObjects.AssetRequestType">
            <summary>
            Assets that WorldObjects requested
            </summary>
        </member>
        <member name="F:cogbot.Listeners.WorldObjects._AllSimulators">
            <summary>
            This is all bot simulator references: the Count would be Bots*Regions
            </summary>
        </member>
        <member name="M:cogbot.Actions.Command.acceptInput(System.String,cogbot.Actions.Parser,cogbot.OutputDelegate)">
            <summary>
            
            </summary>
            <param name="verb"></param>
            <param name="args"></param>
        </member>
        <member name="F:cogbot.Actions.Command.Active">
            <summary>
            When set to true, think will be called.
            </summary>
        </member>
        <member name="F:cogbot.Actions.Command.Parameters">
            <summary>
            Introspective Parameters for calling command from code
            </summary>
        </member>
        <member name="M:cogbot.Actions.Command.Think">
            <summary>
            Called twice per second, when Command.Active is set to true.
            </summary>
        </member>
        <member name="M:cogbot.Actions.Command.ShowUsage">
            <summary>
            Show commandusage
            </summary>
            <returns>CmdResult Failure with a string containing the parameter usage instructions</returns>
        </member>
        <member name="T:cogbot.Actions.BotSystemCommand">
            <summary>
            An interface for commands that do not require a connected grid client
            such as Login or settings but still targets each bot individually
            </summary>
        </member>
        <member name="T:cogbot.Actions.RegionMasterCommand">
            <summary>
            An interface for commands is only invoked on Region mastering bots
            Such as terrain uploads and simulator info (10 bots doing the command at once will create problems)
            Non region master bots are thinner clients and usually not fit for object tracking
            </summary>
        </member>
        <member name="T:cogbot.Actions.BotPersonalCommand">
            <summary>
            An interface for commands that DO REQUIRE a connected grid client
            such as say,jump,movement
            </summary>
        </member>
        <member name="T:cogbot.Actions.GridMasterCommand">
            <summary>
            An interface for commands is only invoked on Grid mastering bots
            Such as Directory info requests (10 bots doing the command at once will create problems)   
            </summary>
        </member>
        <member name="T:cogbot.Actions.SystemApplicationCommand">
            <summary>
            An interface for commands that do not target any specific bots
             Such as pathsystem maintainance or application commands
             The gridClient used though will be GridMaster
            </summary>
        </member>
        <member name="M:cogbot.ScriptEngines.BotScriptInterpreter.LoadFile(System.String,cogbot.OutputDelegate)">
            <summary>
            
            
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.BotScriptInterpreter.Read(System.String,System.IO.TextReader,cogbot.OutputDelegate)">
            <summary>
            
            </summary>
            <param name="context_name"></param>
            <param name="stringCodeReader"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.BotScriptInterpreter.Eof(System.Object)">
            <summary>
            
            </summary>
            <param name="codeTree"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.BotScriptInterpreter.Intern(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="varname"></param>
            <param name="textForm"></param>
        </member>
        <member name="M:cogbot.ScriptEngines.BotScriptInterpreter.Eval(System.Object)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.BotScriptInterpreter.Str(System.Object)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.BotScriptInterpreter.newInterpreter(System.Object)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:cogbot.Actions.Scripting.UploadScriptCommand">
            <summary>
            Example of how to put a new script in your inventory
            </summary>
        </member>
        <member name="M:cogbot.Actions.Scripting.UploadScriptCommand.#ctor(cogbot.BotClient)">
            <summary>
             The default constructor for BotClient commands
            </summary>
            <param name="testClient"></param>
        </member>
        <member name="M:cogbot.Actions.Scripting.UploadScriptCommand.Execute(System.String[],OpenMetaverse.UUID,cogbot.OutputDelegate)">
            <summary>
            The default override for BotClient commands
            </summary>
            <param name="args"></param>
            <param name="fromAgentID"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.Actions.Scripting.UploadScriptCommand.EncodeScript(System.String)">
            <summary>
            Encodes the script text for uploading
            </summary>
            <param name="body"></param>
        </member>
        <member name="T:cogbot.Actions.Estate.DownloadTerrainCommand">
            <summary>
            Request the raw terrain file from the simulator, save it as a file.
            
            Can only be used by the Estate Owner
            </summary>
        </member>
        <member name="F:cogbot.Actions.Estate.DownloadTerrainCommand.xferTimeout">
            <summary>
            Create a Synchronization event object
            </summary>
        </member>
        <member name="F:cogbot.Actions.Estate.DownloadTerrainCommand.result">
            <summary>A string we use to report the result of the request with.</summary>
        </member>
        <member name="M:cogbot.Actions.Estate.DownloadTerrainCommand.#ctor(cogbot.BotClient)">
            <summary>
            Download a simulators raw terrain data and save it to a file
            </summary>
            <param name="testClient"></param>
        </member>
        <member name="M:cogbot.Actions.Estate.DownloadTerrainCommand.Execute(System.String[],OpenMetaverse.UUID,cogbot.OutputDelegate)">
            <summary>
            Execute the application
            </summary>
            <param name="args">arguments passed to this module</param>
            <param name="fromAgentID">The ID of the avatar sending the request</param>
            <returns></returns>
        </member>
        <member name="M:cogbot.Actions.Estate.DownloadTerrainCommand.Assets_XferReceived(System.Object,OpenMetaverse.XferReceivedEventArgs)">
            <summary>
            Handle the reply to the OnXferReceived event
            </summary>
        </member>
        <member name="M:cogbot.Actions.Movement.RotateCommand.OffsetGobal(System.UInt64,OpenMetaverse.Vector3)">
            <summary>
            Offsets a position by the Global position determined by the region handle
            </summary>
            <param name="regionHandle"></param>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.Actions.Movement.RotateCommand.Execute(System.String[],OpenMetaverse.UUID,cogbot.OutputDelegate)">
                        textform> rotate
                        Second Bot: Rotation is at 0
                        textform> rotate 90
                        Second Bot: Turned 90             
        </member>
        <member name="M:cogbot.TheOpenSims.SimObjectImpl.MoveTo(OpenMetaverse.Vector3d,System.Double,System.Single)">
            <summary>
            
            </summary>
            <param name="finalTarget"></param>
            <param name="maxDistance"></param>
            <param name="maxSeconds"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.TheOpenSims.SimObjectImpl.GotoTarget(PathSystem3D.Navigation.SimPosition)">
            <summary>
            Used to be 9 now its 4 times
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="F:cogbot.TheOpenSims.SimObjectImpl.scaleOnNeeds">
            <summary>
            the bonus or handicap the object has compared to the defination 
            (more expensive chair might have more effect)
            </summary>
        </member>
        <member name="M:cogbot.TheOpenSims.SimObjectImpl.GetSizeDistance">
            <summary>
             Gets the distance a ISimAvatar may be from ISimObject to use
            </summary>
            <returns>1-255</returns>
        </member>
        <member name="P:cogbot.TheOpenSims.SimObjectImpl.IsTouchDefined">
            <summary>
            Right now only sees if TouchName has been defined - need a relable way to see if script is defined.
            </summary>
        </member>
        <member name="P:cogbot.TheOpenSims.SimObjectImpl.IsSitDefined">
            <summary>
            Need a more relable way to see if script is defined.
            </summary>
        </member>
        <member name="M:cogbot.ScriptEngines.CycInterpreter.LoadFile(System.String,cogbot.OutputDelegate)">
            <summary>
            
            
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.CycInterpreter.Read(System.String,System.IO.TextReader,cogbot.OutputDelegate)">
            <summary>
            
            </summary>
            <param name="context_name"></param>
            <param name="stringCodeReader"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.CycInterpreter.Eof(System.Object)">
            <summary>
            
            </summary>
            <param name="codeTree"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.CycInterpreter.Intern(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="varname"></param>
            <param name="textForm"></param>
        </member>
        <member name="M:cogbot.ScriptEngines.CycInterpreter.Eval(System.Object)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.CycInterpreter.Str(System.Object)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.CycInterpreter.newInterpreter(System.Object)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:cogbot.LoginForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:cogbot.LoginForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:cogbot.LoginForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:cogbot.Actions.Groups.GroupMembersCommand">
            <summary>
            dumps group members to console
            </summary>
        </member>
        <member name="T:cogbot.Actions.Groups.GroupInfoCommand">
            <summary>
            Shows group info Dialog using Radegast UI
            </summary>
        </member>
        <member name="T:cogbot.Configuration">
            <summary>
            This Configuration class is basically just a set of 
            properties with a couple of static methods to manage
            the serialization to and deserialization from a
            simple XML file.
            </summary>
        </member>
        <member name="M:cogbot.Utilities.BotTcpServer.startSocketListener">
            Configuration config;
        </member>
        <member name="T:cogbot.Actions.Appearance.AppearanceCommand">
            <summary>
            Set avatars current appearance to appearance last stored on simulator
            </summary>
        </member>
        <member name="T:OpenSim.Framework.Console.OpenSimAppender">
            <summary>
            Writes log information out onto the console
            </summary>
        </member>
        <member name="T:cogbot.TheOpenSims.SimRegion">
            <summary>
            Denotes a Simulator region and can help with bot navigation
            </summary>
        </member>
        <member name="M:cogbot.TheOpenSims.SimRegion.GlobalPosToRegionHandle(System.Single,System.Single,System.Single@,System.Single@)">
            <summary>
            Given an X/Y location in absolute (grid-relative) terms, a region
            handle is returned along with the local X/Y location in that region
            </summary>
            <param name="globalX">The absolute X location, a number such as 
            255360.35</param>
            <param name="globalY">The absolute Y location, a number such as
            255360.35</param>
            <param name="localX">The sim-local X position of the global X
            position, a value from 0.0 to 256.0</param>
            <param name="localY">The sim-local Y position of the global Y
            position, a value from 0.0 to 256.0</param>
            <returns>A 64-bit region handle that can be used to teleport to</returns>
        </member>
        <member name="M:cogbot.TheOpenSims.SimRegion.GetUsableLocalPositionOf(OpenMetaverse.Vector3,System.Single)">
            <summary>
             The closet usable space to the v3 TODO
            </summary>
            <param name="v3"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.TheOpenSims.SimRegion.GetWaypointOf(OpenMetaverse.Vector3)">
            <summary>
             The closet usable waypoint to the v3 TODO
            </summary>
            <param name="v3"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.TheOpenSims.SimRegion.GetSimPosition">
            <summary>
            The middle of the Region
            </summary>
            <returns></returns>
        </member>
        <member name="M:cogbot.TheOpenSims.SimRegion.GetSizeDistance">
            <summary>
            The closet usable space to the middle of the Region
            </summary>
            <returns></returns>
        </member>
        <member name="M:cogbot.TheOpenSims.SimRegion.GetLocalLeftPos(PathSystem3D.Navigation.SimPosition,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="zAngleFromFace"></param>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.TheOpenSims.SimRegion.GetGlobalLeftPos(PathSystem3D.Navigation.SimPosition,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="zAngleFromFace"></param>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:cogbot.TheOpenSims.SimRegion.N" -->
        <member name="P:cogbot.TheOpenSims.SimRegion.TheSimulator">
             <summary>
            Getter gets the best simulator and the setter adds the simulator to the known collection
             </summary>
        </member>
        <member name="T:cogbot.Actions.Land.AgentLocationsCommand">
            <summary>
            Display a list of all agent locations in a specified region
            </summary>
        </member>
        <member name="M:cogbot.ScriptEngines.DotLispInterpreter.LoadFile(System.String,cogbot.OutputDelegate)">
            <summary>
            
            
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.DotLispInterpreter.Read(System.String,System.IO.TextReader,cogbot.OutputDelegate)">
            <summary>
            
            </summary>
            <param name="context_name"></param>
            <param name="stringCodeReader"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.DotLispInterpreter.Eof(System.Object)">
            <summary>
            
            </summary>
            <param name="codeTree"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.DotLispInterpreter.Intern(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="varname"></param>
            <param name="textForm"></param>
        </member>
        <member name="M:cogbot.ScriptEngines.DotLispInterpreter.Eval(System.Object)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.DotLispInterpreter.Str(System.Object)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.DotLispInterpreter.newInterpreter(System.Object)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:cogbot.Actions.Scripting.CreateScriptCommand.EncodeScript(System.String)">
            <summary>
            </summary>
            <param name="body"></param>
        </member>
        <member name="M:cogbot.Actions.Inventory.EmptyTrashCommand.#ctor(cogbot.BotClient)">
            <summary>
            BotClient command to download and display a notecard asset
            </summary>
            <param name="testClient"></param>
        </member>
        <member name="M:cogbot.Actions.Inventory.EmptyTrashCommand.Execute(System.String[],OpenMetaverse.UUID,cogbot.OutputDelegate)">
            <summary>
            Exectute the command
            </summary>
            <param name="args"></param>
            <param name="fromAgentID"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.Actions.Estate.UploadRawTerrainCommand.Cleanup">
            <summary>
            Unregister previously subscribed event handlers
            </summary>
        </member>
        <member name="M:cogbot.ScriptEngines.XmlScriptInterpreter.LoadFile(System.String,cogbot.OutputDelegate)">
            <summary>
            
            
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.XmlScriptInterpreter.Read(System.String,System.IO.TextReader,cogbot.OutputDelegate)">
            <summary>
            
            </summary>
            <param name="context_name"></param>
            <param name="stringCodeReader"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.XmlScriptInterpreter.Eof(System.Object)">
            <summary>
            
            </summary>
            <param name="codeTree"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.XmlScriptInterpreter.Intern(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="varname"></param>
            <param name="textForm"></param>
        </member>
        <member name="M:cogbot.ScriptEngines.XmlScriptInterpreter.Eval(System.Object)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.XmlScriptInterpreter.Str(System.Object)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.XmlScriptInterpreter.newInterpreter(System.Object)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.XmlScriptInterpreter.XML2Lisp2(System.String,System.String)">
            <summary>
            (thisClient.XML2Lisp2 "http://myserver/myservice/?q=" chatstring) 
            </summary>
            <param name="URL"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.Actions.Inventory.ViewNotecardCommand.#ctor(cogbot.BotClient)">
            <summary>
            BotClient command to download and display a notecard asset
            </summary>
            <param name="testClient"></param>
        </member>
        <member name="M:cogbot.Actions.Inventory.ViewNotecardCommand.Execute(System.String[],OpenMetaverse.UUID,cogbot.OutputDelegate)">
            <summary>
            Exectute the command
            </summary>
            <param name="args"></param>
            <param name="fromAgentID"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.Actions.Appearance.SetTextureIndexCommand.Execute(System.String[],OpenMetaverse.UUID,cogbot.OutputDelegate)">
            <summary>
            //settexture 5 8dcd4a48-2d37-4909-9f78-f7a9eb4ef903
            </summary>
            <param name="args"></param>
            <param name="fromAgentID"></param>
            <param name="WriteLine"></param>
            <returns></returns>
        </member>
        <member name="T:cogbot.Actions.Groups.GroupRolesCommand">
            <summary>
            dumps group roles to console
            </summary>
        </member>
        <member name="T:cogbot.Actions.Groups.ActivateGroupCommand">
            <summary>
            Changes Avatars currently active group
            </summary>
        </member>
        <member name="F:OpenSim.Framework.Console.Commands.tree">
            <value>
            Commands organized by keyword in a tree
            </value>
        </member>
        <member name="M:OpenSim.Framework.Console.Commands.GetHelp(System.String[])">
            <summary>
            Get help for the given help string
            </summary>
            <param name="helpParts">Parsed parts of the help string.  If empty then general help is returned.</param>
            <returns></returns>
        </member>
        <member name="M:OpenSim.Framework.Console.Commands.CollectHelp(System.Collections.Generic.List{System.String})">
            <summary>
            See if we can find the requested command in order to display longer help
            </summary>
            <param name="helpParts"></param>
            <returns></returns>
        </member>
        <member name="M:OpenSim.Framework.Console.Commands.AddCommand(System.String,System.Boolean,System.String,System.String,System.String,OpenSim.Framework.Console.CommandDelegate)">
            <summary>
            Add a command to those which can be invoked from the console.
            </summary>
            <param name="module"></param>
            <param name="command"></param>
            <param name="help"></param>
            <param name="longhelp"></param>
            <param name="fn"></param>
        </member>
        <member name="M:OpenSim.Framework.Console.Commands.AddCommand(System.String,System.Boolean,System.String,System.String,System.String,System.String,OpenSim.Framework.Console.CommandDelegate)">
            <summary>
            Add a command to those which can be invoked from the console.
            </summary>
            <param name="module"></param>
            <param name="command"></param>
            <param name="help"></param>
            <param name="longhelp"></param>
            <param name="descriptivehelp"></param>
            <param name="fn"></param>
        </member>
        <member name="T:OpenSim.Framework.Console.Commands.CommandInfo">
            <summary>
            Encapsulates a command that can be invoked from the console
            </summary>
        </member>
        <member name="F:OpenSim.Framework.Console.Commands.CommandInfo.module">
            <value>
            The module from which this command comes
            </value>
        </member>
        <member name="F:OpenSim.Framework.Console.Commands.CommandInfo.shared">
            <value>
            Whether the module is shared
            </value>
        </member>
        <member name="F:OpenSim.Framework.Console.Commands.CommandInfo.help_text">
            <value>
            Very short BNF description
            </value>
        </member>
        <member name="F:OpenSim.Framework.Console.Commands.CommandInfo.long_help">
            <value>
            Longer one line help text
            </value>
        </member>
        <member name="F:OpenSim.Framework.Console.Commands.CommandInfo.descriptive_help">
            <value>
            Full descriptive help for this command
            </value>
        </member>
        <member name="F:OpenSim.Framework.Console.Commands.CommandInfo.fn">
            <value>
            The method to invoke for this command
            </value>
        </member>
        <member name="M:OpenSim.Framework.Console.ConsoleBase.DeriveColor(System.String)">
            <summary>
            derive an ansi color from a string, ignoring the darker colors.
            This is used to help automatically bin component tags with colors
            in various print functions.
            </summary>
            <param name="input">arbitrary string for input</param>
            <returns>an ansii color</returns>
        </member>
        <member name="M:OpenSim.Framework.Console.ConsoleBase.Warn(System.String,System.Object[])">
            <summary>
            Sends a warning to the current console output
            </summary>
            <param name="format">The message to send</param>
            <param name="args">WriteLine-style message arguments</param>
        </member>
        <member name="M:OpenSim.Framework.Console.ConsoleBase.Warn(System.String,System.String,System.Object[])">
            <summary>
            Sends a warning to the current console output
            </summary>
            <param name="sender">The module that sent this message</param>
            <param name="format">The message to send</param>
            <param name="args">WriteLine-style message arguments</param>
        </member>
        <member name="M:OpenSim.Framework.Console.ConsoleBase.Notice(System.String,System.Object[])">
            <summary>
            Sends a notice to the current console output
            </summary>
            <param name="format">The message to send</param>
            <param name="args">WriteLine-style message arguments</param>
        </member>
        <member name="M:OpenSim.Framework.Console.ConsoleBase.Notice(System.String,System.String,System.Object[])">
            <summary>
            Sends a notice to the current console output
            </summary>
            <param name="sender">The module that sent this message</param>
            <param name="format">The message to send</param>
            <param name="args">WriteLine-style message arguments</param>
        </member>
        <member name="M:OpenSim.Framework.Console.ConsoleBase.Error(System.String,System.Object[])">
            <summary>
            Sends an error to the current console output
            </summary>
            <param name="format">The message to send</param>
            <param name="args">WriteLine-style message arguments</param>
        </member>
        <member name="M:OpenSim.Framework.Console.ConsoleBase.Error(System.String,System.String,System.Object[])">
            <summary>
            Sends an error to the current console output
            </summary>
            <param name="sender">The module that sent this message</param>
            <param name="format">The message to send</param>
            <param name="args">WriteLine-style message arguments</param>
        </member>
        <member name="M:OpenSim.Framework.Console.ConsoleBase.Status(System.String,System.Object[])">
            <summary>
            Sends a status message to the current console output
            </summary>
            <param name="format">The message to send</param>
            <param name="args">WriteLine-style message arguments</param>
        </member>
        <member name="M:OpenSim.Framework.Console.ConsoleBase.Status(System.String,System.String,System.Object[])">
            <summary>
            Sends a status message to the current console output
            </summary>
            <param name="sender">The module that sent this message</param>
            <param name="format">The message to send</param>
            <param name="args">WriteLine-style message arguments</param>
        </member>
        <member name="P:OpenSim.Framework.Console.ConsoleBase.DefaultPrompt">
            <summary>
            The default prompt text.
            </summary>
        </member>
        <member name="F:cogbot.TheOpenSims.SimMesh.UseExtremeDetailSize">
            <summary>
            UseExtremeDetailSize is compared to Scale X/Y/Z added together and if greater will try to
              generate more faces
            </summary>
        </member>
        <member name="M:cogbot.TheOpenSims.SimMesh.PrimMeshToMesh(THIRDPARTY.PrimMesher.PrimMesh)">
            <summary>
            Convert a PrimMesher.PrimMesh to OpenSim.Region.Physics.Meshing.Mesh
            </summary>
            <param name="meshIn"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.TheOpenSims.SimMesh.PrimitiveToPrimMesh(OpenMetaverse.Primitive,cogbot.TheOpenSims.LevelOfDetail,OpenMetaverse.Vector3,OpenMetaverse.Quaternion)">
            <summary>
            Convert a Openmetaverse.Primitive to a PrimMesh
            </summary>
            <param name="thePrim"></param>
            <param name="detail"></param>
            <param name="pos"></param>
            <param name="rot"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.ScriptManager.LoadScriptInterpreter(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.CSThrowError.execute(org.armedbear.lisp.LispObject[])">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:cogbot.ScriptEngines.LateSymbolPrimitive.execute(org.armedbear.lisp.LispObject[])">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:cogbot.ScriptEngines.CSPrimitive.execute(org.armedbear.lisp.LispObject[])">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:cogbot.ScriptEngines.ABCLInterpreter.findSymbol(System.Object,System.String)">
            <summary>
            (ON-CHAT (@ "My Bot") (@ "hi"))
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.SuspendableTextReader.SupendIt(System.Boolean)">
            <summary>
            
            </summary>
            <param name="?"></param>
        </member>
        <member name="M:cogbot.ScriptEngines.SuspendableTextReader.Close">
            <summary>
            
            </summary>
        </member>
        <member name="M:cogbot.ScriptEngines.SuspendableTextReader.Peek">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.SuspendableTextReader.Read">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.SuspendableTextReader.Read(System.Char[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.SuspendableTextReader.ReadBlock(System.Char[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.SuspendableTextReader.ReadLine">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.SuspendableTextReader.ReadToEnd">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:cogbot.Actions.Friends.FriendsCommand">
            <summary>
            Shows a list of friends
            </summary>
        </member>
        <member name="M:cogbot.Actions.Friends.FriendsCommand.#ctor(cogbot.BotClient)">
            <summary>
            Constructor for FriendsCommand class
            </summary>
            <param name="testClient">A reference to the BotClient object</param>
        </member>
        <member name="M:cogbot.Actions.Friends.FriendsCommand.Execute(System.String[],OpenMetaverse.UUID,cogbot.OutputDelegate)">
            <summary>
            Get a list of current friends
            </summary>
            <param name="args">optional testClient command arguments</param>
            <param name="fromAgentID">The <seealso cref="T:OpenMetaverse.UUID"/> 
            of the agent making the request</param>
            <returns></returns>
        </member>
        <member name="P:cogbot.Actions.CmdResult.AsyncWaitHandle">
            <summary>
            Gets a System.Threading.WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
            A System.Threading.WaitHandle that is used to wait for an asynchronous operation to complete.
        </member>
        <member name="P:cogbot.Actions.CmdResult.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
            Returns: A user-defined object that qualifies or contains information about an asynchronous operation.
        </member>
        <member name="P:cogbot.Actions.CmdResult.CompletedSynchronously">
            <summary>
            true if the asynchronous operation completed synchronously; otherwise, false.
            </summary>
        </member>
        <member name="T:cogbot.Actions.Search.SearchLandCommand">
            <summary>
            
            </summary>
        </member>
        <member name="M:cogbot.Actions.Search.SearchLandCommand.#ctor(cogbot.BotClient)">
            <summary>
            Construct a new instance of the SearchLandCommand
            </summary>
            <param name="testClient"></param>
        </member>
        <member name="M:cogbot.Actions.Search.SearchLandCommand.Execute(System.String[],OpenMetaverse.UUID,cogbot.OutputDelegate)">
            <summary>
            
            </summary>
            <param name="args"></param>
            <param name="fromAgentID"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.Actions.Search.SearchLandCommand.Directory_DirLand(System.Object,OpenMetaverse.DirLandReplyEventArgs)">
            <summary>
            Process the search reply
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:cogbot.Actions.Inventory.Shell.ListContentsCommand.PermMaskString(OpenMetaverse.PermissionMask)">
            <summary>
            Returns a 3-character summary of the PermissionMask
            CMT if the mask allows copy, mod and transfer
            -MT if it disallows copy
            --T if it only allows transfer
            --- if it disallows everything
            </summary>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="T:cogbot.Actions.Friends.RemoveFriendCommand">
            <summary>
            Shows a list of friends
            </summary>
        </member>
        <member name="M:cogbot.Actions.Friends.RemoveFriendCommand.#ctor(cogbot.BotClient)">
            <summary>
            Constructor for FriendsCommand class
            </summary>
            <param name="testClient">A reference to the BotClient object</param>
        </member>
        <member name="M:cogbot.Actions.Friends.RemoveFriendCommand.Execute(System.String[],OpenMetaverse.UUID,cogbot.OutputDelegate)">
            <summary>
            Get a list of current friends
            </summary>
            <param name="args">optional testClient command arguments</param>
            <param name="fromAgentID">The <seealso cref="T:OpenMetaverse.UUID"/> 
            of the agent making the request</param>
            <returns></returns>
        </member>
        <member name="T:cogbot.Actions.Friends.AddFriendCommand">
            <summary>
            Shows a list of friends
            </summary>
        </member>
        <member name="M:cogbot.Actions.Friends.AddFriendCommand.#ctor(cogbot.BotClient)">
            <summary>
            Constructor for FriendsCommand class
            </summary>
            <param name="testClient">A reference to the BotClient object</param>
        </member>
        <member name="M:cogbot.Actions.Friends.AddFriendCommand.Execute(System.String[],OpenMetaverse.UUID,cogbot.OutputDelegate)">
            <summary>
            Get a list of current friends
            </summary>
            <param name="args">optional testClient command arguments</param>
            <param name="fromAgentID">The <seealso cref="T:OpenMetaverse.UUID"/> 
            of the agent making the request</param>
            <returns></returns>
        </member>
        <member name="T:CommandLine.Utility.Arguments">
            <summary>
            Arguments class
            </summary>
        </member>
        <member name="T:cogbot.Actions.SimExport.TarArchiveWriter">
            <summary>
            Produces a tar archive in tar v7 format
            </summary>
        </member>
        <member name="M:cogbot.Actions.SimExport.TarArchiveWriter.AddDir(System.String)">
            <summary>
            Add a directory to the tar archive.  We can only handle one path level right now!
            </summary>
            <param name="dirName"></param>
        </member>
        <member name="M:cogbot.Actions.SimExport.TarArchiveWriter.AddFile(System.String,System.String)">
            <summary>
            Add a file to the tar archive
            </summary>
            <param name="filePath"></param>
            <param name="data"></param>
        </member>
        <member name="M:cogbot.Actions.SimExport.TarArchiveWriter.AddFile(System.String,System.Byte[])">
            <summary>
            Add a file to the tar archive
            </summary>
            <param name="filePath"></param>
            <param name="data"></param>
        </member>
        <member name="M:cogbot.Actions.SimExport.TarArchiveWriter.WriteTar(System.IO.Stream)">
            <summary>
            Write the raw tar archive data to a stream.  The stream will be closed on completion.
            </summary>
            <param name="s">Stream to which to write the data</param>
            <returns></returns>
        </member>
        <member name="M:cogbot.Actions.Inventory.EmptyLostAndCommand.#ctor(cogbot.BotClient)">
            <summary>
            BotClient command to download and display a notecard asset
            </summary>
            <param name="testClient"></param>
        </member>
        <member name="M:cogbot.Actions.Inventory.EmptyLostAndCommand.Execute(System.String[],OpenMetaverse.UUID,cogbot.OutputDelegate)">
            <summary>
            Exectute the command
            </summary>
            <param name="args"></param>
            <param name="fromAgentID"></param>
            <returns></returns>
        </member>
        <member name="T:cogbot.Actions.Inventory.Shell.DeleteFolderCommand">
            <summary>
            Inventory Example, Moves a folder to the Trash folder
            </summary>
        </member>
        <member name="F:cogbot.Actions.SimExport.BackupCommand.MAX_TRANSFERS">
            <summary>Maximum number of transfer requests to send to the server</summary>
        </member>
        <member name="M:cogbot.Actions.SimExport.BackupCommand.BackupFolder(OpenMetaverse.InventoryNode,System.String)">
            <summary>
            BackupFolder - recurse through the inventory nodes sending scripts and notecards to the transfer queue
            </summary>
            <param name="folder">The current leaf in the inventory tree</param>
            <param name="sPathSoFar">path so far, in the form @"c:\here" -- this needs to be "clean" for the current filesystem</param>
        </member>
        <member name="M:cogbot.Actions.SimExport.BackupCommand.BoolToNot(System.Boolean)">
            <summary>
            returns blank or "not" if false
            </summary>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="P:cogbot.Actions.SimExport.BackupCommand.BackgroundBackupRunning">
            <summary>
            true if either of the background threads is running
            </summary>
        </member>
        <member name="P:cogbot.Actions.SimExport.BackupCommand.InventoryWalkerRunning">
            <summary>
            true if the thread walking inventory is running
            </summary>
        </member>
        <member name="P:cogbot.Actions.SimExport.BackupCommand.QueueRunnerRunning">
            <summary>
            true if the thread feeding the queue to the server is running
            </summary>
        </member>
        <member name="P:cogbot.Actions.SimExport.BackupCommand.BackgroundBackupStatus">
            <summary>
            returns a string summarizing activity
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "F:cogbot.BotClient.Running" -->
        <member name="F:cogbot.BotClient.describers">
            public DotCYC.CycConnectionForm cycConnection;
        </member>
        <member name="M:cogbot.BotClient.#ctor(cogbot.ClientManager,OpenMetaverse.GridClient,OpenMetaverse.LoginParams)">
            <summary>
            
            </summary>
        </member>
        <member name="M:cogbot.BotClient.UseInventoryItem(System.String,System.String)">
            <summary>
            UseInventoryItem("wear","Pink Dress");
            UseInventoryItem("attach","Torch!");
            UseInventoryItem("animationStart","Dance Loop");
            </summary>
            <param name="usage"></param>
            <param name="Item"></param>
        </member>
        <member name="M:cogbot.BotClient.XML2Lisp2(System.String,System.String)">
            <summary>
            (thisClient.XML2Lisp2 "http://myserver/myservice/?q=" chatstring) 
            </summary>
            <param name="URL"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.BotClient.Network_OnLogin(System.Object,OpenMetaverse.LoginProgressEventArgs)">
            <summary>
            Initialize everything that needs to be initialized once we're logged in.
            </summary>
            <param name="login">The status of the login</param>
            <param name="message">Error message on failure, MOTD on success.</param>
        </member>
        <member name="M:cogbot.BotClient.RegisterCommand(System.String,cogbot.Actions.Command)">
            <summary>
            Initialize everything that needs to be initialized once we're logged in.
            </summary>
            <param name="login">The status of the login</param>
            <param name="message">Error message on failure, MOTD on success.</param>
        </member>
        <member name="M:cogbot.BotClient.XmlTalk(System.String,cogbot.OutputDelegate)">
            <summary>
            Example text: <sapi> <silence msec="100" /> <bookmark mark="anim:hello.csv"/> Hi there </sapi>
            </summary>
            <param name="text"></param>
            <param name="gate"></param>
        </member>
        <member name="M:cogbot.BotClient.InstantMessage(OpenMetaverse.UUID,System.String,OpenMetaverse.UUID)">
            <summary>
            Sends instance message via radegast system
            </summary>
            <param name="text"></param>
            <param name="gate"></param>
        </member>
        <member name="P:cogbot.BotClient.Network">
            <summary>Networking subsystem</summary>
        </member>
        <member name="P:cogbot.BotClient.Settings">
            <summary>Settings class including constant values and changeable
            parameters for everything</summary>
        </member>
        <member name="P:cogbot.BotClient.Parcels">
            <summary>Parcel (subdivided simulator lots) subsystem</summary>
        </member>
        <member name="P:cogbot.BotClient.Self">
            <summary>Our own avatars subsystem</summary>
        </member>
        <member name="P:cogbot.BotClient.Avatars">
            <summary>Other avatars subsystem</summary>
        </member>
        <member name="P:cogbot.BotClient.Friends">
            <summary>Friends list subsystem</summary>
        </member>
        <member name="P:cogbot.BotClient.Grid">
            <summary>Grid (aka simulator group) subsystem</summary>
        </member>
        <member name="P:cogbot.BotClient.Objects">
            <summary>Object subsystem</summary>
        </member>
        <member name="P:cogbot.BotClient.Groups">
            <summary>Group subsystem</summary>
        </member>
        <member name="P:cogbot.BotClient.Assets">
            <summary>Asset subsystem</summary>
        </member>
        <member name="P:cogbot.BotClient.Estate">
            <summary>Asset subsystem</summary>
        </member>
        <member name="P:cogbot.BotClient.Appearance">
            <summary>Appearance subsystem</summary>
        </member>
        <member name="P:cogbot.BotClient.Inventory">
            <summary>Inventory subsystem</summary>
        </member>
        <member name="P:cogbot.BotClient.Directory">
            <summary>Directory searches including classifieds, people, land 
            sales, etc</summary>
        </member>
        <member name="P:cogbot.BotClient.Terrain">
            <summary>Handles land, wind, and cloud heightmaps</summary>
        </member>
        <member name="P:cogbot.BotClient.Sound">
            <summary>Handles sound-related networking</summary>
        </member>
        <member name="P:cogbot.BotClient.Throttle">
            <summary>Throttling total bandwidth usage, or allocating bandwidth
            for specific data stream types</summary>
        </member>
        <member name="T:cogbot.BotPermissions">
            <summary>
             
            </summary>
        </member>
        <member name="F:cogbot.BotPermissions.Base">
            <summary>Recognise</summary>
        </member>
        <member name="F:cogbot.BotPermissions.Owner">
            <summary>Execute owner commands</summary>
        </member>
        <member name="F:cogbot.BotPermissions.Group">
            <summary>Execute group level perms</summary>
        </member>
        <member name="F:cogbot.BotPermissions.Ignore">
            <summary>Ignore like for bots and users we dont chat with</summary>
        </member>
        <member name="M:cogbot.Actions.WebUtil.HttpPost.DoHttpPost(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Posts the supplied data to specified url.
            </summary>
            <param name="url">The url to post to.</param>
            <param name="values">The values to post.</param>
            <returns>a string containing the result of the post.</returns>
        </member>
        <member name="M:cogbot.Actions.WebUtil.HttpPost.EncodeAndAddItem(System.Text.StringBuilder@,System.String,System.String)">
            <summary>
            Encodes an item and ads it to the string.
            </summary>
            <param name="baseRequest">The previously encoded data.</param>
            <param name="dataItem">The data to encode.</param>
            <returns>A string containing the old data and the previously encoded data.</returns>
        </member>
        <member name="M:cogbot.TheOpenSims.SimAvatar.GetKnownObjects">
            <summary>
            Returns hopefully at least three objects sorted by distance
            </summary>
            <returns></returns>
        </member>
        <member name="F:cogbot.TheOpenSims.SimAvatarImpl.KnownSimObjects">
            <summary>
            things the bot cycles through mentally
            </summary>
        </member>
        <member name="M:cogbot.TheOpenSims.SimAvatarImpl.GetKnownObjects">
            <summary>
            Returns hopefully at least three objects sorted by distance
            </summary>
            <returns></returns>
        </member>
        <member name="F:cogbot.TheOpenSims.SimAvatarImpl._knownTypeUsages">
            <summary>
             Action template stubs 
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:cogbot.TheOpenSims.SimAvatarImpl.Do(cogbot.TheOpenSims.SimTypeUsage,cogbot.TheOpenSims.SimObject)" -->
        <member name="M:cogbot.TheOpenSims.SimAvatarImpl.ScanNewObjects(System.Int32,System.Double,System.Boolean)">
            <summary>
             
            </summary>
            <param name="minimum"></param>
            <param name="sightRange"></param>
        </member>
        <member name="M:cogbot.TheOpenSims.SimAvatarImpl.AddKnowns(System.Collections.Generic.IEnumerable{cogbot.TheOpenSims.SimObject})">
            <summary>
             
            </summary>
            <param name="objects"></param>
        </member>
        <member name="M:cogbot.TheOpenSims.SimAvatarImpl.ResetRegion(System.UInt64)">
            <summary>
             
            </summary>
            <param name="regionHandle"></param>
        </member>
        <member name="M:cogbot.TheOpenSims.SimAvatarImpl.GetSizeDistance">
            <summary>
              Avatars approach distance
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:cogbot.TheOpenSims.SimAvatarImpl.StopMoving" -->
        <member name="M:cogbot.TheOpenSims.SimAvatarImpl.Approach(cogbot.TheOpenSims.SimObject,System.Double)">
            <summary>
             
            </summary>
            <param name="obj"></param>
            <param name="maxDistance"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.TheOpenSims.SimAvatarImpl.MoveTo(OpenMetaverse.Vector3d,System.Double,System.Single)">
            <summary>
             
            </summary>
            <param name="finalTarget"></param>
            <param name="maxDistance"></param>
            <param name="maxSeconds"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.TheOpenSims.SimAvatarImpl.SetObjectRotation(OpenMetaverse.Quaternion)">
            = new Thread(TrackerLoop);
        </member>
        <member name="M:cogbot.TheOpenSims.SimAvatarImpl.OnAvatarAnimations(System.Collections.Generic.List{OpenMetaverse.Animation})">
            public UUID CurrentAmin = UUID.Zero;
            <summary>
             Nephrael Rae: [on-object-animation '(avatar "Candie Brooks") "TALK"][on-object-animation '(avatar "Candie Brooks") "STAND_1"][on-object-animation '(avatar "Candie Brooks") "e45fbdc9-af8f-9408-f742-fcb8c341d2c8"]
            </summary>
            <param name="anims"></param>
        </member>
        <member name="P:cogbot.TheOpenSims.SimAvatarImpl.CurrentAction">
            <summary>
             Current action 
            </summary>       
        </member>
        <member name="P:cogbot.TheOpenSims.SimAvatarImpl.IsSitting">
             public override ISimObject Parent {  get { return this; }   }
        </member>
        <member name="P:cogbot.TheOpenSims.SimAvatarImpl.KnownTypeUsages">
            <summary>
             Action template stubs 
            </summary>
        </member>
        <member name="M:cogbot.ScriptEngines.ClojureInterpreter.LoadFile(System.String,cogbot.OutputDelegate)">
            <summary>
            
            
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.ClojureInterpreter.Read(System.String,System.IO.TextReader,cogbot.OutputDelegate)">
            <summary>
            
            </summary>
            <param name="context_name"></param>
            <param name="stringCodeReader"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.ClojureInterpreter.Eof(System.Object)">
            <summary>
            
            </summary>
            <param name="codeTree"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.ClojureInterpreter.Intern(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="varname"></param>
            <param name="textForm"></param>
        </member>
        <member name="M:cogbot.ScriptEngines.ClojureInterpreter.Eval(System.Object)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.ClojureInterpreter.Str(System.Object)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.ScriptEngines.ClojureInterpreter.newInterpreter(System.Object)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "F:cogbot.ClientManager.registrationTypes" -->
        <member name="M:cogbot.ClientManager.#ctor">
            public static ClientManager this = new ClientManager(accounts, false);
        </member>
        <member name="M:cogbot.ClientManager.LoginHandler(OpenMetaverse.LoginStatus,System.String)">
            <summary>
            Initialize everything that needs to be initialized once we're logged in.
            </summary>
            <param name="login">The status of the login</param>
            <param name="message">Error message on failure, MOTD on success.</param>
        </member>
        <member name="M:cogbot.ClientManager.#ctor(System.Collections.Generic.IEnumerable{cogbot.LoginDetails},System.Boolean)">
            <summary>
            
            </summary>
            <param name="accounts"></param>
        </member>
        <member name="M:cogbot.ClientManager.Login(cogbot.LoginDetails)">
            <summary>
            
            </summary>
            <param name="account"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.ClientManager.Login(System.String[])">
            <summary>
            
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:cogbot.ClientManager.Run">
            <summary>
            
            </summary>
        </member>
        <member name="M:cogbot.ClientManager.DoCommandAll(System.String,OpenMetaverse.UUID,cogbot.OutputDelegate)">
            <summary>
            
            </summary>
            <param name="cmd"></param>
            <param name="fromAgentID"></param>
            <param name="imSessionID"></param>
        </member>
        <member name="M:cogbot.ClientManager.Logout(cogbot.BotClient)">
            <summary>
            
            </summary>
            <param name="CurrentClient"></param>
        </member>
        <member name="M:cogbot.ClientManager.Quit">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
