<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MushDLR223</name>
    </assembly>
    <members>
        <member name="T:Sgml.CaseFolding">
            <summary>
            SGML is case insensitive, so here you can choose between converting
            to lower case or upper case tags.  "None" means that the case is left
            alone, except that end tags will be folded to match the start tags.
            </summary>
        </member>
        <member name="F:Sgml.CaseFolding.None">
            <summary>
            Do not convert case, except for converting end tags to match start tags.
            </summary>
        </member>
        <member name="F:Sgml.CaseFolding.ToUpper">
            <summary>
            Convert tags to upper case.
            </summary>
        </member>
        <member name="F:Sgml.CaseFolding.ToLower">
            <summary>
            Convert tags to lower case.
            </summary>
        </member>
        <member name="T:Sgml.HWStack">
            <summary>
            This stack maintains a high water mark for allocated objects so the client
            can reuse the objects in the stack to reduce memory allocations, this is
            used to maintain current state of the parser for element stack, and attributes
            in each element.
            </summary>
        </member>
        <member name="M:Sgml.HWStack.#ctor(System.Int32)">
            <summary>
            Initialises a new instance of the HWStack class.
            </summary>
            <param name="growth">The amount to grow the stack space by, if more space is needed on the stack.</param>
        </member>
        <member name="M:Sgml.HWStack.Pop">
            <summary>
            Removes and returns the item at the top of the stack
            </summary>
            <returns>The item at the top of the stack.</returns>
        </member>
        <member name="M:Sgml.HWStack.Push">
            <summary>
            Pushes a new slot at the top of the stack.
            </summary>
            <returns>The object at the top of the stack.</returns>
            <remarks>
            This method tries to reuse a slot, if it returns null then
            the user has to call the other Push method.
            </remarks>
        </member>
        <member name="M:Sgml.HWStack.RemoveAt(System.Int32)">
            <summary>
            Remove a specific item from the stack.
            </summary>
            <param name="i">The index of the item to remove.</param>
        </member>
        <member name="P:Sgml.HWStack.Count">
            <summary>
            The number of items currently in the stack.
            </summary>
        </member>
        <member name="P:Sgml.HWStack.Size">
            <summary>
            The size (capacity) of the stack.
            </summary>
        </member>
        <member name="P:Sgml.HWStack.Item(System.Int32)">
            <summary>
            Returns the item at the requested index or null if index is out of bounds
            </summary>
            <param name="i">The index of the item to retrieve.</param>
            <returns>The item at the requested index or null if index is out of bounds.</returns>
        </member>
        <member name="T:Sgml.Attribute">
            <summary>
            This class represents an attribute.  The AttDef is assigned
            from a validation process, and is used to provide default values.
            </summary>
        </member>
        <member name="M:Sgml.Attribute.Reset(System.String,System.String,System.Char)">
            <summary>
            Attribute objects are reused during parsing to reduce memory allocations, 
            hence the Reset method.
            </summary>
        </member>
        <member name="T:Sgml.Node">
            <summary>
            This class models an XML node, an array of elements in scope is maintained while parsing
            for validation purposes, and these Node objects are reused to reduce object allocation,
            hence the reset method.  
            </summary>
        </member>
        <member name="M:Sgml.Node.Reset(System.String,System.Xml.XmlNodeType,System.String)">
            <summary>
            Attribute objects are reused during parsing to reduce memory allocations, 
            hence the Reset method. 
            </summary>
        </member>
        <member name="T:Sgml.SgmlReader">
            <summary>
            SgmlReader is an XmlReader API over any SGML document (including built in 
            support for HTML).  
            </summary>
        </member>
        <member name="F:Sgml.SgmlReader.UNDEFINED_NAMESPACE">
            <summary>
            The value returned when a namespace is queried and none has been specified.
            </summary>
        </member>
        <member name="M:Sgml.SgmlReader.#ctor">
            <summary>
            Initialises a new instance of the SgmlReader class.
            </summary>
        </member>
        <member name="M:Sgml.SgmlReader.#ctor(System.Xml.XmlNameTable)">
            <summary>
            Initialises a new instance of the SgmlReader class with an existing <see cref="T:System.Xml.XmlNameTable"/>, which is NOT used.
            </summary>
            <param name="nt">The nametable to use.</param>
        </member>
        <member name="M:Sgml.SgmlReader.SetBaseUri(System.String)">
            <summary>
            The base Uri is used to resolve relative Uri's like the SystemLiteral and
            Href properties.  This is a method because BaseURI is a read-only
            property on the base XmlReader class.
            </summary>
        </member>
        <member name="M:Sgml.SgmlReader.GetAttribute(System.String)">
            <summary>
            Gets the value of an attribute with the specified <see cref="P:Sgml.SgmlReader.Name"/>.
            </summary>
            <param name="name">The name of the attribute to retrieve.</param>
            <returns>The value of the specified attribute. If the attribute is not found, a null reference (Nothing in Visual Basic) is returned. </returns>
        </member>
        <member name="M:Sgml.SgmlReader.GetAttribute(System.String,System.String)">
            <summary>
            Gets the value of the attribute with the specified <see cref="P:Sgml.SgmlReader.LocalName"/> and <see cref="P:Sgml.SgmlReader.NamespaceURI"/>.
            </summary>
            <param name="name">The local name of the attribute.</param>
            <param name="namespaceURI">The namespace URI of the attribute.</param>
            <returns>The value of the specified attribute. If the attribute is not found, a null reference (Nothing in Visual Basic) is returned. This method does not move the reader.</returns>
        </member>
        <member name="M:Sgml.SgmlReader.GetAttribute(System.Int32)">
            <summary>
            Gets the value of the attribute with the specified index.
            </summary>
            <param name="i">The index of the attribute.</param>
            <returns>The value of the specified attribute. This method does not move the reader.</returns>
        </member>
        <member name="M:Sgml.SgmlReader.MoveToAttribute(System.String)">
            <summary>
            Moves to the atttribute with the specified <see cref="P:Sgml.SgmlReader.Name"/>.
            </summary>
            <param name="name">The qualified name of the attribute.</param>
            <returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
        </member>
        <member name="M:Sgml.SgmlReader.MoveToAttribute(System.String,System.String)">
            <summary>
            Moves to the attribute with the specified <see cref="P:Sgml.SgmlReader.LocalName"/> and <see cref="P:Sgml.SgmlReader.NamespaceURI"/>.
            </summary>
            <param name="name">The local name of the attribute.</param>
            <param name="ns">The namespace URI of the attribute.</param>
            <returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
        </member>
        <member name="M:Sgml.SgmlReader.MoveToAttribute(System.Int32)">
            <summary>
            Moves to the attribute with the specified index.
            </summary>
            <param name="i">The index of the attribute to move to.</param>
        </member>
        <member name="M:Sgml.SgmlReader.MoveToFirstAttribute">
            <summary>
            Moves to the first attribute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sgml.SgmlReader.MoveToNextAttribute">
            <summary>
            Moves to the next attribute.
            </summary>
            <returns>true if there is a next attribute; false if there are no more attributes.</returns>
            <remarks>
            If the current node is an element node, this method is equivalent to <see cref="M:Sgml.SgmlReader.MoveToFirstAttribute"/>. If <see cref="M:Sgml.SgmlReader.MoveToNextAttribute"/> returns true,
            the reader moves to the next attribute; otherwise, the position of the reader does not change.
            </remarks>
        </member>
        <member name="M:Sgml.SgmlReader.MoveToElement">
            <summary>
            Moves to the element that contains the current attribute node.
            </summary>
            <returns>
            true if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); false if the reader is not positioned
            on an attribute (the position of the reader does not change).
            </returns>
        </member>
        <member name="M:Sgml.SgmlReader.GetEncoding">
            <summary>
            Returns the encoding of the current entity.
            </summary>
            <returns>The encoding of the current entity.</returns>
        </member>
        <member name="M:Sgml.SgmlReader.Read">
            <summary>
            Reads the next node from the stream.
            </summary>
            <returns>true if the next node was read successfully; false if there are no more nodes to read.</returns>
        </member>
        <member name="M:Sgml.SgmlReader.ScanLiteral(System.Text.StringBuilder,System.Char)">
            <summary>
            Consumes and returns a literal block of text, expanding entities as it does so.
            </summary>
            <param name="sb">The string builder to use.</param>
            <param name="quote">The delimiter for the literal.</param>
            <returns>The consumed literal.</returns>
            <remarks>
            This version is slightly different from <see cref="M:Sgml.Entity.ScanLiteral(System.Text.StringBuilder,System.Char)"/> in that
            it also expands entities.
            </remarks>
        </member>
        <member name="M:Sgml.SgmlReader.Close">
            <summary>
            Changes the <see cref="P:Sgml.SgmlReader.ReadState"/> to Closed.
            </summary>
        </member>
        <member name="M:Sgml.SgmlReader.ReadString">
            <summary>
            Reads the contents of an element or text node as a string.
            </summary>
            <returns>The contents of the element or an empty string.</returns>
        </member>
        <member name="M:Sgml.SgmlReader.ReadInnerXml">
            <summary>
            Reads all the content, including markup, as a string.
            </summary>
            <returns>
            All the XML content, including markup, in the current node. If the current node has no children,
            an empty string is returned. If the current node is neither an element nor attribute, an empty
            string is returned.
            </returns>
        </member>
        <member name="M:Sgml.SgmlReader.ReadOuterXml">
            <summary>
            Reads the content, including markup, representing this node and all its children.
            </summary>
            <returns>
            If the reader is positioned on an element or an attribute node, this method returns all the XML content, including markup, of the current node and all its children; otherwise, it returns an empty string.
            </returns>
        </member>
        <member name="M:Sgml.SgmlReader.LookupNamespace(System.String)">
            <summary>
            Resolves a namespace prefix in the current element's scope.
            </summary>
            <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string.</param>
            <returns>The namespace URI to which the prefix maps or a null reference (Nothing in Visual Basic) if no matching prefix is found.</returns>
        </member>
        <member name="M:Sgml.SgmlReader.ResolveEntity">
            <summary>
            Resolves the entity reference for EntityReference nodes.
            </summary>
            <exception cref="T:System.InvalidOperationException">SgmlReader does not resolve or return entities.</exception>
        </member>
        <member name="M:Sgml.SgmlReader.ReadAttributeValue">
            <summary>
            Parses the attribute value into one or more Text, EntityReference, or EndEntity nodes.
            </summary>
            <returns>
            true if there are nodes to return. false if the reader is not positioned on an attribute node when the initial call is made or if all the
            attribute values have been read. An empty attribute, such as, misc="", returns true with a single node with a value of string.Empty.
            </returns>
        </member>
        <member name="P:Sgml.SgmlReader.Dtd">
            <summary>
            Specify the SgmlDtd object directly.  This allows you to cache the Dtd and share
            it across multipl SgmlReaders.  To load a DTD from a URL use the SystemLiteral property.
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.DocType">
            <summary>
            The name of root element specified in the DOCTYPE tag.
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.RootElementName">
            <summary>
            The root element of the document.
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.PublicIdentifier">
            <summary>
            The PUBLIC identifier in the DOCTYPE tag
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.SystemLiteral">
            <summary>
            The SYSTEM literal in the DOCTYPE tag identifying the location of the DTD.
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.InternalSubset">
            <summary>
            The DTD internal subset in the DOCTYPE tag
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.InputStream">
            <summary>
            The input stream containing SGML data to parse.
            You must specify this property or the Href property before calling Read().
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.WebProxy">
            <summary>
            Sometimes you need to specify a proxy server in order to load data via HTTP
            from outside the firewall.  For example: "itgproxy:80".
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.Href">
            <summary>
            Specify the location of the input SGML document as a URL.
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.StripDocType">
            <summary>
            Whether to strip out the DOCTYPE tag from the output (default true)
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.IgnoreDtd">
            <summary>
            Gets or sets a value indicating whether to ignore any DTD reference.
            </summary>
            <value><c>true</c> if DTD references should be ignored; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Sgml.SgmlReader.CaseFolding">
            <summary>
            The case conversion behaviour while processing tags.
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.ErrorLog">
            <summary>
            DTD validation errors are written to this stream.
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.ErrorLogFile">
            <summary>
            DTD validation errors are written to this log file.
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.NodeType">
            <summary>
            The node type of the node currently being parsed.
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.Name">
            <summary>
            The name of the current node, if currently positioned on a node or attribute.
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.LocalName">
            <summary>
            The local name of the current node, if currently positioned on a node or attribute.
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.NamespaceURI">
            <summary>
            The namespace of the current node, if currently positioned on a node or attribute.
            </summary>
            <remarks>
            If not positioned on a node or attribute, <see cref="F:Sgml.SgmlReader.UNDEFINED_NAMESPACE"/> is returned.
            </remarks>
        </member>
        <member name="P:Sgml.SgmlReader.Prefix">
            <summary>
            The prefix of the current node's name.
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.HasValue">
            <summary>
            Whether the current node has a value or not.
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.Value">
            <summary>
            The value of the current node.
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.Depth">
            <summary>
            Gets the depth of the current node in the XML document.
            </summary>
            <value>The depth of the current node in the XML document.</value>
        </member>
        <member name="P:Sgml.SgmlReader.BaseURI">
            <summary>
            Gets the base URI of the current node.
            </summary>
            <value>The base URI of the current node.</value>
        </member>
        <member name="P:Sgml.SgmlReader.IsEmptyElement">
            <summary>
            Gets a value indicating whether the current node is an empty element (for example, &lt;MyElement/&gt;).
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.IsDefault">
            <summary>
            Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.
            </summary>
            <value>
            true if the current node is an attribute whose value was generated from the default value defined in the DTD or
            schema; false if the attribute value was explicitly set.
            </value>
        </member>
        <member name="P:Sgml.SgmlReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of an attribute node.
            </summary>
            <value>The quotation mark character (" or ') used to enclose the value of an attribute node.</value>
            <remarks>
            This property applies only to an attribute node.
            </remarks>
        </member>
        <member name="P:Sgml.SgmlReader.XmlSpace">
            <summary>
            Gets the current xml:space scope.
            </summary>
            <value>One of the <see cref="P:Sgml.SgmlReader.XmlSpace"/> values. If no xml:space scope exists, this property defaults to XmlSpace.None.</value>
        </member>
        <member name="P:Sgml.SgmlReader.XmlLang">
            <summary>
            Gets the current xml:lang scope.
            </summary>
            <value>The current xml:lang scope.</value>
        </member>
        <member name="P:Sgml.SgmlReader.WhitespaceHandling">
            <summary>
            Specifies how white space is handled.
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.AttributeCount">
            <summary>
            Gets the number of attributes on the current node.
            </summary>
            <value>The number of attributes on the current node.</value>
        </member>
        <member name="P:Sgml.SgmlReader.Item(System.Int32)">
            <summary>
            Gets the value of the attribute with the specified index.
            </summary>
            <param name="i">The index of the attribute.</param>
            <returns>The value of the specified attribute. This method does not move the reader.</returns>
        </member>
        <member name="P:Sgml.SgmlReader.Item(System.String)">
            <summary>
            Gets the value of an attribute with the specified <see cref="P:Sgml.SgmlReader.Name"/>.
            </summary>
            <param name="name">The name of the attribute to retrieve.</param>
            <returns>The value of the specified attribute. If the attribute is not found, a null reference (Nothing in Visual Basic) is returned. </returns>
        </member>
        <member name="P:Sgml.SgmlReader.Item(System.String,System.String)">
            <summary>
            Gets the value of the attribute with the specified <see cref="P:Sgml.SgmlReader.LocalName"/> and <see cref="P:Sgml.SgmlReader.NamespaceURI"/>.
            </summary>
            <param name="name">The local name of the attribute.</param>
            <param name="namespaceURI">The namespace URI of the attribute.</param>
            <returns>The value of the specified attribute. If the attribute is not found, a null reference (Nothing in Visual Basic) is returned. This method does not move the reader.</returns>
        </member>
        <member name="P:Sgml.SgmlReader.IsHtml">
            <summary>
            Gets whether the content is HTML or not.
            </summary>
        </member>
        <member name="P:Sgml.SgmlReader.EOF">
            <summary>
            Gets a value indicating whether the reader is positioned at the end of the stream.
            </summary>
            <value>true if the reader is positioned at the end of the stream; otherwise, false.</value>
        </member>
        <member name="P:Sgml.SgmlReader.ReadState">
            <summary>
            Gets the state of the reader.
            </summary>
            <value>One of the ReadState values.</value>
        </member>
        <member name="P:Sgml.SgmlReader.NameTable">
            <summary>
            Gets the XmlNameTable associated with this implementation.
            </summary>
            <value>The XmlNameTable enabling you to get the atomized version of a string within the node.</value>
        </member>
        <member name="M:MushDLR223.ScriptEngines.ScriptManager.LoadScriptInterpreter0(System.String,System.Object,MushDLR223.ScriptEngines.ScriptInterpreter)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MushDLR223.ScriptEngines.ScriptManager.EvalFromReader(System.String,System.IO.TextReader,System.Boolean,MushDLR223.ScriptEngines.ICollectionProvider,System.Object,MushDLR223.ScriptEngines.ScriptInterpreter)">
            <summary>
            </summary>
            <param name="lang"></param>
            <param name="source"></param>
            <param name="extendEnv"></param>
            <param name="scopeOrCurrentResolver"></param>
            <param name="reusableIdentityOrSelf"></param>
            <param name="parentCtx"></param>
            <returns></returns>
        </member>
        <member name="M:MushDLR223.ScriptEngines.ScriptManager.AddGroupProvider(MushDLR223.ScriptEngines.ICollectionRequester,MushDLR223.ScriptEngines.ICollectionProvider)">
            <summary>
            Returns an enumeration of Settings that Others have Overridden
            </summary>
            <param name="requester"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:MushDLR223.ScriptEngines.BackDict.Add(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
                            </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
                            </exception>
        </member>
        <member name="M:MushDLR223.ScriptEngines.BackDict.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
                            </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
                            </exception>
        </member>
        <member name="M:MushDLR223.ScriptEngines.BackDict.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. 
                            </exception>
        </member>
        <member name="M:MushDLR223.ScriptEngines.BackDict.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
                            </param>
        </member>
        <member name="M:MushDLR223.ScriptEngines.BackDict.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
                            </param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.
                            </param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.
                            </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.
                            </exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.
                                -or-
                            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
                                -or-
                                The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
                                -or-
                                Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
                            </exception>
        </member>
        <member name="M:MushDLR223.ScriptEngines.BackDict.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
                            </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
                            </exception>
        </member>
        <member name="M:MushDLR223.ScriptEngines.BackDict.Contains(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
                            </param>
        </member>
        <member name="M:MushDLR223.ScriptEngines.BackDict.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
                            </param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
                            </exception>
        </member>
        <member name="M:MushDLR223.ScriptEngines.BackDict.Add(System.String,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.
                            </param><param name="value">The object to use as the value of the element to add.
                            </param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
                            </exception><exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
                            </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
                            </exception>
        </member>
        <member name="M:MushDLR223.ScriptEngines.BackDict.Remove(System.String)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <param name="key">The key of the element to remove.
                            </param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
                            </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
                            </exception>
        </member>
        <member name="M:MushDLR223.ScriptEngines.BackDict.Add(System.String,System.String)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.
                            </param><param name="value">The object to use as the value of the element to add.
                            </param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
                            </exception><exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
                            </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
                            </exception>
        </member>
        <member name="M:MushDLR223.ScriptEngines.BackDict.TryGetValue(System.String,System.Object@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <param name="key">The key whose value to get.
                            </param><param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.
                            </param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
                            </exception>
        </member>
        <member name="M:MushDLR223.ScriptEngines.BackDict.TryGetValue(System.String,System.String@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <param name="key">The key whose value to get.
                            </param><param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.
                            </param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
                            </exception>
        </member>
        <member name="M:MushDLR223.ScriptEngines.BackDict.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:MushDLR223.ScriptEngines.BackDict.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:MushDLR223.ScriptEngines.BackDict.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:MushDLR223.ScriptEngines.BackDict.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:MushDLR223.ScriptEngines.BackDict.System#Collections#Generic#IDictionary{System#String@System#Object}#Item(System.String)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>
            The element with the specified key.
            </returns>
            <param name="key">The key of the element to get or set.
                            </param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
                            </exception><exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key"/> is not found.
                            </exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
                            </exception>
        </member>
        <member name="P:MushDLR223.ScriptEngines.BackDict.Item(System.String)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>
            The element with the specified key.
            </returns>
            <param name="key">The key of the element to get or set.
                            </param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
                            </exception><exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key"/> is not found.
                            </exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
                            </exception>
        </member>
        <member name="P:MushDLR223.ScriptEngines.BackDict.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:MushDLR223.ScriptEngines.BackDict.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="M:MushDLR223.ScriptEngines.KVBacked.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:MushDLR223.ScriptEngines.SysVarsDictEnumr.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:MushDLR223.ScriptEngines.SysVarsDictEnumr.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. 
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:MushDLR223.ScriptEngines.SysVarsDictEnumr.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. 
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:MushDLR223.ScriptEngines.SysVarsDictEnumr.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="P:MushDLR223.ScriptEngines.SysVarsDictEnumr.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:MushDLR223.Utilities.XmlDocumentLineInfo.ReadNode(System.Xml.XmlReader)">
            <summary>
            Creates an <see cref="T:System.Xml.XmlNode"/> object based on the information in the <see cref="T:System.Xml.XmlReader"/>. The reader must be positioned on a node or attribute.
            </summary>
            <returns>
            The new XmlNode or null if no more nodes exist.
            </returns>
            <param name="reader">The XML source 
                            </param><exception cref="T:System.NullReferenceException">The reader is positioned on a node type that does not translate to a valid DOM node (for example, EndElement or EndEntity). 
                            </exception>
        </member>
        <member name="M:MushDLR223.Utilities.TextFilter.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:MushDLR223.Utilities.TextFilter.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:MushDLR223.Utilities.TextFilter.Add(System.String)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
                            </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
                            </exception>
        </member>
        <member name="M:MushDLR223.Utilities.TextFilter.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. 
                            </exception>
        </member>
        <member name="M:MushDLR223.Utilities.TextFilter.Contains(System.String)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
                            </param>
        </member>
        <member name="M:MushDLR223.Utilities.TextFilter.CopyTo(System.String[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
                            </param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.
                            </param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.
                            </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.
                            </exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.
                                -or-
                            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
                                -or-
                                The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
                                -or-
                                Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
                            </exception>
        </member>
        <member name="M:MushDLR223.Utilities.TextFilter.Remove(System.String)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
                            </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
                            </exception>
        </member>
        <member name="P:MushDLR223.Utilities.TextFilter.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:MushDLR223.Utilities.TextFilter.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="T:ThreadPoolUtil.ThreadRunInfo">
            <summary>
            A ThreadRunInfo contains info relating to each queued WorkItem. 
            </summary>
            <remarks>Has to be a class to allow null to be used in references.</remarks>
        </member>
        <member name="T:ThreadPoolUtil.CancellableThreadPool">
            <summary>
            A collection of Threads that can be cancelled
            </summary>
        </member>
        <member name="T:ThreadPoolUtil.ThreadStartEvaluator">
            <summary>
            Summary description for ThreadStartEvaluator.
            </summary>
        </member>
        <member name="F:ThreadPoolUtil.ThreadStartEvaluator.CurrentlyQueuedWorkItems">
            <summary>
            This is the number of WorkItems that are currently waiting to be processed. Changing this value has no effect.
            </summary>
        </member>
        <member name="F:ThreadPoolUtil.ThreadStartEvaluator.CurrentlyRunningThreadCount">
            <summary>
            This is the time number of currently running Threads. Changing this value has no effect.
            </summary>
        </member>
        <member name="M:ThreadPoolUtil.ThreadStartEvaluator.EvaluateThreadStartStop(ThreadPoolUtil.EvaluationReason)">
            <summary>
            Override this method to determine whether you wish to start a new SThread, stop the current SThread, or just leave
            the current number as is. Refer to the <see cref="T:ThreadPoolUtil.EvaluationReason"/> parameter and the 
            <see cref="F:ThreadPoolUtil.ThreadStartEvaluator.CurrentlyRunningThreadCount"/> and <see cref="F:ThreadPoolUtil.ThreadStartEvaluator.CurrentlyQueuedWorkItems"/> properties to 
            work out what you wish to do.
            </summary>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="T:ThreadPoolUtil.EvaluationReason">
            <summary>
            The reason that the <see cref="!:EvaluateThreads"/> method was called.
            </summary>
        </member>
        <member name="F:ThreadPoolUtil.EvaluationReason.NewWorkItemQueued">
            <summary>
            A new WorkItem has been added to the ThreadPool
            </summary>
        </member>
        <member name="F:ThreadPoolUtil.EvaluationReason.WorkItemCompleted">
            <summary>
            A WorkItem has been completed by the SThread pool
            </summary>
        </member>
        <member name="F:ThreadPoolUtil.EvaluationReason.QueueRestart">
            <summary>
            The ThreadPool has been Started after being Stopped
            </summary>
        </member>
        <member name="T:ThreadPoolUtil.EvaluationResult">
            <summary>
            This is the result that should be returned from the <see cref="!:EvaluateThreads"/> method.
            </summary>
        </member>
        <member name="F:ThreadPoolUtil.EvaluationResult.StartNewThread">
            <summary>
            Indicates that a new SThread should be added to the SThread pool
            </summary>
        </member>
        <member name="F:ThreadPoolUtil.EvaluationResult.NoOperation">
            <summary>
            Indicates that the current numbers of Threads running is sufficient.
            </summary>
        </member>
        <member name="F:ThreadPoolUtil.EvaluationResult.FinishCurrentThreadWhenWorkItemCompleted">
            <summary>
            Indicates that too many Threads are running so we can drop the current one IF AND ONLY IF we are in 
            <see cref="T:ThreadPoolUtil.EvaluationReason"/> of <see cref="F:ThreadPoolUtil.EvaluationReason.WorkItemCompleted"/>
            </summary>
        </member>
        <member name="T:ThreadPoolUtil.ThreadStartEvaluatorByQueueSize">
            <summary>
            Summary description for ThreadStartEvaluatorByQueueSize.
            </summary>
        </member>
        <member name="P:MushDLR223.Utilities.OutputDelegateWriter.Encoding">
            <summary>
            When overridden in a derived class, returns the <see cref="T:System.Text.Encoding"/> in which the output is written.
            </summary>
            <returns>
            The Encoding in which the output is written.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:MushDLR223.Utilities.ListAsSet`1.Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <returns>
            The position into which the new element was inserted.
            </returns>
            <param name="value">The <see cref="T:System.Object"/> to add to the <see cref="T:System.Collections.IList"/>. 
                            </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.
                                -or- 
                                The <see cref="T:System.Collections.IList"/> has a fixed size. 
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:MushDLR223.Utilities.ListAsSet`1.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.
            </summary>
            <returns>
            true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.
            </returns>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>. 
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:MushDLR223.Utilities.ListAsSet`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only. 
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:MushDLR223.Utilities.ListAsSet`1.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <returns>
            The index of <paramref name="value"/> if found in the list; otherwise, -1.
            </returns>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>. 
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:MushDLR223.Utilities.ListAsSet`1.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted. 
                            </param><param name="value">The <see cref="T:System.Object"/> to insert into the <see cref="T:System.Collections.IList"/>. 
                            </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. 
                            </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.
                                -or- 
                                The <see cref="T:System.Collections.IList"/> has a fixed size. 
                            </exception><exception cref="T:System.NullReferenceException"><paramref name="value"/> is null reference in the <see cref="T:System.Collections.IList"/>.
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:MushDLR223.Utilities.ListAsSet`1.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to remove from the <see cref="T:System.Collections.IList"/>. 
                            </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.
                                -or- 
                                The <see cref="T:System.Collections.IList"/> has a fixed size. 
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:MushDLR223.Utilities.ListAsSet`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.IList"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove. 
                            </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. 
                            </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"/> is read-only.
                                -or- 
                                The <see cref="T:System.Collections.IList"/> has a fixed size. 
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:MushDLR223.Utilities.ListAsSet`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing. 
                            </param><param name="index">The zero-based index in <paramref name="array"/> at which copying begins. 
                            </param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null. 
                            </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero. 
                            </exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.
                                -or- 
                            <paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.
                                -or- 
                                The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>. 
                            </exception><exception cref="T:System.ArgumentException">The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>. 
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:MushDLR223.Utilities.ListAsSet`1.System#Collections#Generic#IList{T}#IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.
                            </param>
        </member>
        <member name="M:MushDLR223.Utilities.ListAsSet`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.
                            </param><param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.
                            </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
                            </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
                            </exception>
        </member>
        <member name="M:MushDLR223.Utilities.ListAsSet`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
                            </param>
        </member>
        <member name="M:MushDLR223.Utilities.ListAsSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
                            </param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.
                            </param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.
                            </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.
                            </exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.
                                -or-
                            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
                                -or-
                                The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
                                -or-
                                Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
                            </exception>
        </member>
        <member name="P:MushDLR223.Utilities.ListAsSet`1.System#Collections#Generic#IList{T}#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set. 
                            </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>. 
                            </exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IList"/> is read-only. 
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:MushDLR223.Utilities.ListAsSet`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.IList"/> is read-only; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:MushDLR223.Utilities.ListAsSet`1.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.IList"/> has a fixed size; otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:MushDLR223.Utilities.ListAsSet`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:MushDLR223.Utilities.ListAsSet`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <returns>
            true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:MushDLR223.Utilities.ListAsSet`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <returns>
            The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set.
                            </param><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
                            </exception><exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
                            </exception>
        </member>
        <member name="P:MushDLR223.Utilities.ListAsSet`1.System#Collections#Generic#ICollection{T}#Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:MushDLR223.Utilities.ListAsSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="T:MushDLR223.Utilities.Dictionary_usingWeakKey`2">
            <summary>
            THIS DICTIONARY WILL NOT "HANG ON" TO THE KEYS IT USES
            IF THE KEY IS GARBAGE COLLECTED, THE VALUE WILL BE RELEASED TOO
            </summary>
        </member>
        <member name="M:MushDLR223.Utilities.InitOnceExtensions.ToFirstUse``1(System.Func{``0})">
            <summary>
            Makes an Initializer to be called only on first use
            </summary>
            <typeparam name="T"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:MushDLR223.Utilities.InitOnceExtensions.ToFirstUse``1(System.Nullable{``0})">
            <summary>
            Makes an Initializer to be called only on first use
            </summary>
            <typeparam name="T"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:MushDLR223.Utilities.InitOnceExtensions.ToFirstUse``1(MushDLR223.Utilities.Boxed{``0})">
            <summary>
            Makes an Initializer to be called only on first use
            </summary>
            <typeparam name="T"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:MushDLR223.Utilities.InitOnceExtensions.ToFirstUse``1(MushDLR223.Utilities.FirstUse{``0})">
            <summary>
            Makes an Initializer to be called only on first use
            </summary>
            <typeparam name="T"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:MushDLR223.Utilities.InitOnceExtensions.ToFirstUse``1(System.Object)">
            <summary>
            Makes an Initializer to be called only on first use
            </summary>
            <typeparam name="T"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:MushDLR223.Utilities.InitOnceExtensions.ToFirstUse``1(System.Delegate)">
            <summary>
            Makes an Initializer to be called only on first use
            </summary>
            <typeparam name="T"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:MushDLR223.Utilities.InitOnceExtensions.ToFirstUse``1(MushDLR223.Utilities.AnyFunc)">
            <summary>
            Makes an Initializer to be called only on first use
            </summary>
            <typeparam name="T"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:MushDLR223.Utilities.InitOnceExtensions.ToFirstUse``1(MushDLR223.Utilities.AnyFunc{``0})">
            <summary>
            Makes an Initializer to be called only on first use
            </summary>
            <typeparam name="T"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:MushDLR223.ScriptEngines.CommonScriptInterpreter.LoadFile(System.String,MushDLR223.ScriptEngines.OutputDelegate)">
            <summary>
            
            
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:MushDLR223.ScriptEngines.CommonScriptInterpreter.Read(System.String,System.IO.TextReader,MushDLR223.ScriptEngines.OutputDelegate)">
            <summary>
            
            </summary>
            <param name="context_name"></param>
            <param name="stringCodeReader"></param>
            <returns></returns>
        </member>
        <member name="M:MushDLR223.ScriptEngines.CommonScriptInterpreter.Eof(System.Object)">
            <summary>
            
            </summary>
            <param name="codeTree"></param>
            <returns></returns>
        </member>
        <member name="M:EvaluatorNS.JavaScriptInterpreter.LoadFile(System.String,MushDLR223.ScriptEngines.OutputDelegate)">
            <summary>
            
            
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:EvaluatorNS.JavaScriptInterpreter.Read(System.String,System.IO.TextReader,MushDLR223.ScriptEngines.OutputDelegate)">
            <summary>
            
            </summary>
            <param name="context_name"></param>
            <param name="stringCodeReader"></param>
            <returns></returns>
        </member>
        <member name="M:EvaluatorNS.JavaScriptInterpreter.Eof(System.Object)">
            <summary>
            
            </summary>
            <param name="codeTree"></param>
            <returns></returns>
        </member>
        <member name="M:EvaluatorNS.JavaScriptInterpreter.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="F:EvaluatorNS.Evaluator.HostFactory">
            <summary>
            Create a new host factory
            </summary>
        </member>
        <member name="M:EvaluatorNS.Evaluator.OnAssemblyReferencesNeeded(System.Object,EvaluatorNS.VsaScriptingHostEventArgs)">
            <summary>
            Occurs when assembly references are needed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EvaluatorNS.Evaluator.OnCompilerException(System.Object,EvaluatorNS.VsaScriptingHostCompilerExceptionEventArgs)">
            <summary>
            Occurs when an error occurs during compilation or execution
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EvaluatorNS.Evaluator.OnGlobalItemsNeeded(System.Object,EvaluatorNS.VsaScriptingHostEventArgs)">
            <summary>
            Occurs when global items are needed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:EvaluatorNS.VsaScriptingHostFactory">
            <summary>
            A factory class used to create instances of the VsaScriptingHost class based upon a file or folder
            </summary>
        </member>
        <member name="M:EvaluatorNS.VsaScriptingHostFactory.Create(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Creates an array of VsaScriptingHost instances from a file or directory containing script files
            </summary>
            <param name="rootHostName"></param>
            <param name="rootNamespace"></param>
            <param name="generateDebugInfo"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:EvaluatorNS.VsaScriptingHostFactory.FromFileInfo(System.IO.FileInfo,System.String,System.String,System.Boolean)">
            <summary>
            Creates a VsaScriptingHost from a FileInfo object
            </summary>
            <param name="info"></param>
            <param name="rootHostName"></param>
            <param name="rootNamespace"></param>
            <param name="generateDebugInfo"></param>
            <returns></returns>
        </member>
        <member name="M:EvaluatorNS.VsaScriptingHostFactory.SelectLanguageBasedOnExtension(System.IO.FileInfo,EvaluatorNS.VsaScriptingLanguages@)">
            <summary>
            Selects the appropriate language based upon the file extension
            </summary>
            <param name="info"></param>
            <param name="language"></param>
            <returns></returns>
        </member>
        <member name="T:EvaluatorNS.VsaScriptingHost">
            <summary>
            Provides a means to execute script code using the IVsaSite and IVsaEngine interfaces
            </summary>
        </member>
        <member name="F:EvaluatorNS.VsaScriptingHost.DefaultAssemblyReferences">
            <summary>
            Returns a string array containing the names of the assemblies added as references to the engine by default.
            </summary>
        </member>
        <member name="M:EvaluatorNS.VsaScriptingHost.#ctor(EvaluatorNS.VsaScriptingLanguages,System.String,System.String,System.String,System.Boolean)">
            <summary>a
            Initializes a new instance of the VsaScriptingHost class
            </summary>
            <param name="language">The language used by this scripting host</param>
            <param name="name">The name of the engine used by the scripting host</param>
            <param name="rootMoniker">The root moniker of the engine used by the scripting host</param>
            <param name="rootNamespace">The root namespace of the engine used by the scripting host</param>
            <param name="generateDebugInfo">A flag that indicates whether the engine should generate debugging information</param>
        </member>
        <member name="M:EvaluatorNS.VsaScriptingHost.Execute(System.String)">
            <summary>
            Complies and runs the specified script code
            </summary>
            <param name="script">The script code to execute</param>
        </member>
        <member name="M:EvaluatorNS.VsaScriptingHost.CreateLanguageSpecificEngine(EvaluatorNS.VsaScriptingLanguages)">
            <summary>
            Creates a new language specific engine based upon the language specified
            </summary>
            <param name="language">The language that the engine should support</param>
            <returns></returns>
        </member>
        <member name="M:EvaluatorNS.VsaScriptingHost.ContainsEngineItem(System.String)">
            <summary>
            Determines if the specified item exists in the engine's item list
            </summary>
            <param name="itemName"></param>
            <returns></returns>
        </member>
        <member name="M:EvaluatorNS.VsaScriptingHost.LookupEngineItem(System.String)">
            <summary>
            Returns the item from the engine's item list if it exists
            </summary>
            <param name="itemName"></param>
            <returns></returns>
        </member>
        <member name="M:EvaluatorNS.VsaScriptingHost.AssertEngineItemUnique(System.String)">
            <summary>
            Asserts the the item is unique in the engine's item list. Throws an VsaItemAlreadyExistsException containing the existing item if one already exists with the specified name.
            </summary>
            <param name="itemName"></param>
        </member>
        <member name="M:EvaluatorNS.VsaScriptingHost.CreateReferenceItem(System.String,System.String)">
            <summary>
            Creates an IVsaReferenceItem item using the current IVsaEngine
            </summary>
            <param name="itemName"></param>
            <returns></returns>
        </member>
        <member name="M:EvaluatorNS.VsaScriptingHost.CreateGlobalItem(System.String,System.Object,System.Boolean)">
            <summary>
            Creates an IVsaGlobalItem item using the current IVsaEngine and adds the object to the VsaScriptingHost's global item lookup table 
            </summary>
            <param name="itemName"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:EvaluatorNS.VsaScriptingHost.CreateCodeItem(System.String)">
            <summary>
            Creates an IVsaCodeItem using the current IVsaEngine
            </summary>
            <param name="itemName"></param>
            <returns></returns>
        </member>
        <member name="M:EvaluatorNS.VsaScriptingHost.CreateAssemblyReferences(System.String[])">
            <summary>
            Creates a IVsaReferenceItem from the specified Assembly names using the current IVsaEngine
            </summary>
            <param name="assemblyNames"></param>
            <returns></returns>
        </member>
        <member name="M:EvaluatorNS.VsaScriptingHost.OnAssemblyReferencesNeeded(System.Object,EvaluatorNS.VsaScriptingHostEventArgs)">
            <summary>
            Adds our default assembly references and raises the AssemblyReferencesNeeded event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EvaluatorNS.VsaScriptingHost.OnGlobalItemsNeeded(System.Object,EvaluatorNS.VsaScriptingHostEventArgs)">
            <summary>
            Adds this instance of the VsaScriptingHost class as a global item named "VsaScriptingHost" and raises the GlobalItemsNeeded
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EvaluatorNS.VsaScriptingHost.OnCompilerException(System.Object,EvaluatorNS.VsaScriptingHostCompilerExceptionEventArgs)">
            <summary>
            Raises the CompilerException event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EvaluatorNS.VsaScriptingHost.GetGlobalInstance(System.String)">
            <summary>
            When the engine calls back the IVsaSite to ask for a global item, return the instance if we've cached it previously
            </summary>
            <param name="name">The name of the global item to which an object instance is requested</param>
            <returns></returns>
        </member>
        <member name="M:EvaluatorNS.VsaScriptingHost.ReadScriptFile(System.String)">
            <summary>
            A utility function to read the contents of a file as text (Preferrably used upon a script file)
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="E:EvaluatorNS.VsaScriptingHost.AssemblyReferencesNeeded">
            <summary>
            Occurs when the VsaScriptingHost needs Assembly references to be added
            </summary>
        </member>
        <member name="E:EvaluatorNS.VsaScriptingHost.GlobalItemsNeeded">
            <summary>
            Occurs when the VsaScriptingHost needs Global Items to be added
            </summary>
        </member>
        <member name="E:EvaluatorNS.VsaScriptingHost.CompilerException">
            <summary>
            Occurs when the engine encounters an IVsaError during compilation
            </summary>
        </member>
        <member name="P:EvaluatorNS.VsaScriptingHost.FileInfo">
            <summary>
            Gets or sets the file that will be run as a script when the host is executed
            </summary>
        </member>
        <member name="P:EvaluatorNS.VsaScriptingHost.VsaEngine">
            <summary>
            Returns the IVsaEngine interface used by this VsaScriptingHost instance
            </summary>
        </member>
        <member name="P:EvaluatorNS.VsaScriptingHost.VsaSite">
            <summary>
            Returns the IVsaSite interface used by this VsaScriptingHost instance
            </summary>
        </member>
        <member name="T:EvaluatorNS.VsaScriptingHostEventArgs">
            <summary>
            Summary description for VsaScriptingHostEventArgs.
            </summary>
        </member>
        <member name="M:EvaluatorNS.VsaScriptingHostEventArgs.#ctor(EvaluatorNS.VsaScriptingHost)">
            <summary>
            Initializes a new instance of the VsaScriptingHostEventArgs class
            </summary>
            <param name="host"></param>
        </member>
        <member name="P:EvaluatorNS.VsaScriptingHostEventArgs.Host">
            <summary>
            Returns the VsaScriptingHost instance centering around this event
            </summary>
        </member>
        <member name="T:EvaluatorNS.VsaScriptingLanguages">
            <summary>
            The various scripting languages supported by the VsaScriptingHost class
            </summary>
        </member>
        <member name="F:EvaluatorNS.VsaScriptingLanguages.VBScript">
            <summary>
            Specifies that the language of the script to be executed by the VsaScriptingHost class is VBScript
            </summary>
        </member>
        <member name="F:EvaluatorNS.VsaScriptingLanguages.JScript">
            <summary>
            JScript is currently not supported by the current version of the VsaScriptingHost class (NOTE: Use VBScript instead.)
            </summary>
        </member>
        <member name="T:EvaluatorNS.VsaScriptingLanguageNotSupportedException">
            <summary>
            Summary description for VsaScriptingLanguageNotSupportedException.
            </summary>
        </member>
        <member name="M:EvaluatorNS.VsaScriptingLanguageNotSupportedException.#ctor(EvaluatorNS.VsaScriptingLanguages)">
            <summary>
            Initializes a new instance of the VsaScriptingLanguageNotSupportedException class
            </summary>
            <param name="language"></param>
        </member>
        <member name="T:EvaluatorNS.VsaItemAlreadyExistsException">
            <summary>
            Summary description for VsaItemAlreadyExistsException.
            </summary>
        </member>
        <member name="T:EvaluatorNS.VsaScriptingHostCompilerExceptionEventArgs">
            <summary>
            Summary description for VsaScriptingHostCompilerExceptionEventArgs.
            </summary>
        </member>
        <member name="T:EvaluatorNS.FullTrustEvaluationStrategy">
            <summary>
            Compiles the given expression into a JScript function at time of 
            construction and then simply invokes it during evaluation, using
            the context as a parameter.
            </summary>
        </member>
        <member name="T:EvaluatorNS.PartialTrustEvaluationStrategy">
            <summary>
            Uses the JScript eval function to compile and evaluate the
            expression against the context on each evaluation.
            </summary>
        </member>
        <member name="M:MushDLR223.ScriptEngines.LispInterpreter.ReadFromString(System.String)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MushDLR223.ScriptEngines.DotLispInterpreterBase.LoadFile(System.String,MushDLR223.ScriptEngines.OutputDelegate)">
            <summary>
            
            
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:MushDLR223.ScriptEngines.DotLispInterpreterBase.Read(System.String,System.IO.TextReader,MushDLR223.ScriptEngines.OutputDelegate)">
            <summary>
            
            </summary>
            <param name="context_name"></param>
            <param name="stringCodeReader"></param>
            <returns></returns>
        </member>
        <member name="M:MushDLR223.ScriptEngines.DotLispInterpreterBase.Eof(System.Object)">
            <summary>
            
            </summary>
            <param name="codeTree"></param>
            <returns></returns>
        </member>
        <member name="M:MushDLR223.ScriptEngines.DotLispInterpreterBase.Intern(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="varname"></param>
            <param name="textForm"></param>
        </member>
        <member name="M:MushDLR223.ScriptEngines.DotLispInterpreterBase.Eval(System.Object)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:MushDLR223.ScriptEngines.DotLispInterpreterBase.Str(System.Object)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:MushDLR223.ScriptEngines.DotLispInterpreterBase.MakeInterp(System.Object)">
            <summary>
            
            </summary>
            <returns></returns>
            
        </member>
        <member name="M:MushDLR223.ScriptEngines.ClojureInterpreter.LoadFile(System.String,MushDLR223.ScriptEngines.OutputDelegate)">
            <summary>
            
            
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:MushDLR223.ScriptEngines.ClojureInterpreter.Read(System.String,System.IO.TextReader,MushDLR223.ScriptEngines.OutputDelegate)">
            <summary>
            
            </summary>
            <param name="context_name"></param>
            <param name="stringCodeReader"></param>
            <returns></returns>
        </member>
        <member name="M:MushDLR223.ScriptEngines.ClojureInterpreter.Eof(System.Object)">
            <summary>
            
            </summary>
            <param name="codeTree"></param>
            <returns></returns>
        </member>
        <member name="M:MushDLR223.ScriptEngines.ClojureInterpreter.Intern(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="varname"></param>
            <param name="textForm"></param>
        </member>
        <member name="M:MushDLR223.ScriptEngines.ClojureInterpreter.Eval(System.Object)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:MushDLR223.ScriptEngines.ClojureInterpreter.Str(System.Object)">
            <summary>
            
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:MushDLR223.ScriptEngines.ClojureInterpreter.MakeInterp(System.Object)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:MushDLR223.ScriptEngines.KeyParams.Equals(MushDLR223.ScriptEngines.KeyParams)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref key="other"/> parameter; otherwise, false.
            </returns>
            <param key="other">An object to compare with this object.
                            </param>
        </member>
        <member name="M:MushDLR223.ScriptEngines.KeyParams.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param key="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. 
                            </param><exception cref="T:System.NullReferenceException">The <paramref key="obj"/> parameter is null.
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:MushDLR223.ScriptEngines.KeyParams.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:MushDLR223.ScriptEngines.KeyStringComparer.Equals(System.String,System.String)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
            <param name="x">The first object of type <paramref name="T"/> to compare.
                            </param><param name="y">The second object of type <paramref name="T"/> to compare.
                            </param>
        </member>
        <member name="M:MushDLR223.ScriptEngines.KeyStringComparer.GetHashCode(System.String)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <returns>
            A hash code for the specified object.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.
                            </param><exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.
                            </exception>
        </member>
        <member name="T:MushDLR223.Utilities.OpenSimAppender">
            <summary>
            Writes log information out onto the console
            </summary>
        </member>
        <member name="M:MushDLR223.Utilities.ConfigSettingAttribute.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:MushDLR223.Utilities.StaticXMLUtils.FindNode(System.String,System.Xml.XmlNode,System.Xml.XmlNode)">
            <summary>
            Given a name will try to find a node named "name" in the childnodes or return null
            </summary>
            <param name="name">The name of the node</param>
            <param name="node">The node whose children need searching</param>
            <returns>The node (or null)</returns>
        </member>
        <member name="M:MushDLR223.Utilities.StaticXMLUtils.FindNode(System.String,System.Xml.XmlNode,System.Xml.XmlNode,System.Int32)">
            <summary>
            Given a name will try to find a node named "name" in the childnodes or return null
            </summary>
            <param name="name">The name of the node</param>
            <param name="node">The node whose children need searching</param>
            <returns>The node (or null)</returns>
        </member>
        <member name="M:MushDLR223.Utilities.StaticXMLUtils.TryParseBool(System.Collections.Generic.ICollection{System.Xml.XmlNode},System.String,System.Boolean@)">
            <summary>
            Foreach XML Node in he collection search for the value 
            </summary>
            <param name="templateNodes"></param>
            <param name="attribName"></param>
            <param name="tf"></param>
            <returns></returns>
        </member>
        <member name="M:MushDLR223.Utilities.StaticXMLUtils.ParseNode(MushDLR223.Utilities.XmlDocumentLineInfo,System.IO.TextReader,System.String)">
            <summary>
            Helper method that converts passed string into an XML node
            </summary>
            <param name="outerXML">the Unifiable to XMLize</param>
            <returns>The XML node</returns>
        </member>
        <member name="M:MushDLR223.Utilities.StaticXMLUtils.getNode(System.Boolean,System.String,System.Boolean)">
            <summary>
            Helper method that converts passed string into an XML node
            </summary>
            <param name="outerXML">the Unifiable to XMLize</param>
            <returns>The XML node</returns>
        </member>
        <member name="M:MushDLR223.Utilities.StaticXMLUtils.OlderReference(System.String,System.String)">
            <summary>
            Helps keep new strings garbage collectable by using the previous
            version if they are the same string
            </summary>
            <param name="before"></param>
            <param name="after"></param>
            <returns></returns>
        </member>
        <member name="M:MushDLR223.Utilities.LineNumberInfoZeroZero.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
            true if <see cref="P:System.Xml.IXmlLineInfo.LineNumber"/> and <see cref="P:System.Xml.IXmlLineInfo.LinePosition"/> can be provided; otherwise, false.
            </returns>
        </member>
        <member name="M:MushDLR223.ScriptEngines.DotLispInterpreter.MakeInterp(System.Object)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ThreadPoolUtil.Thread">
            <summary>
            Support class used to handle Threads
            </summary>
        </member>
        <member name="T:ThreadPoolUtil.IThreadRunnable">
            <summary>
            This interface should be implemented by any class whose instances are intended 
            to be executed by a NativeThread.
            </summary>
        </member>
        <member name="M:ThreadPoolUtil.IThreadRunnable.Run">
            <summary>
            This method has to be implemented in order that starting of the NativeThread causes the object's 
            run method to be called in that separately executing NativeThread.
            </summary>
        </member>
        <member name="F:ThreadPoolUtil.Thread.threadField">
            <summary>
            The instance of SThread
            </summary>
        </member>
        <member name="M:ThreadPoolUtil.Thread.#ctor">
            <summary>
            Initializes a new instance of the ThreadClass class
            </summary>
        </member>
        <member name="M:ThreadPoolUtil.Thread.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SThread class.
            </summary>
            <param name="Name">The name of the SThread</param>
        </member>
        <member name="M:ThreadPoolUtil.Thread.#ctor(System.Threading.ThreadStart)">
            <summary>
            Initializes a new instance of the Thread class.
            </summary>
            <param name="task">A ThreadStart delegate that references the methods to be invoked when this SThread begins executing</param>
        </member>
        <member name="M:ThreadPoolUtil.Thread.#ctor(System.Threading.ThreadStart,System.String)">
            <summary>
            Initializes a new instance of the SThread class.
            </summary>
            <param name="Start">A ThreadStart delegate that references the methods to be invoked when this SThread begins executing</param>
            <param name="Name">The name of the SThread</param>
        </member>
        <member name="M:ThreadPoolUtil.Thread.Run">
            <summary>
            This method has no functionality unless the method is overridden
            </summary>
        </member>
        <member name="M:ThreadPoolUtil.Thread.Start">
            <summary>
            Causes the operating system to change the state of the current SThread instance to ThreadState.Running
            </summary>
        </member>
        <member name="M:ThreadPoolUtil.Thread.Interrupt">
            <summary>
            Interrupts a SThread that is in the WaitSleepJoin SThread state
            </summary>
        </member>
        <member name="M:ThreadPoolUtil.Thread.Join">
            <summary>
            Blocks the calling SThread until a SThread terminates
            </summary>
        </member>
        <member name="M:ThreadPoolUtil.Thread.Join(System.Int64)">
            <summary>
            Blocks the calling SThread until a SThread terminates or the specified time elapses
            </summary>
            <param name="MiliSeconds">Time of wait in milliseconds</param>
        </member>
        <member name="M:ThreadPoolUtil.Thread.Join(System.Int64,System.Int32)">
            <summary>
            Blocks the calling SThread until a SThread terminates or the specified time elapses
            </summary>
            <param name="MiliSeconds">Time of wait in milliseconds</param>
            <param name="NanoSeconds">Time of wait in nanoseconds</param>
        </member>
        <member name="M:ThreadPoolUtil.Thread.Resume">
            <summary>
            Resumes a SThread that has been suspended
            </summary>
        </member>
        <member name="M:ThreadPoolUtil.Thread.Abort">
            <summary>
            Raises a ThreadAbortException in the SThread on which it is invoked, 
            to begin the process of terminating the SThread. Calling this method 
            usually terminates the SThread
            </summary>
        </member>
        <member name="M:ThreadPoolUtil.Thread.Abort(System.Object)">
            <summary>
            Raises a ThreadAbortException in the SThread on which it is invoked, 
            to begin the process of terminating the SThread while also providing
            exception information about the SThread termination. 
            Calling this method usually terminates the SThread.
            </summary>
            <param name="stateInfo">An object that contains application-specific information, such as state, which can be used by the SThread being aborted</param>
        </member>
        <member name="M:ThreadPoolUtil.Thread.Suspend">
            <summary>
            Suspends the SThread, if the SThread is already suspended it has no effect
            </summary>
        </member>
        <member name="M:ThreadPoolUtil.Thread.ToString">
            <summary>
            Obtain a String that represents the current object
            </summary>
            <returns>A String that represents the current object</returns>
        </member>
        <member name="M:ThreadPoolUtil.Thread.Current">
            <summary>
            Gets the currently running SThread
            </summary>
            <returns>The currently running SThread</returns>
        </member>
        <member name="F:ThreadPoolUtil.Thread.AllThreads">
            <summary>
            ?- cliGet('MushDLR223.Utilities.SafeThread','AllThreads',List),cliGet(List,'Count',C).
            </summary>
        </member>
        <member name="P:ThreadPoolUtil.Thread.Instance">
            <summary>
            Gets the current SThread instance
            </summary>
        </member>
        <member name="P:ThreadPoolUtil.Thread.Name">
            <summary>
            Gets or sets the name of the SThread
            </summary>
        </member>
        <member name="P:ThreadPoolUtil.Thread.Priority">
            <summary>
            Gets or sets a value indicating the scheduling priority of a SThread
            </summary>
        </member>
        <member name="P:ThreadPoolUtil.Thread.IsAlive">
            <summary>
            Gets a value indicating the execution status of the current SThread
            </summary>
        </member>
        <member name="P:ThreadPoolUtil.Thread.IsBackground">
            <summary>
            Gets or sets a value indicating whether or not a SThread is a background SThread.
            </summary>
        </member>
        <member name="M:MushDLR223.Virtualization.AutoClosingStream.Flush">
            <summary>
            When overridden in a derived class, clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. 
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:MushDLR223.Virtualization.AutoClosingStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <returns>
            The new position within the current stream.
            </returns>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter. 
                            </param><param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position. 
                            </param><exception cref="T:System.IO.IOException">An I/O error occurs. 
                            </exception><exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. 
                            </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. 
                            </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:MushDLR223.Virtualization.AutoClosingStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes. 
                            </param><exception cref="T:System.IO.IOException">An I/O error occurs. 
                            </exception><exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. 
                            </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. 
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:MushDLR223.Virtualization.AutoClosingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset"/> and (<paramref name="offset"/> + <paramref name="count"/> - 1) replaced by the bytes read from the current source. 
                            </param><param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin storing the data read from the current stream. 
                            </param><param name="count">The maximum number of bytes to be read from the current stream. 
                            </param><exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is larger than the buffer length. 
                            </exception><exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null. 
                            </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative. 
                            </exception><exception cref="T:System.IO.IOException">An I/O error occurs. 
                            </exception><exception cref="T:System.NotSupportedException">The stream does not support reading. 
                            </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. 
                            </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:MushDLR223.Virtualization.AutoClosingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies <paramref name="count"/> bytes from <paramref name="buffer"/> to the current stream. 
                            </param><param name="offset">The zero-based byte offset in <paramref name="buffer"/> at which to begin copying bytes to the current stream. 
                            </param><param name="count">The number of bytes to be written to the current stream. 
                            </param><exception cref="T:System.ArgumentException">The sum of <paramref name="offset"/> and <paramref name="count"/> is greater than the buffer length. 
                            </exception><exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is null. 
                            </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> or <paramref name="count"/> is negative. 
                            </exception><exception cref="T:System.IO.IOException">An I/O error occurs. 
                            </exception><exception cref="T:System.NotSupportedException">The stream does not support writing. 
                            </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. 
                            </exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:MushDLR223.Virtualization.AutoClosingStream.CanRead">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports reading.
            </summary>
            <returns>
            true if the stream supports reading; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:MushDLR223.Virtualization.AutoClosingStream.CanSeek">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports seeking.
            </summary>
            <returns>
            true if the stream supports seeking; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:MushDLR223.Virtualization.AutoClosingStream.CanWrite">
            <summary>
            When overridden in a derived class, gets a value indicating whether the current stream supports writing.
            </summary>
            <returns>
            true if the stream supports writing; otherwise, false.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:MushDLR223.Virtualization.AutoClosingStream.Length">
            <summary>
            When overridden in a derived class, gets the length in bytes of the stream.
            </summary>
            <returns>
            A long value representing the length of the stream in bytes.
            </returns>
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. 
                            </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. 
                            </exception><filterpriority>1</filterpriority>
        </member>
        <member name="P:MushDLR223.Virtualization.AutoClosingStream.Position">
            <summary>
            When overridden in a derived class, gets or sets the position within the current stream.
            </summary>
            <returns>
            The current position within the stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. 
                            </exception><exception cref="T:System.NotSupportedException">The stream does not support seeking. 
                            </exception><exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. 
                            </exception><filterpriority>1</filterpriority>
        </member>
        <member name="M:MushDLR223.Utilities.AAbortable.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. 
                            </param><exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:MushDLR223.Utilities.AAbortable.Equals(MushDLR223.Utilities.Abortable)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.
                            </param>
        </member>
        <member name="M:MushDLR223.Utilities.AAbortable.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:MushDLR223.Utilities.TaskQueueHandler.Equals(MushDLR223.Utilities.Abortable)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.
                            </param>
        </member>
        <member name="P:MushDLR223.Utilities.TaskQueueHandler.OperationKillTimeout">
            <summary>
            When this is set the KillTasksOverTimeLimit should bne false
            </summary>
        </member>
        <member name="F:MushDLR223.Utilities.Commands.tree">
            <value>
            Commands organized by keyword in a tree
            </value>
        </member>
        <member name="M:MushDLR223.Utilities.Commands.GetHelp(System.String[])">
            <summary>
            Get help for the given help string
            </summary>
            <param name="helpParts">Parsed parts of the help string.  If empty then general help is returned.</param>
            <returns></returns>
        </member>
        <member name="M:MushDLR223.Utilities.Commands.CollectHelp(System.Collections.Generic.List{System.String})">
            <summary>
            See if we can find the requested command in order to display longer help
            </summary>
            <param name="helpParts"></param>
            <returns></returns>
        </member>
        <member name="M:MushDLR223.Utilities.Commands.AddCommand(System.String,System.Boolean,System.String,System.String,System.String,MushDLR223.Utilities.CommandDelegate)">
            <summary>
            Add a command to those which can be invoked from the console.
            </summary>
            <param name="module"></param>
            <param name="command"></param>
            <param name="help"></param>
            <param name="longhelp"></param>
            <param name="fn"></param>
        </member>
        <member name="M:MushDLR223.Utilities.Commands.AddCommand(System.String,System.Boolean,System.String,System.String,System.String,System.String,MushDLR223.Utilities.CommandDelegate)">
            <summary>
            Add a command to those which can be invoked from the console.
            </summary>
            <param name="module"></param>
            <param name="command"></param>
            <param name="help"></param>
            <param name="longhelp"></param>
            <param name="descriptivehelp"></param>
            <param name="fn"></param>
        </member>
        <member name="T:MushDLR223.Utilities.Commands.CommandInfo">
            <summary>
            Encapsulates a command that can be invoked from the console
            </summary>
        </member>
        <member name="F:MushDLR223.Utilities.Commands.CommandInfo.module">
            <value>
            The module from which this command comes
            </value>
        </member>
        <member name="F:MushDLR223.Utilities.Commands.CommandInfo.shared">
            <value>
            Whether the module is shared
            </value>
        </member>
        <member name="F:MushDLR223.Utilities.Commands.CommandInfo.help_text">
            <value>
            Very short BNF description
            </value>
        </member>
        <member name="F:MushDLR223.Utilities.Commands.CommandInfo.long_help">
            <value>
            Longer one line help text
            </value>
        </member>
        <member name="F:MushDLR223.Utilities.Commands.CommandInfo.descriptive_help">
            <value>
            Full descriptive help for this command
            </value>
        </member>
        <member name="F:MushDLR223.Utilities.Commands.CommandInfo.fn">
            <value>
            The method to invoke for this command
            </value>
        </member>
        <!-- Badly formed XML comment ignored for member "F:MushDLR223.Utilities.DLRConsole.gui" -->
        <member name="F:MushDLR223.Utilities.DLRConsole.Colors">
            <summary>
            derive an ansi color from a string, ignoring the darker colors.
            This is used to help automatically bin component tags with colors
            in various print functions.
            </summary>
            <param name="input">arbitrary string for input</param>
            <returns>an ansii color</returns>        
        </member>
        <member name="M:MushDLR223.Utilities.DLRConsole.Warn(System.String,System.Object[])">
            <summary>
            Sends a warning to the current console output
            </summary>
            <param name="format">The message to send</param>
            <param name="args">WriteLine-style message arguments</param>
        </member>
        <member name="M:MushDLR223.Utilities.DLRConsole.Warn(System.String,System.String,System.Object[])">
            <summary>
            Sends a warning to the current console output
            </summary>
            <param name="sender">The module that sent this message</param>
            <param name="format">The message to send</param>
            <param name="args">WriteLine-style message arguments</param>
        </member>
        <member name="M:MushDLR223.Utilities.DLRConsole.Notice(System.String,System.Object[])">
            <summary>
            Sends a notice to the current console output
            </summary>
            <param name="format">The message to send</param>
            <param name="args">WriteLine-style message arguments</param>
        </member>
        <member name="M:MushDLR223.Utilities.DLRConsole.Notice(System.String,System.String,System.Object[])">
            <summary>
            Sends a notice to the current console output
            </summary>
            <param name="sender">The module that sent this message</param>
            <param name="format">The message to send</param>
            <param name="args">WriteLine-style message arguments</param>
        </member>
        <member name="M:MushDLR223.Utilities.DLRConsole.WError(System.String,System.Object[])">
            <summary>
            Sends an error to the current console output
            </summary>
            <param name="format">The message to send</param>
            <param name="args">WriteLine-style message arguments</param>
        </member>
        <member name="M:MushDLR223.Utilities.DLRConsole.WError(System.String,System.String,System.Object[])">
            <summary>
            Sends an error to the current console output
            </summary>
            <param name="sender">The module that sent this message</param>
            <param name="format">The message to send</param>
            <param name="args">WriteLine-style message arguments</param>
        </member>
        <member name="M:MushDLR223.Utilities.DLRConsole.Status(System.String,System.Object[])">
            <summary>
            Sends a status message to the current console output
            </summary>
            <param name="format">The message to send</param>
            <param name="args">WriteLine-style message arguments</param>
        </member>
        <member name="M:MushDLR223.Utilities.DLRConsole.Status(System.String,System.String,System.Object[])">
            <summary>
            Sends a status message to the current console output
            </summary>
            <param name="sender">The module that sent this message</param>
            <param name="format">The message to send</param>
            <param name="args">WriteLine-style message arguments</param>
        </member>
        <member name="P:MushDLR223.Utilities.DLRConsole.DefaultPrompt">
            <summary>
            The default prompt text.
            </summary>
        </member>
        <member name="T:MushDLR223.Utilities.NotAutoLoaded">
            <summary>
            Ensure the reflection API is not used to load this command
            The command is loaded likely byu the plugin 
            </summary>
        </member>
        <member name="M:MushDLR223.ScriptEngines.NamedParam.#ctor(System.String,System.Object)">
            <summary>
            For building simevent info
            </summary>
            <param name="k"></param>
            <param name="v"></param>
        </member>
        <member name="M:MushDLR223.ScriptEngines.NamedParam.#ctor(System.String,System.Type,System.Type)">
            <summary>
            Used for describing commands
            </summary>
            <param name="k"></param>
            <param name="type"></param>
            <param name="v"></param>
        </member>
        <member name="M:MushDLR223.ScriptEngines.NamedParam.#ctor(System.Object,System.Reflection.MemberInfo,System.String,System.Type,System.Object)">
            <summary>
            Used for making InfoMaps
            </summary>
            <param name="target"></param>
            <param name="inf"></param>
            <param name="k"></param>
            <param name="type"></param>
            <param name="v"></param>
        </member>
        <member name="M:MushDLR223.ScriptEngines.NamedParam.#ctor(System.String,System.Type,System.Object,System.Object[])">
            <summary>
            Used for describing commands
            </summary>
            <param name="k"></param>
            <param name="type"></param>
            <param name="v"></param>
            <param name="choices"></param>
        </member>
        <member name="M:MushDLR223.ScriptEngines.NamedParam.#ctor(MushDLR223.ScriptEngines.NamedParam,System.Object)">
            <summary>
            Used for constructing Cyc-like functions
            </summary>
            <param name="param"></param>
            <param name="o"></param>
        </member>
        <member name="M:MushDLR223.ScriptEngines.NamedParam.#ctor(System.Type,System.Type)">
            <summary>
            Used for describing commands 
            </summary>
            <param name="type"></param>
            <param name="DataType"></param>
        </member>
        <member name="T:Sgml.SgmlParseException">
            <summary>
            Thrown if any errors occur while parsing the source.
            </summary>
        </member>
        <member name="M:Sgml.SgmlParseException.#ctor">
            <summary>
            Instantiates a new instance of SgmlParseException with no specific error information.
            </summary>
        </member>
        <member name="M:Sgml.SgmlParseException.#ctor(System.String)">
            <summary>
            Instantiates a new instance of SgmlParseException with an error message describing the problem.
            </summary>
            <param name="message">A message describing the error that occurred</param>
        </member>
        <member name="M:Sgml.SgmlParseException.#ctor(System.String,Sgml.Entity)">
            <summary>
            Instantiates a new instance of SgmlParseException with an error message describing the problem.
            </summary>
            <param name="message">A message describing the error that occurred</param>
            <param name="e">The entity on which the error occurred.</param>
        </member>
        <member name="M:Sgml.SgmlParseException.#ctor(System.String,System.Exception)">
            <summary>
            Instantiates a new instance of SgmlParseException with an error message describing the problem.
            </summary>
            <param name="message">A message describing the error that occurred</param>
            <param name="innerException">The original exception that caused the problem.</param>
        </member>
        <member name="M:Sgml.SgmlParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the SgmlParseException class with serialized data. 
            </summary>
            <param name="streamInfo">The object that holds the serialized object data.</param>
            <param name="streamCtx">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Sgml.SgmlParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo with the data needed to serialize the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="P:Sgml.SgmlParseException.EntityContext">
            <summary>
            Contextual information detailing the entity on which the error occurred.
            </summary>
        </member>
        <member name="T:Sgml.LiteralType">
            <summary>
            The different types of literal text returned by the SgmlParser.
            </summary>
        </member>
        <member name="F:Sgml.LiteralType.CDATA">
            <summary>
            CDATA text literals.
            </summary>
        </member>
        <member name="F:Sgml.LiteralType.SDATA">
            <summary>
            SDATA entities.
            </summary>
        </member>
        <member name="F:Sgml.LiteralType.PI">
            <summary>
            The contents of a Processing Instruction.
            </summary>
        </member>
        <member name="T:Sgml.Entity">
            <summary>
            An Entity declared in a DTD.
            </summary>
        </member>
        <member name="F:Sgml.Entity.EOF">
            <summary>
            The character indicating End Of File.
            </summary>
        </member>
        <member name="M:Sgml.Entity.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initialises a new instance of an Entity declared in a DTD.
            </summary>
            <param name="name">The name of the entity.</param>
            <param name="pubid">The public id of the entity.</param>
            <param name="uri">The uri of the entity.</param>
            <param name="proxy">The proxy server to use when retrieving any web content.</param>
        </member>
        <member name="M:Sgml.Entity.#ctor(System.String,System.String)">
            <summary>
            Initialises a new instance of an Entity declared in a DTD.
            </summary>
            <param name="name">The name of the entity.</param>
            <param name="literal">The literal value of the entity.</param>
        </member>
        <member name="M:Sgml.Entity.#ctor(System.String,System.Uri,System.IO.TextReader,System.String)">
            <summary>
            Initialises a new instance of an Entity declared in a DTD.
            </summary>
            <param name="name">The name of the entity.</param>
            <param name="baseUri">The baseUri for the entity to read from the TextReader.</param>
            <param name="stm">The TextReader to read the entity from.</param>
            <param name="proxy">The proxy server to use when retrieving any web content.</param>
        </member>
        <member name="M:Sgml.Entity.ReadChar">
            <summary>
            Reads the next character from the DTD stream.
            </summary>
            <returns>The next character from the DTD stream.</returns>
        </member>
        <member name="M:Sgml.Entity.Open(Sgml.Entity,System.Uri)">
            <summary>
            Begins processing an entity.
            </summary>
            <param name="parent">The parent of this entity.</param>
            <param name="baseUri">The base Uri for processing this entity within.</param>
        </member>
        <member name="M:Sgml.Entity.Close">
            <summary>
            Closes the reader from which the entity is being read.
            </summary>
        </member>
        <member name="M:Sgml.Entity.SkipWhitespace">
            <summary>
            Returns the next character after any whitespace.
            </summary>
            <returns>The next character that is not whitespace.</returns>
        </member>
        <member name="M:Sgml.Entity.ScanToken(System.Text.StringBuilder,System.String,System.Boolean)">
            <summary>
            Scans a token from the input stream and returns the result.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to use to process the token.</param>
            <param name="term">A set of characters to look for as terminators for the token.</param>
            <param name="nmtoken">true if the token should be a NMToken, otherwise false.</param>
            <returns>The scanned token.</returns>
        </member>
        <member name="M:Sgml.Entity.ScanLiteral(System.Text.StringBuilder,System.Char)">
            <summary>
            Read a literal from the input stream.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to use to build the literal.</param>
            <param name="quote">The delimiter for the literal.</param>
            <returns>The literal scanned from the input stream.</returns>
        </member>
        <member name="M:Sgml.Entity.ScanToEnd(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            Reads input until the end of the input stream or until a string of terminator characters is found.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to use to build the string.</param>
            <param name="type">The type of the element being read (only used in reporting errors).</param>
            <param name="terminators">The string of terminator characters to look for.</param>
            <returns>The string read from the input stream.</returns>
        </member>
        <member name="M:Sgml.Entity.ExpandCharEntity">
            <summary>
            Expands a character entity to be read from the input stream.
            </summary>
            <returns>The string for the character entity.</returns>
        </member>
        <member name="M:Sgml.Entity.Error(System.String)">
            <summary>
            Raise a processing error.
            </summary>
            <param name="msg">The error message to use in the exception.</param>
            <exception cref="T:Sgml.SgmlParseException">Always thrown.</exception>
        </member>
        <member name="M:Sgml.Entity.Error(System.String,System.Char)">
            <summary>
            Raise a processing error.
            </summary>
            <param name="msg">The error message to use in the exception.</param>
            <param name="ch">The unexpected character causing the error.</param>
            <exception cref="T:Sgml.SgmlParseException">Always thrown.</exception>
        </member>
        <member name="M:Sgml.Entity.Error(System.String,System.Int32)">
            <summary>
            Raise a processing error.
            </summary>
            <param name="msg">The error message to use in the exception.</param>
            <param name="x">The value causing the error.</param>
            <exception cref="T:Sgml.SgmlParseException">Always thrown.</exception>
        </member>
        <member name="M:Sgml.Entity.Error(System.String,System.String)">
            <summary>
            Raise a processing error.
            </summary>
            <param name="msg">The error message to use in the exception.</param>
            <param name="arg">The argument for the error.</param>
            <exception cref="T:Sgml.SgmlParseException">Always thrown.</exception>
        </member>
        <member name="M:Sgml.Entity.Context">
            <summary>
            Returns a string giving information on how the entity is referenced and declared, walking up the parents until the top level parent entity is found.
            </summary>
            <returns>Contextual information for the entity.</returns>
        </member>
        <member name="M:Sgml.Entity.IsLiteralType(System.String)">
            <summary>
            Checks whether a token denotes a literal entity or not.
            </summary>
            <param name="token">The token to check.</param>
            <returns>true if the token is "CDATA", "SDATA" or "PI", otherwise false.</returns>
        </member>
        <member name="M:Sgml.Entity.SetLiteralType(System.String)">
            <summary>
            Sets the entity to be a literal of the type specified.
            </summary>
            <param name="token">One of "CDATA", "SDATA" or "PI".</param>
        </member>
        <member name="M:Sgml.Entity.Finalize">
            <summary>
            The finalizer for the Entity class.
            </summary>
        </member>
        <member name="M:Sgml.Entity.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. 
            </summary>
        </member>
        <member name="M:Sgml.Entity.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. 
            </summary>
            <param name="isDisposing">true if this method has been called by user code, false if it has been called through a finalizer.</param>
        </member>
        <member name="P:Sgml.Entity.Name">
            <summary>
            The name of the entity.
            </summary>
        </member>
        <member name="P:Sgml.Entity.IsHtml">
            <summary>
            True if the entity is the html element entity.
            </summary>
        </member>
        <member name="P:Sgml.Entity.PublicId">
            <summary>
            The public identifier of this entity.
            </summary>
        </member>
        <member name="P:Sgml.Entity.Uri">
            <summary>
            The Uri that is the source for this entity.
            </summary>
        </member>
        <member name="P:Sgml.Entity.ResolvedUri">
            <summary>
            The resolved location of the DTD this entity is from.
            </summary>
        </member>
        <member name="P:Sgml.Entity.Parent">
            <summary>
            Gets the parent Entity of this Entity.
            </summary>
        </member>
        <member name="P:Sgml.Entity.Lastchar">
            <summary>
            The last character read from the input stream for this entity.
            </summary>
        </member>
        <member name="P:Sgml.Entity.Line">
            <summary>
            The line on which this entity was defined.
            </summary>
        </member>
        <member name="P:Sgml.Entity.LinePosition">
            <summary>
            The index into the line where this entity is defined.
            </summary>
        </member>
        <member name="P:Sgml.Entity.IsInternal">
            <summary>
            Whether this entity is an internal entity or not.
            </summary>
            <value>true if this entity is internal, otherwise false.</value>
        </member>
        <member name="P:Sgml.Entity.Literal">
            <summary>
            The literal value of this entity.
            </summary>
        </member>
        <member name="P:Sgml.Entity.LiteralType">
            <summary>
            The <see cref="P:Sgml.Entity.LiteralType"/> of this entity.
            </summary>
        </member>
        <member name="P:Sgml.Entity.IsWhitespace">
            <summary>
            Whether the last char read for this entity is a whitespace character.
            </summary>
        </member>
        <member name="P:Sgml.Entity.Proxy">
            <summary>
            The proxy server to use when making web requests to resolve entities.
            </summary>
        </member>
        <member name="P:Sgml.Entity.Encoding">
            <summary>
            Gets the character encoding for this entity.
            </summary>
        </member>
        <member name="T:Sgml.ElementDecl">
            <summary>
            An element declaration in a DTD.
            </summary>
        </member>
        <member name="M:Sgml.ElementDecl.#ctor(System.String,System.Boolean,System.Boolean,Sgml.ContentModel,System.String[],System.String[])">
            <summary>
            Initialises a new element declaration instance.
            </summary>
            <param name="name">The name of the element.</param>
            <param name="sto">Whether the start tag is optional.</param>
            <param name="eto">Whether the end tag is optional.</param>
            <param name="cm">The <see cref="P:Sgml.ElementDecl.ContentModel"/> of the element.</param>
            <param name="inclusions"></param>
            <param name="exclusions"></param>
        </member>
        <member name="M:Sgml.ElementDecl.FindAttribute(System.String)">
            <summary>
            Finds the attribute definition with the specified name.
            </summary>
            <param name="name">The name of the <see cref="T:Sgml.AttDef"/> to find.</param>
            <returns>The <see cref="T:Sgml.AttDef"/> with the specified name.</returns>
            <exception cref="T:System.InvalidOperationException">If the attribute list has not yet been initialised.</exception>
        </member>
        <member name="M:Sgml.ElementDecl.AddAttDefs(System.Collections.Generic.Dictionary{System.String,Sgml.AttDef})">
            <summary>
            Adds attribute definitions to the element declaration.
            </summary>
            <param name="list">The list of attribute definitions to add.</param>
        </member>
        <member name="M:Sgml.ElementDecl.CanContain(System.String,Sgml.SgmlDtd)">
            <summary>
            Tests whether this element can contain another specified element.
            </summary>
            <param name="name">The name of the element to check for.</param>
            <param name="dtd">The DTD to use to do the check.</param>
            <returns>True if the specified element can be contained by this element.</returns>
        </member>
        <member name="P:Sgml.ElementDecl.Name">
            <summary>
            The element name.
            </summary>
        </member>
        <member name="P:Sgml.ElementDecl.ContentModel">
            <summary>
            The <see cref="T:Sgml.ContentModel"/> of the element declaration.
            </summary>
        </member>
        <member name="P:Sgml.ElementDecl.EndTagOptional">
            <summary>
            Whether the end tag of the element is optional.
            </summary>
            <value>true if the end tag of the element is optional, otherwise false.</value>
        </member>
        <member name="P:Sgml.ElementDecl.StartTagOptional">
            <summary>
            Whether the start tag of the element is optional.
            </summary>
            <value>true if the start tag of the element is optional, otherwise false.</value>
        </member>
        <member name="T:Sgml.DeclaredContent">
            <summary>
            Where nested subelements cannot occur within an element, its contents can be declared to consist of one of the types of declared content contained in this enumeration.
            </summary>
        </member>
        <member name="F:Sgml.DeclaredContent.Default">
            <summary>
            Not defined.
            </summary>
        </member>
        <member name="F:Sgml.DeclaredContent.CDATA">
            <summary>
            Character data (CDATA), which contains only valid SGML characters.
            </summary>
        </member>
        <member name="F:Sgml.DeclaredContent.RCDATA">
            <summary>
            Replaceable character data (RCDATA), which can contain text, character references and/or general entity references that resolve to character data.
            </summary>
        </member>
        <member name="F:Sgml.DeclaredContent.EMPTY">
            <summary>
            Empty element (EMPTY), i.e. having no contents, or contents that can be generated by the program.
            </summary>
        </member>
        <member name="T:Sgml.ContentModel">
            <summary>
            Defines the content model for an element.
            </summary>
        </member>
        <member name="M:Sgml.ContentModel.#ctor">
            <summary>
            Initialises a new instance of the <see cref="T:Sgml.ContentModel"/> class.
            </summary>
        </member>
        <member name="M:Sgml.ContentModel.PushGroup">
            <summary>
            Begins processing of a nested model group.
            </summary>
        </member>
        <member name="M:Sgml.ContentModel.PopGroup">
            <summary>
            Finishes processing of a nested model group.
            </summary>
            <returns>The current depth of the group nesting, or -1 if there are no more groups to pop.</returns>
        </member>
        <member name="M:Sgml.ContentModel.AddSymbol(System.String)">
            <summary>
            Adds a new symbol to the current group's members.
            </summary>
            <param name="sym">The symbol to add.</param>
        </member>
        <member name="M:Sgml.ContentModel.AddConnector(System.Char)">
            <summary>
            Adds a connector onto the member list for the current group.
            </summary>
            <param name="c">The connector character to add.</param>
            <exception cref="T:Sgml.SgmlParseException">
            If the content is not mixed and has no members yet, or if the group type has been set and the
            connector does not match the group type.
            </exception>
        </member>
        <member name="M:Sgml.ContentModel.AddOccurrence(System.Char)">
            <summary>
            Adds an occurrence character for the current model group, setting it's <see cref="T:Sgml.Occurrence"/> value.
            </summary>
            <param name="c">The occurrence character.</param>
        </member>
        <member name="M:Sgml.ContentModel.SetDeclaredContent(System.String)">
            <summary>
            Sets the contained content for the content model.
            </summary>
            <param name="dc">The text specified the permissible declared child content.</param>
        </member>
        <member name="M:Sgml.ContentModel.CanContain(System.String,Sgml.SgmlDtd)">
            <summary>
            Checks whether an element using this group can contain a specified element.
            </summary>
            <param name="name">The name of the element to look for.</param>
            <param name="dtd">The DTD to use during the checking.</param>
            <returns>true if an element using this group can contain the element, otherwise false.</returns>
        </member>
        <member name="P:Sgml.ContentModel.CurrentDepth">
            <summary>
            The number of groups on the stack.
            </summary>
        </member>
        <member name="P:Sgml.ContentModel.DeclaredContent">
            <summary>
            The allowed child content, specifying if nested children are not allowed and if so, what content is allowed.
            </summary>
        </member>
        <member name="T:Sgml.GroupType">
            <summary>
            The type of the content model group, defining the order in which child elements can occur.
            </summary>
        </member>
        <member name="F:Sgml.GroupType.None">
            <summary>
            No model group.
            </summary>
        </member>
        <member name="F:Sgml.GroupType.And">
            <summary>
            All elements must occur, in any order.
            </summary>
        </member>
        <member name="F:Sgml.GroupType.Or">
            <summary>
            One (and only one) must occur.
            </summary>
        </member>
        <member name="F:Sgml.GroupType.Sequence">
            <summary>
            All element must occur, in the specified order.
            </summary>
        </member>
        <member name="T:Sgml.Occurrence">
            <summary>
            Qualifies the occurrence of a child element within a content model group.
            </summary>
        </member>
        <member name="F:Sgml.Occurrence.Required">
            <summary>
            The element is required and must occur only once.
            </summary>
        </member>
        <member name="F:Sgml.Occurrence.Optional">
            <summary>
            The element is optional and must occur once at most.
            </summary>
        </member>
        <member name="F:Sgml.Occurrence.ZeroOrMore">
            <summary>
            The element is optional and can be repeated.
            </summary>
        </member>
        <member name="F:Sgml.Occurrence.OneOrMore">
            <summary>
            The element must occur at least once or more times.
            </summary>
        </member>
        <member name="T:Sgml.Group">
            <summary>
            Defines a group of elements nested within another element.
            </summary>
        </member>
        <member name="M:Sgml.Group.#ctor(Sgml.Group)">
            <summary>
            Initialises a new Content Model Group.
            </summary>
            <param name="parent">The parent model group.</param>
        </member>
        <member name="M:Sgml.Group.AddGroup(Sgml.Group)">
            <summary>
            Adds a new child model group to the end of the group's members.
            </summary>
            <param name="g">The model group to add.</param>
        </member>
        <member name="M:Sgml.Group.AddSymbol(System.String)">
            <summary>
            Adds a new symbol to the group's members.
            </summary>
            <param name="sym">The symbol to add.</param>
        </member>
        <member name="M:Sgml.Group.AddConnector(System.Char)">
            <summary>
            Adds a connector onto the member list.
            </summary>
            <param name="c">The connector character to add.</param>
            <exception cref="T:Sgml.SgmlParseException">
            If the content is not mixed and has no members yet, or if the group type has been set and the
            connector does not match the group type.
            </exception>
        </member>
        <member name="M:Sgml.Group.AddOccurrence(System.Char)">
            <summary>
            Adds an occurrence character for this group, setting it's <see cref="P:Sgml.Group.Occurrence"/> value.
            </summary>
            <param name="c">The occurrence character.</param>
        </member>
        <member name="M:Sgml.Group.CanContain(System.String,Sgml.SgmlDtd)">
            <summary>
            Checks whether an element using this group can contain a specified element.
            </summary>
            <param name="name">The name of the element to look for.</param>
            <param name="dtd">The DTD to use during the checking.</param>
            <returns>true if an element using this group can contain the element, otherwise false.</returns>
            <remarks>
            Rough approximation - this is really assuming an "Or" group
            </remarks>
        </member>
        <member name="P:Sgml.Group.Occurrence">
            <summary>
            The <see cref="P:Sgml.Group.Occurrence"/> of this group.
            </summary>
        </member>
        <member name="P:Sgml.Group.TextOnly">
            <summary>
            Checks whether the group contains only text.
            </summary>
            <value>true if the group is of mixed content and has no members, otherwise false.</value>
        </member>
        <member name="P:Sgml.Group.Parent">
            <summary>
            The parent group of this group.
            </summary>
        </member>
        <member name="T:Sgml.AttributeType">
            <summary>
            Defines the different possible attribute types.
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.Default">
            <summary>
            Attribute type not specified.
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.CDATA">
            <summary>
            The attribute contains text (with no markup).
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.ENTITY">
            <summary>
            The attribute contains an entity declared in a DTD.
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.ENTITIES">
            <summary>
            The attribute contains a number of entities declared in a DTD.
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.ID">
            <summary>
            The attribute is an id attribute uniquely identifie the element it appears on.
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.IDREF">
            <summary>
            The attribute value can be any declared subdocument or data entity name.
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.IDREFS">
            <summary>
            The attribute value is a list of (space separated) declared subdocument or data entity names.
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.NAME">
            <summary>
            The attribute value is a SGML Name.
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.NAMES">
            <summary>
            The attribute value is a list of (space separated) SGML Names.
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.NMTOKEN">
            <summary>
            The attribute value is an XML name token (i.e. contains only name characters, but in this case with digits and other valid name characters accepted as the first character).
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.NMTOKENS">
            <summary>
            The attribute value is a list of (space separated) XML NMTokens.
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.NUMBER">
            <summary>
            The attribute value is a number.
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.NUMBERS">
            <summary>
            The attribute value is a list of (space separated) numbers.
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.NUTOKEN">
            <summary>
            The attribute value is a number token (i.e. a name that starts with a number).
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.NUTOKENS">
            <summary>
            The attribute value is a list of number tokens.
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.NOTATION">
            <summary>
            Attribute value is a member of the bracketed list of notation names that qualifies this reserved name.
            </summary>
        </member>
        <member name="F:Sgml.AttributeType.ENUMERATION">
            <summary>
            The attribute value is one of a set of allowed names.
            </summary>
        </member>
        <member name="T:Sgml.AttributePresence">
            <summary>
            Defines the different constraints on an attribute's presence on an element.
            </summary>
        </member>
        <member name="F:Sgml.AttributePresence.Default">
            <summary>
            The attribute has a default value, and its presence is optional.
            </summary>
        </member>
        <member name="F:Sgml.AttributePresence.Fixed">
            <summary>
            The attribute has a fixed value, if present.
            </summary>
        </member>
        <member name="F:Sgml.AttributePresence.Required">
            <summary>
            The attribute must always be present on every element.
            </summary>
        </member>
        <member name="F:Sgml.AttributePresence.Implied">
            <summary>
            The element is optional.
            </summary>
        </member>
        <member name="T:Sgml.AttDef">
            <summary>
            An attribute definition in a DTD.
            </summary>
        </member>
        <member name="M:Sgml.AttDef.#ctor(System.String)">
            <summary>
            Initialises a new instance of the <see cref="T:Sgml.AttDef"/> class.
            </summary>
            <param name="name">The name of the attribute.</param>
        </member>
        <member name="M:Sgml.AttDef.SetEnumeratedType(System.String[],Sgml.AttributeType)">
            <summary>
            Sets the attribute definition to have an enumerated value.
            </summary>
            <param name="enumValues">The possible values in the enumeration.</param>
            <param name="type">The type to set the attribute to.</param>
            <exception cref="T:System.ArgumentException">If the type parameter is not either <see cref="F:Sgml.AttributeType.ENUMERATION"/> or <see cref="F:Sgml.AttributeType.NOTATION"/>.</exception>
        </member>
        <member name="M:Sgml.AttDef.SetType(System.String)">
            <summary>
            Sets the type of the attribute definition.
            </summary>
            <param name="type">The string representation of the attribute type, corresponding to the values in the <see cref="T:Sgml.AttributeType"/> enumeration.</param>
        </member>
        <member name="M:Sgml.AttDef.SetPresence(System.String)">
            <summary>
            Sets the attribute presence declaration.
            </summary>
            <param name="token">The string representation of the attribute presence, corresponding to one of the values in the <see cref="P:Sgml.AttDef.AttributePresence"/> enumeration.</param>
            <returns>true if the attribute presence implies the element has a default value.</returns>
        </member>
        <member name="P:Sgml.AttDef.Name">
            <summary>
            The name of the attribute declared by this attribute definition.
            </summary>
        </member>
        <member name="P:Sgml.AttDef.Default">
            <summary>
            Gets of sets the default value of the attribute.
            </summary>
        </member>
        <member name="P:Sgml.AttDef.AttributePresence">
            <summary>
            The constraints on the attribute's presence on an element.
            </summary>
        </member>
        <member name="P:Sgml.AttDef.EnumValues">
            <summary>
            Gets or sets the possible enumerated values for the attribute.
            </summary>
        </member>
        <member name="P:Sgml.AttDef.Type">
            <summary>
            The <see cref="T:Sgml.AttributeType"/> of the attribute declaration.
            </summary>
        </member>
        <member name="T:Sgml.SgmlDtd">
            <summary>
            Provides DTD parsing and support for the SgmlParser framework.
            </summary>
        </member>
        <member name="M:Sgml.SgmlDtd.#ctor(System.String,System.Xml.XmlNameTable)">
            <summary>
            Initialises a new instance of the <see cref="T:Sgml.SgmlDtd"/> class.
            </summary>
            <param name="name">The name of the DTD.</param>
            <param name="nt">The <see cref="T:System.Xml.XmlNameTable"/> is NOT used.</param>
        </member>
        <member name="M:Sgml.SgmlDtd.Parse(System.Uri,System.String,System.String,System.String,System.String,System.String,System.Xml.XmlNameTable)">
            <summary>
            Parses a DTD and creates a <see cref="T:Sgml.SgmlDtd"/> instance that encapsulates the DTD.
            </summary>
            <param name="baseUri">The base URI of the DTD.</param>
            <param name="name">The name of the DTD.</param>
            <param name="pubid"></param>
            <param name="url"></param>
            <param name="subset"></param>
            <param name="proxy"></param>
            <param name="nt">The <see cref="T:System.Xml.XmlNameTable"/> is NOT used.</param>
            <returns>A new <see cref="T:Sgml.SgmlDtd"/> instance that encapsulates the DTD.</returns>
        </member>
        <member name="M:Sgml.SgmlDtd.Parse(System.Uri,System.String,System.IO.TextReader,System.String,System.String,System.Xml.XmlNameTable)">
            <summary>
            Parses a DTD and creates a <see cref="T:Sgml.SgmlDtd"/> instance that encapsulates the DTD.
            </summary>
            <param name="baseUri">The base URI of the DTD.</param>
            <param name="name">The name of the DTD.</param>
            <param name="input">The reader to load the DTD from.</param>
            <param name="subset"></param>
            <param name="proxy">The proxy server to use when loading resources.</param>
            <param name="nt">The <see cref="T:System.Xml.XmlNameTable"/> is NOT used.</param>
            <returns>A new <see cref="T:Sgml.SgmlDtd"/> instance that encapsulates the DTD.</returns>
        </member>
        <member name="M:Sgml.SgmlDtd.FindEntity(System.String)">
            <summary>
            Finds an entity in the DTD with the specified name.
            </summary>
            <param name="name">The name of the <see cref="T:Sgml.Entity"/> to find.</param>
            <returns>The specified Entity from the DTD.</returns>
        </member>
        <member name="M:Sgml.SgmlDtd.FindElement(System.String)">
            <summary>
            Finds an element declaration in the DTD with the specified name.
            </summary>
            <param name="name">The name of the <see cref="T:Sgml.ElementDecl"/> to find and return.</param>
            <returns>The <see cref="T:Sgml.ElementDecl"/> matching the specified name.</returns>
        </member>
        <member name="M:Sgml.SgmlDtd.GetEntitiesLiteralNameLookup">
            <summary>
            Returns a dictionary for looking up entities by their <see cref="P:Sgml.Entity.Literal"/> value.
            </summary>
            <returns>A dictionary for looking up entities by their <see cref="P:Sgml.Entity.Literal"/> value.</returns>
        </member>
        <member name="P:Sgml.SgmlDtd.Name">
            <summary>
            The name of the DTD.
            </summary>
        </member>
        <member name="P:Sgml.SgmlDtd.NameTable">
            <summary>
            Gets the XmlNameTable associated with this implementation.
            </summary>
            <value>The XmlNameTable enabling you to get the atomized version of a string within the node.</value>
        </member>
        <member name="M:MushDLR223.ScriptEngines.SingleNameValue.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="F:MushDLR223.ScriptEngines.CMDFLAGS.ForceResult">
            <summary>
            Command *must* to build a return
            </summary>
        </member>
        <member name="F:MushDLR223.ScriptEngines.CMDFLAGS.NoResult">
            <summary>
            Command does not *have* to build a return
            </summary>
        </member>
        <member name="F:MushDLR223.ScriptEngines.CMDFLAGS.ForceAsync">
            <summary>
            Force the command to be ran outside of a TaskQueue 
            </summary>
        </member>
        <member name="F:MushDLR223.ScriptEngines.CMDFLAGS.SynchronousChannel">
            <summary>
            The command to be ran inside of a TaskQueue 
            </summary>
        </member>
        <member name="F:MushDLR223.ScriptEngines.CMDFLAGS.ForceCompletion">
            <summary>
            Force the command to complete before returning 
            </summary>
        </member>
        <member name="F:MushDLR223.ScriptEngines.CMDFLAGS.IsConsole">
            <summary>
            Force the command to complete before returning 
            </summary>
        </member>
        <member name="P:MushDLR223.ScriptEngines.ACmdResult.CompletedSynchronously">
            <summary>
            true if the asynchronous operation completed synchronously; otherwise, false.
            </summary>
        </member>
        <member name="P:MushDLR223.ScriptEngines.ACmdResult.AsyncWaitHandle">
            <summary>
            Gets a System.Threading.WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
            A System.Threading.WaitHandle that is used to wait for an asynchronous operation to complete.
        </member>
        <member name="P:MushDLR223.ScriptEngines.ACmdResult.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
            Returns: A user-defined object that qualifies or contains information about an asynchronous operation.
        </member>
        <member name="P:MushDLR223.ScriptEngines.CmdRequest.CompletedSynchronously">
            <summary>
            true if the asynchronous operation completed synchronously; otherwise, false.
            </summary>
        </member>
        <member name="P:MushDLR223.ScriptEngines.CmdRequest.AsyncWaitHandle">
            <summary>
            Gets a System.Threading.WaitHandle that is used to wait for an asynchronous operation to complete.
            </summary>
            A System.Threading.WaitHandle that is used to wait for an asynchronous operation to complete.
        </member>
        <member name="P:MushDLR223.ScriptEngines.CmdRequest.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
            Returns: A user-defined object that qualifies or contains information about an asynchronous operation.
        </member>
        <member name="F:ThreadPoolUtil.SafeThreadPool.noticeLevel">
            <summary>
            Get notices this level or higher
            </summary>
        </member>
    </members>
</doc>
