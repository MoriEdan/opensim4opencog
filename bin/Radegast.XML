<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Radegast</name>
    </assembly>
    <members>
        <member name="T:Radegast.Rendering.GLMesh">
            <summary>
            Subclass of LindenMesh that adds vertex, index, and texture coordinate
            arrays suitable for pushing direct to OpenGL
            </summary>
        </member>
        <member name="F:Radegast.Rendering.GLMesh.teFaceID">
            <summary>
            Subclass of LODMesh that adds an index array suitable for pushing
            direct to OpenGL
            </summary>
            
        </member>
        <member name="T:Radegast.Rendering.GLMesh.GLData">
            <summary>
            
            </summary>
        </member>
        <member name="F:Radegast.Rendering.VisualParamEx.ParamID">
            <summary>Index of this visual param</summary>
        </member>
        <member name="F:Radegast.Rendering.VisualParamEx.Name">
            <summary>Internal name</summary>
        </member>
        <member name="F:Radegast.Rendering.VisualParamEx.Group">
            <summary>Group ID this parameter belongs to</summary>
        </member>
        <member name="F:Radegast.Rendering.VisualParamEx.Wearable">
            <summary>Name of the wearable this parameter belongs to</summary>
        </member>
        <member name="F:Radegast.Rendering.VisualParamEx.Label">
            <summary>Displayable label of this characteristic</summary>
        </member>
        <member name="F:Radegast.Rendering.VisualParamEx.LabelMin">
            <summary>Displayable label for the minimum value of this characteristic</summary>
        </member>
        <member name="F:Radegast.Rendering.VisualParamEx.LabelMax">
            <summary>Displayable label for the maximum value of this characteristic</summary>
        </member>
        <member name="F:Radegast.Rendering.VisualParamEx.DefaultValue">
            <summary>Default value</summary>
        </member>
        <member name="F:Radegast.Rendering.VisualParamEx.MinValue">
            <summary>Minimum value</summary>
        </member>
        <member name="F:Radegast.Rendering.VisualParamEx.MaxValue">
            <summary>Maximum value</summary>
        </member>
        <member name="F:Radegast.Rendering.VisualParamEx.IsBumpAttribute">
            <summary>Is this param used for creation of bump layer?</summary>
        </member>
        <member name="F:Radegast.Rendering.VisualParamEx.AlphaParams">
            <summary>Alpha blending/bump info</summary>
        </member>
        <member name="F:Radegast.Rendering.VisualParamEx.ColorParams">
            <summary>Color information</summary>
        </member>
        <member name="F:Radegast.Rendering.VisualParamEx.Drivers">
            <summary>Array of param IDs that are drivers for this parameter</summary>
        </member>
        <member name="F:Radegast.Rendering.VisualParamEx.sex">
            <summary>The Avatar Sex that this parameter applies to</summary>
        </member>
        <member name="M:Radegast.Rendering.VisualParamEx.#ctor(System.Int32,System.String,System.Int32,System.String,System.String,System.String,System.String,System.Single,System.Single,System.Single,System.Boolean,System.Int32[],System.Nullable{OpenMetaverse.VisualAlphaParam},System.Nullable{OpenMetaverse.VisualColorParam})">
            <summary>
            Set all the values through the constructor
            </summary>
            <param name="paramID">Index of this visual param</param>
            <param name="name">Internal name</param>
            <param name="group"></param>
            <param name="wearable"></param>
            <param name="label">Displayable label of this characteristic</param>
            <param name="labelMin">Displayable label for the minimum value of this characteristic</param>
            <param name="labelMax">Displayable label for the maximum value of this characteristic</param>
            <param name="def">Default value</param>
            <param name="min">Minimum value</param>
            <param name="max">Maximum value</param>
            <param name="isBumpAttribute">Is this param used for creation of bump layer?</param>
            <param name="drivers">Array of param IDs that are drivers for this parameter</param>
            <param name="alpha">Alpha blending/bump info</param>
            <param name="colorParams">Color information</param>
        </member>
        <member name="T:Radegast.Rendering.SceneObject">
            <summary>
            Base class for all scene objects
            </summary>
        </member>
        <member name="F:Radegast.Rendering.SceneObject.InterpolatedPosition">
            <summary>Interpolated local position of the object</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Radegast.Rendering.SceneObject.InterpolatedRotation" -->
        <member name="F:Radegast.Rendering.SceneObject.RenderPosition">
            <summary>Rendered position of the object in the region</summary>
        </member>
        <member name="F:Radegast.Rendering.SceneObject.RenderRotation">
            <summary>Rendered rotationm of the object in the region</summary>
        </member>
        <member name="F:Radegast.Rendering.SceneObject.DistanceSquared">
            <summary>Per frame calculated square of the distance from camera</summary>
        </member>
        <member name="F:Radegast.Rendering.SceneObject.BoundingVolume">
            <summary>Bounding volume of the object</summary>
        </member>
        <member name="F:Radegast.Rendering.SceneObject.PositionCalculated">
            <summary>Was the sim position and distance from camera calculated during this frame</summary>
        </member>
        <member name="F:Radegast.Rendering.SceneObject.Type">
            <summary>Scene object type</summary>
        </member>
        <member name="F:Radegast.Rendering.SceneObject.Initialized">
            <summary>Were initial initialization tasks done</summary>
        </member>
        <member name="F:Radegast.Rendering.SceneObject.IsDisposed">
            <summary>Is this object disposed</summary>
        </member>
        <member name="M:Radegast.Rendering.SceneObject.Dispose">
            <summary>
            Cleanup resources used
            </summary>
        </member>
        <member name="M:Radegast.Rendering.SceneObject.Initialize">
            <summary>
            Task performed the fist time object is set for rendering
            </summary>
        </member>
        <member name="M:Radegast.Rendering.SceneObject.Step(System.Single)">
            <summary>
            Perform per frame tasks
            </summary>
            <param name="time">Time since the last call (last frame time in seconds)</param>
        </member>
        <member name="M:Radegast.Rendering.SceneObject.Render(Radegast.Rendering.RenderPass,System.Int32,Radegast.Rendering.SceneWindow,System.Single)">
            <summary>
            Render scene object
            </summary>
            <param name="pass">Which pass are we currently in</param>
            <param name="pickingID">ID used to identify which object was picked</param>
            <param name="scene">Main scene renderer</param>
            <param name="time">Time it took to render the last frame</param>
        </member>
        <member name="M:Radegast.Rendering.SceneObject.CompareTo(System.Object)">
            <summary>
            Implementation of the IComparable interface
            used for sorting by distance
            </summary>
            <param name="other">Object we are comparing to</param>
            <returns>Result of the comparison</returns>
        </member>
        <member name="P:Radegast.Rendering.SceneObject.BasePrim">
            <summary>Libomv primitive</summary>
        </member>
        <member name="T:Radegast.Notification">
            <summary>
            Base class for all notificatiosn (blue dialogs)
            </summary>
        </member>
        <member name="F:Radegast.Notification.Type">
            <summary>
            Notification type
            </summary>
        </member>
        <member name="E:Radegast.Notification.OnNotificationDisplayed">
            <summary>
            Fired when a notification is displayed
            </summary>
        </member>
        <member name="T:Radegast.Notification.NotificationCallback">
            <summary>
            Callback when blue dialog notification is displayed or closed
            </summary>
            <param name="sender">Notification dialog</param>
            <param name="e">Notification parameters</param>
        </member>
        <member name="T:Radegast.Notification.NotificationClickedCallback">
            <summary>
            Callback when blue dialog notification button is clicked
            </summary>
            <param name="sender">Notification dialog</param>
            <param name="e">Notification parameters</param>
        </member>
        <member name="F:Radegast.ntfPermissions.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.ntfPermissions.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.ntfPermissions.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.ntfLoadURL.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.ntfLoadURL.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.ntfLoadURL.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.ntfGroupNotice.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.ntfGroupNotice.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.ntfGroupNotice.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.ntfGroupInvitation.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.ntfGroupInvitation.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.ntfGroupInvitation.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Radegast.RadegastForm.AutoSavePosition">
            <summary>
            Indicates if position and size of the form should be saved
            </summary>
        </member>
        <member name="P:Radegast.RadegastForm.Instance">
            <summary>
            Instance of Radegast
            </summary>
        </member>
        <member name="P:Radegast.RadegastForm.Client">
            <summary>
            Instance of OpenMetaverse's GridClient
            </summary>
        </member>
        <member name="P:Radegast.RadegastForm.Netcom">
            <summary>
            Instance of RadegastNetcom
            </summary>
        </member>
        <member name="F:Radegast.frmGroupInfo.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.frmGroupInfo.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.frmGroupInfo.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.frmDetachedTab.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.frmDetachedTab.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.frmDetachedTab.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.DettachableControl.DisposeOnDetachedClose">
            <summary>
            If in detached state and detached form is closing and we have no parent
            do we dispose ourselves</summary>
        </member>
        <member name="F:Radegast.Notecard.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.Notecard.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.Notecard.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.RegionInfo.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.RegionInfo.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.RegionInfo.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.OutfitTextures.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.OutfitTextures.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.OutfitTextures.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.IMTabWindow.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.IMTabWindow.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.IMTabWindow.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.FindPeopleConsole.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.FindPeopleConsole.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.FindPeopleConsole.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.DebugConsole.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.DebugConsole.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.DebugConsole.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.ChatConsole.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.ChatConsole.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.ChatConsole.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.AttachmentDetail.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.AttachmentDetail.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.AttachmentDetail.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Radegast.UISounds">
            <summary>
            Predefined UI sounds
            Source: https://wiki.secondlife.com/wiki/Client_sounds
            </summary>
        </member>
        <member name="F:Radegast.UISounds.IM">
            <summary>Sound of incoming IM</summary>
        </member>
        <member name="F:Radegast.UISounds.Typing">
            <summary>Typing sound</summary>
        </member>
        <member name="F:Radegast.UISounds.IMWindow">
            <summary>When user opens new IM window</summary>
        </member>
        <member name="F:Radegast.UISounds.MoneyIn">
            <summary>When money balance is increased</summary>
        </member>
        <member name="F:Radegast.UISounds.MoneyOut">
            <summary>When money balance is decreased</summary>
        </member>
        <member name="F:Radegast.UISounds.ObjectRez">
            <summary>Object rezzed from inventory</summary>
        </member>
        <member name="F:Radegast.UISounds.ObjectCreate">
            <summary>Object create</summary>
        </member>
        <member name="F:Radegast.UISounds.ObjectDelete">
            <summary>Object deleted</summary>
        </member>
        <member name="F:Radegast.Media.MediaObject.queue">
             Queue of sound commands
            
        </member>
        <member name="F:Radegast.Media.MediaObject.system">
            <summary>
            Base FMOD system object, of which there is only one.
            </summary>
        </member>
        <member name="M:Radegast.Media.MediaObject.invoke(Radegast.Media.MediaObject.SoundDelegate)">
            <summary>
            Put a delegate call on the command queue.  These will be executed on
            the FMOD control thread.   All FMOD calls must happen there.
            </summary>
            <param name="action"></param>
        </member>
        <member name="F:Radegast.Media.MediaObject.volume">
            <summary>
             Change a playback volume
            </summary>
        </member>
        <member name="F:Radegast.Media.MediaObject.position">
            <summary>
            Update the 3D position of a sound source.
            </summary>
        </member>
        <member name="M:Radegast.Media.MediaObject.FromOMVSpace(OpenMetaverse.Vector3)">
            <summary>
            Convert OpenMetaVerse to FMOD coordinate space.
            </summary>
            <param name="omvV"></param>
            <returns></returns>
        </member>
        <member name="M:Radegast.Media.MediaObject.EndCallbackHandler">
            <summary>
            A callback for asynchronous FMOD calls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radegast.Media.MediaObject.DispatchEndCallback(System.IntPtr,FMOD.CHANNEL_CALLBACKTYPE,System.IntPtr,System.IntPtr)">
            <summary>
            Main handler for playback-end callback.
            </summary>
            <param name="channelraw"></param>
            <param name="type"></param>
            <param name="commanddata1"></param>
            <param name="commanddata2"></param>
            <returns></returns>
        </member>
        <member name="P:Radegast.Media.MediaObject.Disposed">
            <summary>
            Indicates if this object's resources have already been disposed
            </summary>
        </member>
        <member name="T:Radegast.Media.MediaObject.SoundDelegate">
            All commands are made through queued delegate calls, so they
            are guaranteed to take place in the same thread.  FMOD requires this.
        </member>
        <member name="M:Radegast.Rendering.ImageUtils.Bilinear(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs bilinear interpolation between four values
            </summary>
            <param name="v00">First, or top left value</param>
            <param name="v01">Second, or top right value</param>
            <param name="v10">Third, or bottom left value</param>
            <param name="v11">Fourth, or bottom right value</param>
            <param name="xPercent">Interpolation value on the X axis, between 0.0 and 1.0</param>
            <param name="yPercent">Interpolation value on fht Y axis, between 0.0 and 1.0</param>
            <returns>The bilinearly interpolated result</returns>
        </member>
        <member name="M:Radegast.Rendering.ImageUtils.ResizeImage(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Performs a high quality image resize
            </summary>
            <param name="image">Image to resize</param>
            <param name="width">New width</param>
            <param name="height">New height</param>
            <returns>Resized image</returns>
        </member>
        <member name="F:Radegast.ntfFriendshipOffer.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.ntfFriendshipOffer.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.ntfFriendshipOffer.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.LoginConsole.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.LoginConsole.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.LoginConsole.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.AnimTab.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.AnimTab.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.AnimTab.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Radegast.IContextAction.GetToolItems(System.Object,System.Type)">
            <summary>
            Generate a list of ToolStripMenuItems that might be be embeded into a ContextMenuStrip host
            </summary>
            <param name="target">the context sensitive item</param>
            <param name="type">the dereferenced type</param>
            <returns>List of ToolStripMenuItem that will be appeneded to the current menu</returns>
        </member>
        <member name="M:Radegast.IContextAction.GetControls(System.Object,System.Type)">
            <summary>
            Get GUI items that one might include on the form to operate this action
            </summary>
            <param name="target">the context sensitive item</param>
            <param name="type">the dereferenced type</param>
            <returns>List of Buttons and Other hostable Controls that make sense to appear on the form when this item is selected</returns>
        </member>
        <member name="M:Radegast.IContextAction.IsEnabled(System.Object)">
            <summary>
            If the menu item is Enabled
            </summary>
            <param name="target">the context sensiive item</param>
            <returns>false when the menu Item should be greyed</returns>
        </member>
        <member name="M:Radegast.IContextAction.LabelFor(System.Object)">
            <summary>
            The menu Item's text based on target 
            </summary>
            <param name="target">the context sensiive item</param>
            <returns>true if the Action is availble - for instance some Avatar might not even be logged in so "follow" would not even show up</returns>
        </member>
        <member name="M:Radegast.IContextAction.Contributes(System.Object,System.Type)">
            <summary>
            If the context menu is usable to the target
            </summary>
            <param name="target">the context sensitive item</param>
            <param name="type">the dereferenced type</param>
            <returns>The name that is displayed in a menu of options</returns>
        </member>
        <member name="M:Radegast.IContextAction.OnInvoke(System.Object,System.EventArgs,System.Object)">
            <summary>
            The Action code goes here
            </summary>
            <param name="sender">the Control that originates the event</param>
            <param name="e">The EventArgs proprietary to the Controls event.. like MouseEventArgs or KeyEventArgs etc</param>
            <param name="target">The Context Item that is realy targeted</param>
        </member>
        <member name="M:Radegast.Commands.RadegastCommand.#ctor(Radegast.RadegastInstance)">
            <summary>
            for subclasses (they should override Execute)
            </summary>
            <param name="name"></param>
            <summary>
            For simple creation of new commands
            </summary>
            <param name="inst"></param>
        </member>
        <member name="M:Radegast.Commands.RadegastCommand.#ctor(Radegast.RadegastInstance,Radegast.CommandExecuteDelegate)">
            <summary>
            For simple creation of new commands
            </summary>
            <param name="inst"></param>
            <param name="exec"></param>
        </member>
        <member name="P:Radegast.Commands.RadegastCommand.Instance">
            <summary>
            Radegast instance received during start command
            </summary>
        </member>
        <member name="P:Radegast.Commands.RadegastCommand.Client">
            <summary>
            GridClinet associated with RadegastInstanc received during command startup
            </summary>
        </member>
        <member name="M:Radegast.Commands.CommandsManager.ExecuteCommand(System.String)">
            <summary>
            Queues command for execution
            </summary>
            <param name="cmdline"></param>
        </member>
        <member name="M:Radegast.Commands.CommandsManager.ExecuteCommand(Radegast.ConsoleWriteLine,System.String)">
            <summary>
            Queues command for execution
            </summary>
            <param name="WriteLine"></param>
            <param name="cmdline"></param>
        </member>
        <member name="M:Radegast.CurrentOutfitFolder.ContentLinks">
            <summary>
            Get COF contents
            </summary>
            <returns>List if InventoryItems that can be part of appearance (attachments, wearables)</returns>
        </member>
        <member name="M:Radegast.CurrentOutfitFolder.GetAttachmentItem(OpenMetaverse.Primitive)">
            <summary>
            Get inventory ID of a prim
            </summary>
            <param name="prim">Prim to check</param>
            <returns>Inventory ID of the object. UUID.Zero if not found</returns>
        </member>
        <member name="M:Radegast.CurrentOutfitFolder.IsAttached(System.Collections.Generic.List{OpenMetaverse.Primitive},OpenMetaverse.InventoryItem)">
            <summary>
            Is an inventory item currently attached
            </summary>
            <param name="attachments">List of root prims that are attached to our avatar</param>
            <param name="item">Inventory item to check</param>
            <returns>True if the inventory item is attached to avatar</returns>
        </member>
        <member name="M:Radegast.CurrentOutfitFolder.IsWorn(System.Collections.Generic.Dictionary{OpenMetaverse.WearableType,OpenMetaverse.AppearanceManager.WearableData},OpenMetaverse.InventoryItem)">
            <summary>
            Checks if inventory item of Wearable type is worn
            </summary>
            <param name="currentlyWorn">Current outfit</param>
            <param name="item">Item to check</param>
            <returns>True if the item is worn</returns>
        </member>
        <member name="M:Radegast.CurrentOutfitFolder.CanBeWorn(OpenMetaverse.InventoryBase)">
            <summary>
            Can this inventory type be worn
            </summary>
            <param name="item">Item to check</param>
            <returns>True if the inventory item can be worn</returns>
        </member>
        <member name="M:Radegast.CurrentOutfitFolder.Attach(OpenMetaverse.InventoryItem,OpenMetaverse.AttachmentPoint,System.Boolean)">
            <summary>
            Attach an inventory item
            </summary>
            <param name="item">Item to be attached</param>
            <param name="point">Attachment point</param>
            <param name="replace">Replace existing attachment at that point first?</param>
        </member>
        <member name="M:Radegast.CurrentOutfitFolder.AddLink(OpenMetaverse.InventoryItem)">
            <summary>
            Creates a new COF link
            </summary>
            <param name="item">Original item to be linked from COF</param>
        </member>
        <member name="M:Radegast.CurrentOutfitFolder.AddLink(OpenMetaverse.InventoryItem,System.String)">
            <summary>
            Creates a new COF link
            </summary>
            <param name="item">Original item to be linked from COF</param>
            <param name="newDescription">Description for the link</param>
        </member>
        <member name="M:Radegast.CurrentOutfitFolder.RemoveLink(OpenMetaverse.UUID)">
            <summary>
            Remove a link to specified inventory item
            </summary>
            <param name="itemID">ID of the target inventory item for which we want link to be removed</param>
        </member>
        <member name="M:Radegast.CurrentOutfitFolder.RemoveLink(System.Collections.Generic.List{OpenMetaverse.UUID})">
            <summary>
            Remove a link to specified inventory item
            </summary>
            <param name="itemIDs">List of IDs of the target inventory item for which we want link to be removed</param>
        </member>
        <member name="M:Radegast.CurrentOutfitFolder.Detach(OpenMetaverse.InventoryItem)">
            <summary>
            Remove attachment
            </summary>
            <param name="item">>Inventory item to be detached</param>
        </member>
        <member name="M:Radegast.CurrentOutfitFolder.RealInventoryItem(OpenMetaverse.InventoryItem)">
            <summary>
            Resolves inventory links and returns a real inventory item that
            the link is pointing to
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Radegast.CurrentOutfitFolder.ReplaceOutfit(System.Collections.Generic.List{OpenMetaverse.InventoryItem})">
            <summary>
            Replaces the current outfit and updates COF links accordingly
            </summary>
            <param name="outfit">List of new wearables and attachments that comprise the new outfit</param>
        </member>
        <member name="M:Radegast.CurrentOutfitFolder.AddToOutfit(OpenMetaverse.InventoryItem)">
            <summary>
            Add items to current outfit
            </summary>
            <param name="item">Item to add</param>
        </member>
        <member name="M:Radegast.CurrentOutfitFolder.AddToOutfit(System.Collections.Generic.List{OpenMetaverse.InventoryItem})">
            <summary>
            Add items to current outfit
            </summary>
            <param name="items">List of items to add</param>
        </member>
        <member name="M:Radegast.CurrentOutfitFolder.RemoveFromOutfit(OpenMetaverse.InventoryItem)">
            <summary>
            Remove an item from the current outfit
            </summary>
            <param name="items">Item to remove</param>
        </member>
        <member name="M:Radegast.CurrentOutfitFolder.RemoveFromOutfit(System.Collections.Generic.List{OpenMetaverse.InventoryItem})">
            <summary>
            Remove specified items from the current outfit
            </summary>
            <param name="items">List of items to remove</param>
        </member>
        <member name="F:Radegast.MuteList.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.MuteList.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.MuteList.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.GroupsConsole.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.GroupsConsole.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.GroupsConsole.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.AvatarPicker.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.AvatarPicker.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.AvatarPicker.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Radegast.ToolStripCheckBox.Checked">
            <summary>
            Is check box ticked
            </summary>
        </member>
        <member name="P:Radegast.ToolStripCheckBox.CheckState">
            <summary>
            Checked state
            </summary>
        </member>
        <member name="P:Radegast.ToolStripCheckBox.Text">
            <summary>
            Label text
            </summary>
        </member>
        <member name="E:Radegast.ToolStripCheckBox.CheckedChanged">
            <summary>
            Occurs when check property is changed
            </summary>
        </member>
        <member name="E:Radegast.ToolStripCheckBox.CheckStateChanged">
            <summary>
            Occurs when check state of the control changes
            </summary>
        </member>
        <member name="F:Radegast.ntfScriptDialog.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.ntfScriptDialog.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.ntfScriptDialog.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Radegast.NotificationType">
            <summary>
            What kind of notification this is (blue dialog)
            </summary>
        </member>
        <member name="T:Radegast.NotificationEventArgs">
            <summary>
            Fired when blue dialog notification is displayed
            </summary>
        </member>
        <member name="F:Radegast.NotificationEventArgs.Notice">
            <summary>
            The Notfication form itself
            </summary>
        </member>
        <member name="F:Radegast.NotificationEventArgs.Type">
            <summary>
            Type of notfication
            </summary>
        </member>
        <member name="F:Radegast.NotificationEventArgs.Instance">
            <summary>
            Instance of Radegast where the event occured
            </summary>
        </member>
        <member name="F:Radegast.NotificationEventArgs.Text">
            <summary>
            Notification text
            </summary>
        </member>
        <member name="F:Radegast.NotificationEventArgs.Buttons">
            <summary>
            Buttons displayed on the notification window
            </summary>
        </member>
        <member name="F:Radegast.NotificationEventArgs.CanClose">
            <summary>
            When set true the Dialog Can send the Close Event
            </summary>
        </member>
        <member name="F:Radegast.NotificationEventArgs.ButtonSelected">
            <summary>
            The button has been pushed once
            </summary>        
        </member>
        <member name="M:Radegast.NotificationEventArgs.#ctor(Radegast.RadegastInstance)">
            <summary>
            Create new event args object
            </summary>
            <param name="instance">Instance of Radegast notification is coming from</param>
        </member>
        <member name="M:Radegast.NotificationEventArgs.Notification_Close">
            <summary>
            Triggers the OnNotificationClosing event.
            </summary>
        </member>
        <member name="M:Radegast.NotificationEventArgs.Notification_Click(System.Object,System.EventArgs)">
            <summary>
            Triggers the OnNotificationClicked event.
            </summary>
        </member>
        <member name="F:Radegast.frmProfile.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.frmProfile.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.frmProfile.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.frmMain.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.frmMain.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.frmMain.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Radegast.frmMain.ToolsMenu">
            <summary>
            Drop down that contains the tools menu
            </summary>
        </member>
        <member name="P:Radegast.frmMain.HelpMenu">
            <summary>
            Dropdown that contains the heelp menu
            </summary>
        </member>
        <member name="P:Radegast.frmMain.PluginsMenu">
            <summary>
            Drop down that contants the plugins menu. Make sure to set it Visible if
            you add items to this menu, it's hidden by default
            </summary>
        </member>
        <member name="F:Radegast.AnimDetail.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.AnimDetail.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.AnimDetail.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Radegast.Netcom.RadegastNetcom">
            <summary>
            RadegastNetcom is a class built on top of libsecondlife that provides a way to
            raise events on the proper thread (for GUI apps especially).
            </summary>
        </member>
        <member name="F:Radegast.Netcom.RadegastNetcom.m_ClientConnected">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="M:Radegast.Netcom.RadegastNetcom.OnClientConnected(System.EventArgs)">
            <summary>Raises the ClientConnected Event</summary>
             <param name="e">A ClientConnectedEventArgs object containing
             the old and the new client</param>
        </member>
        <member name="F:Radegast.Netcom.RadegastNetcom.m_ClientConnectedLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="E:Radegast.Netcom.RadegastNetcom.ClientConnected">
            <summary>Raised when the GridClient object in the main Radegast instance is changed</summary>
        </member>
        <member name="T:Radegast.Netcom.RadegastNetcom.ClientConnectedRaise">
            <summary>Raise event delegate</summary>
        </member>
        <member name="M:Radegast.Rendering.TerrainSplat.Splat(Radegast.RadegastInstance,System.Single[0:,0:],OpenMetaverse.UUID[],System.Single[],System.Single[])">
            <summary>
            Builds a composited terrain texture given the region texture
            and heightmap settings
            </summary>
            <param name="heightmap">Terrain heightmap</param>
            <param name="regionInfo">Region information including terrain texture parameters</param>
            <returns>A composited 256x256 RGB texture ready for rendering</returns>
            <remarks>Based on the algorithm described at http://opensimulator.org/wiki/Terrain_Splatting
            </remarks>
        </member>
        <member name="T:Radegast.Rendering.Camera">
            <summary>
            Represents camera object
            </summary>
        </member>
        <member name="F:Radegast.Rendering.Camera.Manual">
            <summary>
            Indicates that there was manual camera movement, stop tracking objects
            </summary>
        </member>
        <member name="F:Radegast.Rendering.Camera.Zoom">
            <summary>Zoom level</summary>
        </member>
        <member name="F:Radegast.Rendering.Camera.Far">
            <summary>Draw distance</summary>
        </member>
        <member name="M:Radegast.Rendering.Camera.LookAt">
            <summary>
            Sets the world in perspective of the camera
            </summary>
        </member>
        <member name="P:Radegast.Rendering.Camera.Position">
            <summary>Camera position</summary>
        </member>
        <member name="P:Radegast.Rendering.Camera.FocalPoint">
            <summary>Camera target</summary>
        </member>
        <member name="P:Radegast.Rendering.Camera.Modified">
            <summary>Has camera been modified</summary>
        </member>
        <member name="F:Radegast.Rendering.GraphicsPreferences.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.Rendering.GraphicsPreferences.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.Rendering.GraphicsPreferences.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.ntfTeleport.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.ntfTeleport.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.ntfTeleport.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.GroupInvite.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.GroupInvite.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.GroupInvite.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.frmAbout.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.frmAbout.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.frmAbout.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.InventoryBackup.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.InventoryBackup.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.InventoryBackup.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.ScriptEditor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.ScriptEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.ScriptEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.ObjectsConsole.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.ObjectsConsole.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.ObjectsConsole.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Radegast.LineNumberPanel">
            <summary>
            Used in conjuction with ritch text box to display lone numbers
            </summary>
        </member>
        <member name="P:Radegast.LineNumberPanel.RTB">
            <summary>
            Associated ritch text box control
            </summary>
        </member>
        <member name="M:Radegast.Media.Stream.#ctor">
            <summary>
            Creates a new sound object
            </summary>
            <param name="system">Sound system</param>
        </member>
        <member name="M:Radegast.Media.Stream.Dispose">
            <summary>
            Releases resources of this sound object
            </summary>
        </member>
        <member name="M:Radegast.Media.Stream.PlayStream(System.String)">
            <summary>
            Plays audio stream
            </summary>
            <param name="url">URL of the stream</param>
        </member>
        <member name="E:Radegast.Media.Stream.OnStreamInfo">
            <summary>
            Fired when a stream meta data is received
            </summary>
        </member>
        <member name="T:Radegast.Media.Stream.StreamInfoCallback">
            <summary>
            Fired when a stream meta data is received
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Key, value are sent in e</param>
        </member>
        <member name="T:Radegast.Rendering.FaceData">
            <summary>
            Contains per primitive face data
            </summary>
        </member>
        <member name="M:Radegast.Rendering.FaceData.Dispose">
            <summary>
            Dispose VBOs if we have them in graphics card memory
            </summary>
        </member>
        <member name="M:Radegast.Rendering.FaceData.CheckVBO(OpenMetaverse.Rendering.Face)">
            <summary>
            Checks if VBOs are created, if they are, bind them, if not create new
            </summary>
            <param name="face">Which face's mesh is uploaded in this VBO</param>
            <returns>True, if face data was succesfully uploaded to the graphics card memory</returns>
        </member>
        <member name="T:Radegast.Rendering.TextureAnimationInfo">
            <summary>
            Class handling texture animations
            </summary>
        </member>
        <member name="M:Radegast.Rendering.TextureAnimationInfo.Step(System.Single)">
            <summary>
            Perform texture manupulation to implement texture animations
            </summary>
            <param name="lastFrameTime">Time passed since the last run (in seconds)</param>
        </member>
        <member name="T:Radegast.Rendering.RenderPrimitive">
            <summary>
            Class that handle rendering of objects: simple primitives, scupties, and meshes
            </summary>
        </member>
        <member name="F:Radegast.Rendering.RenderPrimitive.Prim">
            <summary>Base simulator object</summary>
        </member>
        <member name="F:Radegast.Rendering.RenderPrimitive.Attached">
            <summary>Is this object attached to an avatar</summary>
        </member>
        <member name="F:Radegast.Rendering.RenderPrimitive.AttachedStateKnown">
            <summary>Do we know if object is attached</summary>
        </member>
        <member name="F:Radegast.Rendering.RenderPrimitive.Meshed">
            <summary>Are meshes constructed and ready for this prim</summary>
        </member>
        <member name="F:Radegast.Rendering.RenderPrimitive.Meshing">
            <summary>Process of creating a mesh is underway</summary>
        </member>
        <member name="M:Radegast.Rendering.RenderPrimitive.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Radegast.Rendering.RenderPrimitive.Dispose">
            <summary>
            Remove any GL resource we may still have in use
            </summary>
        </member>
        <member name="M:Radegast.Rendering.RenderPrimitive.Initialize">
            <summary>
            Set initial state of the object
            </summary>
        </member>
        <member name="M:Radegast.Rendering.RenderPrimitive.Render(Radegast.Rendering.RenderPass,System.Int32,Radegast.Rendering.SceneWindow,System.Single)">
            <summary>
            Render Primitive
            </summary>
            <param name="pass">Which pass are we currently in</param>
            <param name="pickingID">ID used to identify which object was picked</param>
            <param name="scene">Main scene renderer</param>
            <param name="time">Time it took to render the last frame</param>
        </member>
        <member name="M:Radegast.Rendering.RenderPrimitive.ToString">
            <summary>
            String representation of the object
            </summary>
            <returns>String containing local ID of the object and it's distance from the camera</returns>
        </member>
        <member name="P:Radegast.Rendering.RenderPrimitive.BasePrim">
            <summary>
            Simulator object that is basis for this SceneObject
            </summary>
        </member>
        <member name="F:Radegast.Rendering.frmPrimWorkshop.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.Rendering.frmPrimWorkshop.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.Rendering.frmPrimWorkshop.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.Rendering.frmPrimWorkshop.glControl">
            <summary>
            The OpenGL surface
            </summary>
        </member>
        <member name="F:Radegast.Rendering.frmPrimWorkshop.UseMultiSampling">
            <summary>
            Use multi sampling (anti aliasing)
            </summary>
        </member>
        <member name="F:Radegast.Rendering.frmPrimWorkshop.RenderingEnabled">
            <summary>
            Is rendering engine ready and enabled
            </summary>
        </member>
        <member name="F:Radegast.Rendering.frmPrimWorkshop.Wireframe">
            <summary>
            Rednder in wireframe mode
            </summary>
        </member>
        <member name="F:Radegast.Rendering.frmPrimWorkshop.Prims">
            <summary>
            List of prims in the scene
            </summary>
        </member>
        <member name="F:Radegast.Rendering.frmPrimWorkshop.RootPrimLocalID">
            <summary>
            Local ID of the root prim
            </summary>
        </member>
        <member name="F:Radegast.Rendering.frmPrimWorkshop.Center">
            <summary>
            Camera center
            </summary>
        </member>
        <member name="F:Radegast.ntfGeneric.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.ntfGeneric.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.ntfGeneric.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.frmSettings.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.frmSettings.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.frmSettings.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.frmKeyboardShortcuts.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.frmKeyboardShortcuts.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.frmKeyboardShortcuts.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Radegast.InventoryClipboard">
            <summary>
            Saved to clipboard
            </summary>
        </member>
        <member name="F:Radegast.MediaConsole.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.MediaConsole.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.MediaConsole.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.ImageUploadConsole.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.ImageUploadConsole.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.ImageUploadConsole.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.GroupIMTabWindow.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.GroupIMTabWindow.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.GroupIMTabWindow.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.RLVManager.m_RLVRuleChanged">
            <summary>The event subscribers. null if no subcribers</summary>
        </member>
        <member name="M:Radegast.RLVManager.OnRLVRuleChanged(Radegast.RLVEventArgs)">
            <summary>Raises the RLVRuleChanged event</summary>
            <param name="e">An RLVRuleChangedEventArgs object containing the
            data returned from the data server</param>
        </member>
        <member name="F:Radegast.RLVManager.m_RLVRuleChangedLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="E:Radegast.RLVManager.RLVRuleChanged">
            <summary>Triggered when an RLVRuleChangedUpdate packet is received,
            telling us what our avatar is currently wearing
            <see cref="!:RequestRLVRuleChanged"/> request.</summary>
        </member>
        <member name="M:Radegast.StateManager.TryFindAvatar(OpenMetaverse.UUID,OpenMetaverse.Vector3@)">
            <summary>
            Locates avatar in the current sim, or adjacents sims
            </summary>
            <param name="person">Avatar UUID</param>
            <param name="position">Position within sim</param>
            <returns>True if managed to find the avatar</returns>
        </member>
        <member name="M:Radegast.StateManager.TryFindAvatar(OpenMetaverse.UUID,OpenMetaverse.Simulator@,OpenMetaverse.Vector3@)">
            <summary>
            Locates avatar in the current sim, or adjacents sims
            </summary>
            <param name="person">Avatar UUID</param>
            <param name="sim">Simulator avatar is in</param>
            <param name="position">Position within sim</param>
            <returns>True if managed to find the avatar</returns>
        </member>
        <member name="M:Radegast.StateManager.MoveTo(OpenMetaverse.Vector3,System.Boolean)">
            <summary>
            Move to target position either by walking or by teleporting
            </summary>
            <param name="target">Sim local position of the target</param>
            <param name="useTP">Move using teleport</param>
        </member>
        <member name="M:Radegast.StateManager.MoveTo(OpenMetaverse.Simulator,OpenMetaverse.Vector3,System.Boolean)">
            <summary>
            Move to target position either by walking or by teleporting
            </summary>
            <param name="sim">Simulator in which the target is</param>
            <param name="target">Sim local position of the target</param>
            <param name="useTP">Move using teleport</param>
        </member>
        <member name="M:Radegast.StateManager.LookInFront">
            <summary>
            Set eye focus 3m in front of us
            </summary>
        </member>
        <member name="F:Radegast.StateManager.UseMoveControl">
            <summary>
            Experimental Option that sometimes the Client has more authority than state mananger
            </summary>
        </member>
        <member name="E:Radegast.StateManager.OnWalkStateCanged">
            <summary>
            Fires when we start or stop walking towards a target
            </summary>
        </member>
        <member name="E:Radegast.StateManager.SitStateChanged">
            <summary>
            Fires when avatar stands
            </summary>
        </member>
        <member name="T:Radegast.StateManager.WalkStateCanged">
            <summary>
            Passes walk state
            </summary>
            <param name="walking">True if we are walking towards a targer</param>
        </member>
        <member name="T:Radegast.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.add_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.applications_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.applications_32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.arrow_forward_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.arrow_up_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.btn_play">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.btn_stop">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.checkerboard">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.client_signatures">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
            &lt;!-- $Id: $ --&gt;
            &lt;llsd&gt;
              &lt;map&gt;
                &lt;key&gt;0bcd5f5d-a4ce-9ea4-f9e8-15132653b3d8&lt;/key&gt;
                &lt;map&gt;
                  &lt;key&gt;color&lt;/key&gt;
                  &lt;array&gt;
                    &lt;real&gt;2&lt;/real&gt;
                    &lt;real&gt;1&lt;/real&gt;
            
                    &lt;real&gt;1.6000000238418579&lt;/real&gt;
                    &lt;real&gt;1&lt;/real&gt;
                  &lt;/array&gt;
                  &lt;key&gt;multiple&lt;/key&gt;
                  &lt;real&gt;2&lt;/real&gt;
                  &lt;key&gt;name&lt;/key&gt;
            
                  &lt;string&gt;MoyMix&lt;/string&gt;
                &lt;/map&gt;
                &lt;key&gt;0f6723d2-5b23-6b58-08ab-308112b33786&lt;/key&gt;
                &lt;map&gt;
                  &lt;key&gt;color&lt;/key&gt; [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.computer_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.copy_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.cut_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.del_trans">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.delete_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.documents_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.documents_32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.folder_closed_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.folder_open_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.GreenOrb_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.GreenOrbFaded_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_folder_animation">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_folder_bodypart">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_folder_callingcard">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_folder_clothing">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_folder_favorite">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_folder_gesture">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_folder_inbox">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_folder_landmark">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_folder_lostandfound">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_folder_notecard">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_folder_object">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_folder_outfit">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_folder_plain_closed">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_folder_plain_open">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_folder_RLVa">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_folder_script">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_folder_snapshot">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_folder_sound">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_folder_sys">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_folder_texture">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_folder_trash">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_item_alpha">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_item_animation">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_item_attach">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_item_callingcard_offline">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_item_callingcard_online">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_item_clothing">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_item_eyes">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_item_gesture">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_item_gloves">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_item_hair">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_item_jacket">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_item_landmark">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_item_landmark_visited">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_item_notecard">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_item_object">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_item_object_multi">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_item_pants">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_item_physics">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_item_script">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_item_script_dangerous">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_item_shape">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_item_shirt">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_item_shoes">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_item_skin">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_item_skirt">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_item_snapshot">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_item_socks">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_item_sound">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_item_tattoo">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_item_texture">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_item_underpants">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.inv_item_undershirt">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.lsl_keywords">
             <summary>
               Looks up a localized string similar to # $Id$
            # sections
            [word .5, .1, .3]
            default 		Name of default state that all scripts must have
            state 			Keyword to indicate state block or state transition
            
            # data types
            [word .1, .3, .1]
            integer			Integer type
            float			Floating-point type
            string			String type
            key				Key type.  Use NULL_KEY to test for empty keys.
            vector			Vector type of 3 floats.  Used to represent 3D motion, Euler angles, and color.:Access components by .x, .y. or .z
            rotation		Rotation type of 4 floats.  Used to represent rota [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.lsl_scripts_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.map_dot">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.mic">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.my_map_pos">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.paste_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.ProgramName">
            <summary>
              Looks up a localized string similar to Radegast.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.radegast_icon">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.radegast_large">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.radegast_main_screen2">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.RadegastAuthor">
            <summary>
              Looks up a localized string similar to Radegast Development Team.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.RadegastTitle">
            <summary>
              Looks up a localized string similar to Radegast 2.7.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.status_buy_currency">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.status_health">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.status_no_build">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.status_no_fly">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.status_no_push">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.status_no_scripts">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.status_no_voice">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.status_script_debug">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.status_search">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.target_map_pos">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Radegast.Properties.Resources.UpdateCheckUri">
            <summary>
              Looks up a localized string similar to http://update.radegast.org/svc/get_latest.
            </summary>
        </member>
        <member name="F:Radegast.ntfSendLureRequest.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.ntfSendLureRequest.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.ntfSendLureRequest.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.frmPay.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.frmPay.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.frmPay.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.MasterTab.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.MasterTab.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.MasterTab.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.FriendsConsole.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.FriendsConsole.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.FriendsConsole.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.AttachmentTab.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.AttachmentTab.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.AttachmentTab.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Radegast.RadegastInstance.OnRadegastFormCreated(Radegast.RadegastForm)">
            <summary>
            Triggers the RadegastFormCreated event.
            </summary>
        </member>
        <member name="F:Radegast.RadegastInstance.StartupTimeUTC">
            <summary>
            When was Radegast started (UTC)
            </summary>
        </member>
        <member name="F:Radegast.RadegastInstance.WordTimeZone">
            <summary>
            Time zone of the current world (currently hard coded to US Pacific time)
            </summary>
        </member>
        <member name="F:Radegast.RadegastInstance.m_ClientChanged">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="M:Radegast.RadegastInstance.OnClientChanged(Radegast.ClientChangedEventArgs)">
            <summary>Raises the ClientChanged Event</summary>
             <param name="e">A ClientChangedEventArgs object containing
             the old and the new client</param>
        </member>
        <member name="F:Radegast.RadegastInstance.m_ClientChangedLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="F:Radegast.RadegastInstance.m_InventoryClipboardUpdated">
            <summary>The event subscribers, null of no subscribers</summary>
        </member>
        <member name="M:Radegast.RadegastInstance.OnInventoryClipboardUpdated(System.EventArgs)">
            <summary>Raises the InventoryClipboardUpdated Event</summary>
             <param name="e">A EventArgs object containing
             the old and the new client</param>
        </member>
        <member name="F:Radegast.RadegastInstance.m_InventoryClipboardUpdatedLock">
            <summary>Thread sync lock object</summary>
        </member>
        <member name="M:Radegast.RadegastInstance.getAvatarName(OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Fetches avatar name
            </summary>
            <param name="key">Avatar UUID</param>
            <param name="blocking">Should we wait until the name is retrieved</param>
            <returns>Avatar name</returns>
        </member>
        <member name="M:Radegast.RadegastInstance.getAvatarName(OpenMetaverse.UUID)">
            <summary>
            Fetches avatar name from cache, if not in cache will requst name from the server
            </summary>
            <param name="key">Avatar UUID</param>
            <returns>Avatar name</returns>
        </member>
        <member name="P:Radegast.RadegastInstance.Names">
            <summary>
            Manages retrieving avatar names
            </summary>
        </member>
        <member name="P:Radegast.RadegastInstance.UserDir">
            <summary>
            System (not grid!) user's dir
            </summary>
        </member>
        <member name="P:Radegast.RadegastInstance.ClientDir">
            <summary>
            Grid client's user dir for settings and logs
            </summary>
        </member>
        <member name="P:Radegast.RadegastInstance.GlobalSettings">
            <summary>
            Global settings for the entire application
            </summary>
        </member>
        <member name="P:Radegast.RadegastInstance.ClientSettings">
            <summary>
            Per client settings
            </summary>
        </member>
        <member name="P:Radegast.RadegastInstance.PluginManager">
            <summary> Handles loading plugins and scripts</summary>
        </member>
        <member name="P:Radegast.RadegastInstance.MediaManager">
            <summary>
            Radegast media manager for playing streams and in world sounds
            </summary>
        </member>
        <member name="P:Radegast.RadegastInstance.CommandsManager">
            <summary>
            Radegast command manager for executing textual console commands
            </summary>
        </member>
        <member name="P:Radegast.RadegastInstance.ContextActionManager">
            <summary>
            Radegast ContextAction manager for context sensitive actions
            </summary>
        </member>
        <member name="P:Radegast.RadegastInstance.Movement">
            <summary>
            Allows key emulation for moving avatar around
            </summary>
        </member>
        <member name="P:Radegast.RadegastInstance.InventoryClipboard">
            <summary>
            The last item that was cut or copied in the inventory, used for pasting
            in a different place on the inventory, or other places like profile
            that allow sending copied inventory items
            </summary>
        </member>
        <member name="P:Radegast.RadegastInstance.RLV">
            <summary>
            Manager for RLV functionality
            </summary>
        </member>
        <member name="P:Radegast.RadegastInstance.GridManger">
            <summary>Manages default params for different grids</summary>
        </member>
        <member name="P:Radegast.RadegastInstance.PlainColors">
            <summary>
            Is system using plain color theme, with white background and dark text
            </summary>
        </member>
        <member name="E:Radegast.RadegastInstance.ClientChanged">
            <summary>Raised when the GridClient object in the main Radegast instance is changed</summary>
        </member>
        <member name="E:Radegast.RadegastInstance.InventoryClipboardUpdated">
            <summary>Raised when the GridClient object in the main Radegast instance is changed</summary>
        </member>
        <member name="F:Radegast.Rendering.SceneWindow.upKeyHeldBeforeFly">
            <summary>
            The time before we fly instead of trying to jump (in seconds)
            </summary>
        </member>
        <member name="F:Radegast.Rendering.SceneWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.Rendering.SceneWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.Rendering.SceneWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.Rendering.SceneWindow.glControl">
            <summary>
            The OpenGL surface
            </summary>
        </member>
        <member name="F:Radegast.Rendering.SceneWindow.UseMultiSampling">
            <summary>
            Use multi sampling (anti aliasing)
            </summary>
        </member>
        <member name="F:Radegast.Rendering.SceneWindow.RenderingEnabled">
            <summary>
            Is rendering engine ready and enabled
            </summary>
        </member>
        <member name="F:Radegast.Rendering.SceneWindow.Wireframe">
            <summary>
            Rednder in wireframe mode
            </summary>
        </member>
        <member name="F:Radegast.Rendering.SceneWindow.Prims">
            <summary>
            List of prims in the scene
            </summary>
        </member>
        <member name="F:Radegast.Rendering.SceneWindow.CacheDecodedTextures">
            <summary>
            Cache images after jpeg2000 decode. Uses a lot of disk space and can cause disk trashing
            </summary>
        </member>
        <member name="F:Radegast.Rendering.SceneWindow.Viewport">
            <summary>
            Size of OpenGL window we're drawing on
            </summary>
        </member>
        <member name="M:Radegast.Rendering.SceneWindow.IsAttached(System.UInt32)">
            <summary>
            Gets attachment state of a prim
            </summary>
            <param name="parentLocalID">Prim's parent id</param>
            <returns>True, if prim is part of an attachment</returns>
        </member>
        <member name="M:Radegast.Rendering.SceneWindow.PrimPosAndRot(Radegast.Rendering.SceneObject,OpenMetaverse.Vector3@,OpenMetaverse.Quaternion@)">
            <summary>
            Calculates finar rendering position for objects on the scene
            </summary>
            <param name="obj">SceneObject whose position is calculated</param>
            <param name="pos">Rendering position</param>
            <param name="rot">Rendering rotation</param>
        </member>
        <member name="M:Radegast.Rendering.SceneWindow.FindClosestDistanceSquared(OpenMetaverse.Vector3,Radegast.Rendering.SceneObject)">
            <summary>
            Finds the closest distance between the given pos and an object
            (Assumes that the object is a box slightly)
            </summary>
            <param name="vector3"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Radegast.Rendering.SceneWindow.StartShiny">
            <summary>
            Select shiny shader as the current shader
            </summary>
        </member>
        <member name="M:Radegast.Rendering.SceneWindow.ctxObjects_Opening(System.Object,System.ComponentModel.CancelEventArgs)">
            <summary>
            Dynamically construct the context menu when we right click on the screen
            </summary>
            <param name="csender"></param>
            <param name="ce"></param>
        </member>
        <member name="P:Radegast.Rendering.SceneWindow.DrawDistance">
            <summary>
            Object from up to this distance from us will be rendered
            </summary>
        </member>
        <member name="F:Radegast.ntfInventoryOffer.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.ntfInventoryOffer.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.ntfInventoryOffer.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.MuteResidentForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.MuteResidentForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.MuteResidentForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.SLImageHandler.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.SLImageHandler.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.SLImageHandler.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.Landmark.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.Landmark.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.Landmark.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.MapConsole.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.MapConsole.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.MapConsole.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.GroupDetails.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.GroupDetails.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.GroupDetails.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.MapControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.MapControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.MapControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Radegast.PluginInfo">
            <summary>
            Information about loaded plugin
            </summary>
        </member>
        <member name="P:Radegast.PluginInfo.FileName">
            <summary>File name from which the plugin was loaded, cannot load plugin twice from the same file</summary>
        </member>
        <member name="P:Radegast.PluginInfo.Plugin">
            <summary>Plugin class</summary>
        </member>
        <member name="P:Radegast.PluginInfo.Started">
            <summary>Is plugin started</summary>
        </member>
        <member name="P:Radegast.PluginInfo.Attribures">
            <summary>Plugin class</summary>
        </member>
        <member name="T:Radegast.PluginManager">
            <summary>
            Handles loading Radegast plugins
            </summary>
        </member>
        <member name="F:Radegast.PluginManager.PluginBlackList">
            <summary>List of files that should not be scanned for plugins</summary>
        </member>
        <member name="F:Radegast.PluginManager.AllowedPluginExtensions">
            <summary>List of file extensions that could potentially hold plugins</summary>
        </member>
        <member name="M:Radegast.PluginManager.#ctor(Radegast.RadegastInstance)">
            <summary>
            Creates new PluginManager
            </summary>
            <param name="instance">Radegast instance PluginManager is associated with</param>
        </member>
        <member name="M:Radegast.PluginManager.Dispose">
            <summary>
            Unloads all plugins
            </summary>
        </member>
        <member name="M:Radegast.PluginManager.UnloadPlugin(Radegast.PluginInfo)">
            <summary>
            Unloads a plugin
            </summary>
            <param name="plug">Plugin to unload</param>
        </member>
        <member name="M:Radegast.PluginManager.GetAttributes(Radegast.IRadegastPlugin)">
            <summary>
            Gets extended atributes for plugin
            </summary>
            <param name="plug">Plugin to lookup extra attributes</param>
            <returns>Extended atributes for plugin</returns>
        </member>
        <member name="M:Radegast.PluginManager.StartPlugins">
            <summary>
            Starts all loaded plugins
            </summary>
        </member>
        <member name="M:Radegast.PluginManager.LoadPluginFile(System.String,System.Boolean)">
            <summary>
            Loads a plugin for a precompiled assembly or source file
            </summary>
            <param name="loadFileName">File to load</param>
            <param name="stratPlugins">Start plugins that are found in the assembly</param>
        </member>
        <member name="M:Radegast.PluginManager.ScanAndLoadPlugins">
            <summary>
            Scans and load plugins from Radegast application folder without starting them
            </summary>
        </member>
        <member name="M:Radegast.PluginManager.LoadCSharpScriptFile(System.String,System.Boolean)">
            <summary>
            Loads and compiles a plugin from a C# source file
            </summary>
            <param name="fileName">Load plugin from this filename</param>
            <param name="startPlugins">Start plugins found in the assembly after complilation</param>
        </member>
        <member name="M:Radegast.PluginManager.LoadCSharpScript(System.String,System.String,System.Boolean)">
            <summary>
            Compiles plugin from string source code
            </summary>
            <param name="fileName">File name from which source was loaded</param>
            <param name="code">Source code</param>
            <param name="startPlugins">Start plugins found in the assembly after complilation</param>
        </member>
        <member name="M:Radegast.PluginManager.LoadAssembly(System.String,System.Reflection.Assembly,System.Boolean)">
            <summary>
            Scans assembly for supported types
            </summary>
            <param name="loadfilename">File name from which assembly was loaded</param>
            <param name="assembly">Assembly to scan for supported types</param>
            <param name="startPlugins">Start plugins found in the assembly after complilation</param>
        </member>
        <member name="P:Radegast.PluginManager.Plugins">
            <summary>
            Gets the list of currently loaded plugins
            </summary>
        </member>
        <member name="M:Radegast.Media.MediaManager.CommandLoop">
            <summary>
            Thread that processes FMOD calls.
            </summary>
        </member>
        <member name="M:Radegast.Media.MediaManager.InitFMOD">
            <summary>
            Initialize the FMOD sound system.
            </summary>
        </member>
        <member name="M:Radegast.Media.MediaManager.ListenerUpdate">
            <summary>
            Thread to update listener position and generally keep
            FMOD up to date.
            </summary>
        </member>
        <member name="M:Radegast.Media.MediaManager.Sound_SoundTrigger(System.Object,OpenMetaverse.SoundTriggerEventArgs)">
            <summary>
            Handle request to play a sound, which might (or mioght not) have been preloaded.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Radegast.Media.MediaManager.Sound_AttachedSound(System.Object,OpenMetaverse.AttachedSoundEventArgs)">
            <summary>
            Handle sound attached to an object
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Radegast.Media.MediaManager.Sound_PreloadSound(System.Object,OpenMetaverse.PreloadSoundEventArgs)">
            <summary>
            Handle request to preload a sound for playing later.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Radegast.Media.MediaManager.Objects_ObjectUpdate(System.Object,OpenMetaverse.PrimEventArgs)">
            <summary>
            Handle object updates, looking for sound events
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Radegast.Media.MediaManager.Objects_KillObject(System.Object,OpenMetaverse.KillObjectEventArgs)">
            <summary>
            Handle deletion of a noise-making object
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Radegast.Media.MediaManager.HandleObjectSound(OpenMetaverse.Primitive,OpenMetaverse.Simulator)">
            <summary>
            Common object sound processing for various Update events
            </summary>
            <param name="p"></param>
            <param name="s"></param>
        </member>
        <member name="F:Radegast.Media.MediaManager.UIVolume">
            <summary>
            UI sounds volume
            </summary>
        </member>
        <member name="M:Radegast.Media.MediaManager.Network_SimChanged(System.Object,OpenMetaverse.SimChangedEventArgs)">
            <summary>
            Watch for Teleports to cancel all the old sounds
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Radegast.Media.MediaManager.PlayUISound(OpenMetaverse.UUID)">
            <summary>
            Plays a sound
            </summary>
            <param name="sound">UUID of the sound to play</param>
        </member>
        <member name="P:Radegast.Media.MediaManager.SoundSystemAvailable">
            <summary>
            Indicated wheather spund sytem is ready for use
            </summary>
        </member>
        <member name="P:Radegast.Media.MediaManager.ObjectVolume">
            <summary>
            Control the volume of all inworld sounds
            </summary>
        </member>
        <member name="P:Radegast.Media.MediaManager.ObjectEnable">
            <summary>
            Enable and Disable inworld sounds
            </summary>
        </member>
        <member name="F:Radegast.SearchConsole.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.SearchConsole.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.SearchConsole.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.PluginsTab.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.PluginsTab.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.PluginsTab.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Radegast.RadegastContextMenuStrip">
             <summary>
             A Radegast based ContextMenuStrip
               the Opened/Closing/Selected/Clicked events may be subscribed to by plugins
             This class is our Drop In replacement that add accessablity features to context menus
             
             To use:  
               1) In the 'Forms designer', intially drag in or use a ContextMenuStrip
               2) The replace the declared type and constructor with this class in the MyForm.Designer.cs
               3) Pretend it is a typical ContextMenuStrip
             
             To hook:
             
             <pre>
            public class TestContextMenuOpen
            {
                static TestContextMenuOpen testContextMenu = new TestContextMenuOpen();
                private RadegastContextMenuStrip TheirInterest;
                TestContextMenuOpen()
                {
                    RadegastContextMenuStrip.OnContentMenuOpened += Test_OnContentMenuOpened;
                    RadegastContextMenuStrip.OnContentMenuItemSelected += Test_OnContentMenuItemSelected;
                    RadegastContextMenuStrip.OnContentMenuItemClicked += Test_OnContentMenuItemClicked;
                    RadegastContextMenuStrip.OnContentMenuClosing += Test_OnContentMenuClosing;
                }
            
                private void Test_OnContentMenuItemClicked(object sender, RadegastContextMenuStrip.ContextMenuEventArgs e)
                {
                    Console.WriteLine("I hope you meant to " + e.MenuItem.Text + "  " + e.Selection + "!");
                    if (!e.MenuItem.Enabled)
                    {
                        Console.WriteLine("If not do not worry it was not enabled ");
                    }
                }
            
                private void Test_OnContentMenuItemSelected(object sender, RadegastContextMenuStrip.ContextMenuEventArgs e)
                {
                    lock (testContextMenu)
                    {
                        if (e.MenuItem == null)
                        {
                            Console.WriteLine("The last menu selection is not hightlighted by the mouse anymore so do not click");
                        }
                        else if (!e.MenuItem.Enabled)
                        {
                            Console.WriteLine("You cannot " + e.MenuItem.Text + " at this time to " + e.Selection);
                        }
                        else
                        {
                            Console.WriteLine("You can " + e.MenuItem.Text + " " + e.Selection + " if you press enter or click");
                        }
                    }
                }
            
                private void Test_OnContentMenuClosing(object sender, RadegastContextMenuStrip.ContextMenuEventArgs e)
                {
                    lock (testContextMenu)
                    {
                        Console.WriteLine("You can no longer see the Menu: " + TheirInterest);
                        TheirInterest = null;
                    }
                }
            
                private void Test_OnContentMenuOpened(object sender, RadegastContextMenuStrip.ContextMenuEventArgs e)
                {
                    lock (testContextMenu)
                    {
                        TheirInterest = e.Menu;
                        Console.WriteLine("You are looking at Menu: " + TheirInterest);
                        Console.WriteLine("The Item you are going to do something to is: " + e.Selection);
                        foreach (var item in e.Menu.AllChoices())
                            if (item.Enabled)
                                Console.WriteLine(" You can: " + item.Text);
                            else
                                Console.WriteLine(" cannot: " + item.Text);
                    }
                }
            }     
             </pre>  
             </summary>
        </member>
        <member name="F:Radegast.RadegastContextMenuStrip.HasSelection">
            <summary>
            If the context menu has a valid target
            </summary>
        </member>
        <member name="F:Radegast.RadegastContextMenuStrip.Selection">
            <summary>
            The target of the ContextMenu
            </summary>
        </member>
        <member name="F:Radegast.RadegastContextMenuStrip.MenuItem">
            <summary>
            The MenuItem Currently Highlighted/Selected
            </summary>
        </member>
        <member name="F:Radegast.RadegastContextMenuStrip._selectionLock">
            <summary>
            Locking arround changing the MenuItem
            </summary>
        </member>
        <member name="F:Radegast.RadegastContextMenuStrip.KnownItems">
            <summary>
            Childs we have added our hooks into
            </summary>
        </member>
        <member name="M:Radegast.RadegastContextMenuStrip.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the System.Windows.Forms.ContextMenuStrip class and associates it with the specified container.
            </summary>
            <param name="components">A component that implements System.ComponentModel.IContainer that is the container of the System.Windows.Forms.ContextMenuStrip</param>
        </member>
        <member name="M:Radegast.RadegastContextMenuStrip.#ctor">
            <summary>
            Initializes a new instance of the System.Windows.Forms.ContextMenuStrip class.
            </summary>
        </member>
        <member name="M:Radegast.RadegastContextMenuStrip.RegisterEvents">
            <summary>
            Events we need on the ContextMenuStrip
            </summary>
        </member>
        <member name="M:Radegast.RadegastContextMenuStrip.SetMenuItemSelected(System.Object)">
            <summary>
            This main site that all clues hit for selection changing events
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Radegast.RadegastContextMenuStrip.RegisterItemEvents(System.Windows.Forms.ToolStripDropDownItem)">
            <summary>
            Events we need on the ToolStripDropDownItem
            </summary>
        </member>
        <member name="E:Radegast.RadegastContextMenuStrip.OnContentMenuOpening">
            <summary>
            Fires whenever a context menu is "Opening" (not yet opened) anywhere from Radegast
              Accesability should be more interested in OnContentMenuOpened
              This is for times context menus are busy deciding what to enable/disable
            </summary>
        </member>
        <member name="E:Radegast.RadegastContextMenuStrip.OnContentMenuOpened">
            <summary>
            Fires whenever a context menu is "Opened" anywhere from Radegast
            </summary>
        </member>
        <member name="E:Radegast.RadegastContextMenuStrip.OnContentMenuClosing">
            <summary>
            Fires whenever a context menu is "Closing" anywhere from Radegast
            </summary>
        </member>
        <member name="E:Radegast.RadegastContextMenuStrip.OnContentMenuItemSelected">
            <summary>
            Fires whenever a context menu item is "Selected" (Hightlighted) anywhere from Radegast
            </summary>
        </member>
        <member name="E:Radegast.RadegastContextMenuStrip.OnContentMenuItemClicked">
            <summary>
            Fires whenever a context menu item is "Clicked" anywhere from Radegast
            </summary>
        </member>
        <member name="T:Radegast.RadegastContextMenuStrip.ContextMenuCallback">
            <summary>
            MenuEventArgs e.Menu contains the reference to the RadegastContextMenuStrip 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Radegast.RadegastContextMenuStrip.ContextMenuEventArgs">
            <summary>
            Arguments for tab events
            </summary>
        </member>
        <member name="F:Radegast.RadegastContextMenuStrip.ContextMenuEventArgs.Menu">
            <summary>
            Menu that was manipulated in the event
            </summary>
        </member>
        <member name="F:Radegast.RadegastContextMenuStrip.ContextMenuEventArgs.MenuItem">
            <summary>
            The Menu Item that was clicked or selected on the System.Windows.Forms.ToolStrip
            </summary>
        </member>
        <member name="F:Radegast.RadegastContextMenuStrip.ContextMenuEventArgs.Selection">
            <summary>
            The object (like AvatarListItem) that the context menu was/is targeting
            </summary>
        </member>
        <member name="F:Radegast.InventoryConsole.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.InventoryConsole.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.InventoryConsole.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Radegast.InventoryConsole.ItemLabel(OpenMetaverse.InventoryBase,System.Boolean)">
            <summary>
            Returns text of the label
            </summary>
            <param name="invBase">Inventory item</param>
            <param name="returnRaw">Should we return raw text, or if false decorated text with (worn) info, and (no copy) etc. permission info</param>
            <returns></returns>
        </member>
        <member name="M:Radegast.InventoryConsole.SelectInventoryNode(OpenMetaverse.UUID)">
            <summary>
            Finds and higlights inventory node
            </summary>
            <param name="itemID">Inventory of ID of the item to select</param>
        </member>
        <member name="F:Radegast.Guesture.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.Guesture.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.Guesture.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.ConferenceIMTabWindow.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.ConferenceIMTabWindow.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.ConferenceIMTabWindow.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Radegast.PluginAttribute">
            <summary>
            Metadata about Radegast Plugins
            </summary>
        </member>
        <member name="F:Radegast.PluginAttribute.Name">
            <summary>Plugin short name</summary>
        </member>
        <member name="F:Radegast.PluginAttribute.Description">
            <summary>Plugin description</summary>
        </member>
        <member name="F:Radegast.PluginAttribute.Version">
            <summary>Plugin version</summary>
        </member>
        <member name="F:Radegast.frmReconnect.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.frmReconnect.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.frmReconnect.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.DisplayNameChange.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.DisplayNameChange.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.DisplayNameChange.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Radegast.VoiceConsole.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.VoiceConsole.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.VoiceConsole.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Radegast.VoiceConsole.RadegastContextMenuStrip_OnContentMenuOpened(System.Object,Radegast.RadegastContextMenuStrip.ContextMenuEventArgs)">
            <summary>
            Open context menu for voice items
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Radegast.VoiceConsole.participants_MouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Right-clicks on participants beings up Mute, etc menu
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Radegast.VoiceConsole.btnUnmuteAll_Click(System.Object,System.EventArgs)">
            <summary>
            UnMute all participants
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Radegast.VoiceConsole.btnMuteAll_Click(System.Object,System.EventArgs)">
            <summary>
            Mute all participants
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Radegast.VoiceConsole.chkVoiceEnable_Click(System.Object,System.EventArgs)">
            <summary>
            Start and stop the voice functions.
            </summary>
        </member>
        <member name="M:Radegast.ExtendedRichTextBox.HideCaret(System.IntPtr)">
            <summary>
            The HideCaret function removes the caret from the screen.
            </summary>
        </member>
        <member name="M:Radegast.ExtendedRichTextBox.GetScrollInfo(System.Runtime.InteropServices.HandleRef,System.Int32,Radegast.ExtendedRichTextBox.SCROLLINFO@)">
            <summary>
            This will find the scroll position of the specified window.
            </summary>
            <param name="hWnd">the window to send the message to</param>
            <param name="nBar">the number of the sroll bar to look at</param>
            <returns></returns>
        </member>
        <member name="M:Radegast.ExtendedRichTextBox.BeginUpdate">
            <summary>
            Maintains performance while updating.
            </summary>
            <remarks>
            <para>
            It is recommended to call this method before doing
            any major updates that you do not wish the user to
            see. Remember to call EndUpdate when you are finished
            with the update. Nested calls are supported.
            </para>
            <para>
            Calling this method will prevent redrawing. It will
            also setup the event mask of the underlying richedit
            control so that no events are sent.
            </para>
            </remarks>
        </member>
        <member name="M:Radegast.ExtendedRichTextBox.EndUpdate">
            <summary>
            Resumes drawing and event handling.
            </summary>
            <remarks>    
            This method should be called every time a call is made
            made to BeginUpdate. It resets the event mask to it's
            original value and enables redrawing of the control.
            </remarks>
        </member>
        <member name="M:Radegast.ExtendedRichTextBox.ScrollToBottom">
            <summary>
            This scrolls the scroll bar down to the bottom of the window.
            </summary>
        </member>
        <member name="M:Radegast.ExtendedRichTextBox.ScrollPageUp">
            <summary>
            Scrolls the data up one page.
            </summary>
        </member>
        <member name="M:Radegast.ExtendedRichTextBox.ScrollPageDown">
            <summary>
            Scrolls the data down one page.
            </summary>
        </member>
        <member name="M:Radegast.ExtendedRichTextBox.ScrollLineUp(System.Int32)">
            <summary>
            Scrolls the data up one page.
            </summary>
        </member>
        <member name="M:Radegast.ExtendedRichTextBox.ScrollLineDown(System.Int32)">
            <summary>
            Scrolls the data down one page.
            </summary>
        </member>
        <member name="M:Radegast.ExtendedRichTextBox.AppendRtf(System.String)">
            <summary>
            Assumes the string passed as a paramter is valid RTF text and attempts
            to append it as RTF to the content of the control.
            </summary>
            <param name="_rtf"></param>
        </member>
        <member name="M:Radegast.ExtendedRichTextBox.InsertRtf(System.String)">
            <summary>
            Assumes that the string passed as a parameter is valid RTF text and
            attempts to insert it as RTF into the content of the control.
            </summary>
            <remarks>
            NOTE: The text is inserted wherever the caret is at the time of the call,
            and if any text is selected, that text is replaced.
            </remarks>
            <param name="_rtf"></param>
        </member>
        <member name="M:Radegast.ExtendedRichTextBox.AppendTextAsRtf(System.String)">
            <summary>
            Appends the text using the current font, text, and highlight colors.
            </summary>
            <param name="_text"></param>
        </member>
        <member name="M:Radegast.ExtendedRichTextBox.AppendTextAsRtf(System.String,System.Drawing.Font)">
            <summary>
            Appends the text using the given font, and current text and highlight
            colors.
            </summary>
            <param name="_text"></param>
            <param name="_font"></param>
        </member>
        <member name="M:Radegast.ExtendedRichTextBox.AppendTextAsRtf(System.String,System.Drawing.Font,Radegast.RtfColor)">
            <summary>
            Appends the text using the given font and text color, and the current
            highlight color.
            </summary>
            <param name="_text"></param>
            <param name="_font"></param>
            <param name="_color"></param>
        </member>
        <member name="M:Radegast.ExtendedRichTextBox.AppendTextAsRtf(System.String,System.Drawing.Font,Radegast.RtfColor,Radegast.RtfColor)">
            <summary>
            Appends the text using the given font, text, and highlight colors. Simply
            moves the caret to the end of the RichTextBox's text and makes a call to
            insert.
            </summary>
            <param name="_text"></param>
            <param name="_font"></param>
            <param name="_textColor"></param>
            <param name="_backColor"></param>
        </member>
        <member name="M:Radegast.ExtendedRichTextBox.InsertTextAsRtf(System.String)">
            <summary>
            Inserts the text using the current font, text, and highlight colors.
            </summary>
            <param name="_text"></param>
        </member>
        <member name="M:Radegast.ExtendedRichTextBox.InsertTextAsRtf(System.String,System.Drawing.Font)">
            <summary>
            Inserts the text using the given font, and current text and highlight
            colors.
            </summary>
            <param name="_text"></param>
            <param name="_font"></param>
        </member>
        <member name="M:Radegast.ExtendedRichTextBox.InsertTextAsRtf(System.String,System.Drawing.Font,Radegast.RtfColor)">
            <summary>
            Inserts the text using the given font and text color, and the current
            highlight color.
            </summary>
            <param name="_text"></param>
            <param name="_font"></param>
            <param name="_color"></param>
        </member>
        <member name="M:Radegast.ExtendedRichTextBox.InsertTextAsRtf(System.String,System.Drawing.Font,Radegast.RtfColor,Radegast.RtfColor)">
             <summary>
             Inserts the text using the given font, text, and highlight colors. The
             text is wrapped in RTF codes so that the specified formatting is kept.
             You can only assign valid RTF to the RichTextBox.Rtf property, else
             an exception is thrown. The RTF string should follow this format ...
            
             {\rtf1\ansi\ansicpg1252\deff0\deflang1033{\fonttbl{[FONTS]}{\colortbl ;[COLORS]}}
             \viewkind4\uc1\pard\cf1\f0\fs20 [DOCUMENT AREA] }
            
             </summary>
             <remarks>
             NOTE: The text is inserted wherever the caret is at the time of the call,
             and if any text is selected, that text is replaced.
             </remarks>
             <param name="_text"></param>
             <param name="_font"></param>
             <param name="_color"></param>
             <param name="_color"></param>
        </member>
        <member name="M:Radegast.ExtendedRichTextBox.GetDocumentArea(System.String,System.Drawing.Font)">
             <summary>
             Creates the Document Area of the RTF being inserted. The document area
             (in this case) consists of the text being added as RTF and all the
             formatting specified in the Font object passed in. This should have the
             form ...
            
             \viewkind4\uc1\pard\cf1\f0\fs20 [DOCUMENT AREA] }
            
             </summary>
             <param name="_text"></param>
             <param name="_font"></param>
             <returns>
             The document area as a string.
             </returns>
        </member>
        <member name="M:Radegast.ExtendedRichTextBox.InsertImage(System.Drawing.Image)">
             <summary>
             Inserts an image into the RichTextBox. The image is wrapped in a Windows
             Format Metafile, because although Microsoft discourages the use of a WMF,
             the RichTextBox (and even MS Word), wraps an image in a WMF before inserting
             the image into a document. The WMF is attached in HEX format (a string of
             HEX numbers).
            
             The RTF Specification v1.6 says that you should be able to insert bitmaps,
             .jpegs, .gifs, .pngs, and Enhanced Metafiles (.emf) directly into an RTF
             document without the WMF wrapper. This works fine with MS Word,
             however, when you don't wrap images in a WMF, WordPad and
             RichTextBoxes simply ignore them. Both use the riched20.dll or msfted.dll.
             </summary>
             <remarks>
             NOTE: The image is inserted wherever the caret is at the time of the call,
             and if any text is selected, that text is replaced.
             </remarks>
             <param name="_image"></param>
        </member>
        <member name="M:Radegast.ExtendedRichTextBox.GetImagePrefix(System.Drawing.Image)">
             <summary>
             Creates the RTF control string that describes the image being inserted.
             This description (in this case) specifies that the image is an
             MM_ANISOTROPIC metafile, meaning that both X and Y axes can be scaled
             independently. The control string also gives the images current dimensions,
             and its target dimensions, so if you want to control the size of the
             image being inserted, this would be the place to do it. The prefix should
             have the form ...
            
             {\pict\wmetafile8\picw[A]\pich[B]\picwgoal[C]\pichgoal[D]
            
             where ...
            
             A    = current width of the metafile in hundredths of millimeters (0.01mm)
                    = Image Width in Inches * Number of (0.01mm) per inch
                    = (Image Width in Pixels / Graphics Context's Horizontal Resolution) * 2540
                    = (Image Width in Pixels / Graphics.DpiX) * 2540
            
             B    = current height of the metafile in hundredths of millimeters (0.01mm)
                    = Image Height in Inches * Number of (0.01mm) per inch
                    = (Image Height in Pixels / Graphics Context's Vertical Resolution) * 2540
                    = (Image Height in Pixels / Graphics.DpiX) * 2540
            
             C    = target width of the metafile in twips
                    = Image Width in Inches * Number of twips per inch
                    = (Image Width in Pixels / Graphics Context's Horizontal Resolution) * 1440
                    = (Image Width in Pixels / Graphics.DpiX) * 1440
            
             D    = target height of the metafile in twips
                    = Image Height in Inches * Number of twips per inch
                    = (Image Height in Pixels / Graphics Context's Horizontal Resolution) * 1440
                    = (Image Height in Pixels / Graphics.DpiX) * 1440
                
             </summary>
             <remarks>
             The Graphics Context's resolution is simply the current resolution at which
             windows is being displayed. Normally it's 96 dpi, but instead of assuming
             I just added the code.
            
             According to Ken Howe at pbdr.com, "Twips are screen-independent units
             used to ensure that the placement and proportion of screen elements in
             your screen application are the same on all display systems."
            
             Units Used
             ----------
             1 Twip = 1/20 Point
             1 Point = 1/72 Inch
             1 Twip = 1/1440 Inch
            
             1 Inch = 2.54 cm
             1 Inch = 25.4 mm
             1 Inch = 2540 (0.01)mm
             </remarks>
             <param name="_image"></param>
             <returns></returns>
        </member>
        <member name="M:Radegast.ExtendedRichTextBox.GdipEmfToWmfBits(System.IntPtr,System.UInt32,System.Byte[],System.Int32,Radegast.ExtendedRichTextBox.EmfToWmfBitsFlags)">
            <summary>
            Use the EmfToWmfBits function in the GDI+ specification to convert a
            Enhanced Metafile to a Windows Metafile
            </summary>
            <param name="_hEmf">
            A handle to the Enhanced Metafile to be converted
            </param>
            <param name="_bufferSize">
            The size of the buffer used to store the Windows Metafile bits returned
            </param>
            <param name="_buffer">
            An array of bytes used to hold the Windows Metafile bits returned
            </param>
            <param name="_mappingMode">
            The mapping mode of the image. This control uses MM_ANISOTROPIC.
            </param>
            <param name="_flags">
            Flags used to specify the format of the Windows Metafile returned
            </param>
        </member>
        <member name="M:Radegast.ExtendedRichTextBox.GetRtfImage(System.Drawing.Image)">
            <summary>
            Wraps the image in an Enhanced Metafile by drawing the image onto the
            graphics context, then converts the Enhanced Metafile to a Windows
            Metafile, and finally appends the bits of the Windows Metafile in HEX
            to a string and returns the string.
            </summary>
            <param name="_image"></param>
            <returns>
            A string containing the bits of a Windows Metafile in HEX
            </returns>
        </member>
        <member name="M:Radegast.ExtendedRichTextBox.GetFontTable(System.Drawing.Font)">
             <summary>
             Creates a font table from a font object. When an Insert or Append
             operation is performed a font is either specified or the default font
             is used. In any case, on any Insert or Append, only one font is used,
             thus the font table will always contain a single font. The font table
             should have the form ...
            
             {\fonttbl{\f0\[FAMILY]\fcharset0 [FONT_NAME];}
             </summary>
             <param name="_font"></param>
             <returns></returns>
        </member>
        <member name="M:Radegast.ExtendedRichTextBox.GetColorTable(Radegast.RtfColor,Radegast.RtfColor)">
             <summary>
             Creates a font table from the RtfColor structure. When an Insert or Append
             operation is performed, _textColor and _backColor are either specified
             or the default is used. In any case, on any Insert or Append, only three
             colors are used. The default color of the RichTextBox (signified by a
             semicolon (;) without a definition), is always the first color (index 0) in
             the color table. The second color is always the text color, and the third
             is always the highlight color (color behind the text). The color table
             should have the form ...
            
             {\colortbl ;[TEXT_COLOR];[HIGHLIGHT_COLOR];}
            
             </summary>
             <param name="_textColor"></param>
             <param name="_backColor"></param>
             <returns></returns>
        </member>
        <member name="M:Radegast.ExtendedRichTextBox.RemoveBadChars(System.String)">
            <summary>
            Called by overrided RichTextBox.Rtf accessor.
            Removes the null character from the RTF. This is residue from developing
            the control for a specific instant messaging protocol and can be ommitted.
            </summary>
            <param name="_originalRtf"></param>
            <returns>RTF without null character</returns>
        </member>
        <member name="P:Radegast.ExtendedRichTextBox.SelectionUnderlineStyle">
            <summary>
            Gets or sets the underline style to apply to the current selection or insertion point.
            </summary>
            <value>A <see cref="T:Radegast.UnderlineStyle"/> that represents the underline style to
            apply to the current text selection or to text entered after the insertion point.</value>
        </member>
        <member name="P:Radegast.ExtendedRichTextBox.SelectionUnderlineColor">
            <summary>
            Gets or sets the underline color to apply to the current selection or insertion point.
            </summary>    
            <value>A <see cref="T:Radegast.UnderlineColor"/> that represents the underline color to
            apply to the current text selection or to text entered after the insertion point.</value>
        </member>
        <member name="P:Radegast.ExtendedRichTextBox.Updating">
            <summary>
            Returns if updates to the controls are under way with BeginUpdate
            </summary>
        </member>
        <member name="P:Radegast.ExtendedRichTextBox.VerticalScrollInformation">
            <summary>
            This is the information associated with the scroll bar, showing it's position
            and other details.
            </summary>
            <value>the scroll bar information</value>
        </member>
        <member name="T:Radegast.ExtendedRichTextBox.CHARFORMAT">
            <summary>
            Contains information about character formatting in a rich edit control.
            </summary>
            <remarks><see cref="T:Radegast.ExtendedRichTextBox.CHARFORMAT"/> works with all Rich Edit versions.</remarks>
        </member>
        <member name="T:Radegast.ExtendedRichTextBox.CHARFORMAT2">
            <summary>
            Contains information about character formatting in a rich edit control.
            </summary>
            <remarks><see cref="T:Radegast.ExtendedRichTextBox.CHARFORMAT2"/> requires Rich Edit 2.0.</remarks>
        </member>
        <member name="T:Radegast.ExtendedRichTextBox.PARAFORMAT">
            <summary>
            Contains information about paragraph formatting in a rich edit control.
            </summary>
            <remarks><see cref="T:Radegast.ExtendedRichTextBox.PARAFORMAT"/> works with all Rich Edit versions.</remarks>
        </member>
        <member name="T:Radegast.ExtendedRichTextBox.PARAFORMAT2">
            <summary>
            Contains information about paragraph formatting in a rich edit control.
            </summary>
            <remarks><see cref="T:Radegast.ExtendedRichTextBox.PARAFORMAT2"/> requires Rich Edit 2.0.</remarks>
        </member>
        <member name="T:Radegast.ExtendedRichTextBox.SCROLLINFO">
            <summary>
            Contains information the scroll bar positions.
            </summary>
            <remarks><see cref="T:Radegast.ExtendedRichTextBox.PARAFORMAT"/> works with all Rich Edit versions.</remarks>
        </member>
        <member name="F:Radegast.RRichTextBox.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.RRichTextBox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.RRichTextBox.InsertLink(System.String)">
            <summary>
            Insert a given text as a link into the RichTextBox at the current insert position.
            </summary>
            <param name="text">Text to be inserted</param>
        </member>
        <member name="M:Radegast.RRichTextBox.InsertLink(System.String,System.Int32)">
            <summary>
            Insert a given text at a given position as a link. 
            </summary>
            <param name="text">Text to be inserted</param>
            <param name="position">Insert position</param>
        </member>
        <member name="M:Radegast.RRichTextBox.InsertLink(System.String,System.String)">
            <summary>
            Insert a given text at at the current input position as a link.
            The link text is followed by a hash (#) and the given hyperlink text, both of
            them invisible.
            When clicked on, the whole link text and hyperlink string are given in the
            LinkClickedEventArgs.
            </summary>
            <param name="text">Text to be inserted</param>
            <param name="hyperlink">Invisible hyperlink string to be inserted</param>
        </member>
        <member name="M:Radegast.RRichTextBox.InsertLink(System.String,System.String,System.Int32)">
            <summary>
            Insert a given text at a given position as a link. The link text is followed by
            a hash (#) and the given hyperlink text, both of them invisible.
            When clicked on, the whole link text and hyperlink string are given in the
            LinkClickedEventArgs.
            </summary>
            <param name="text">Text to be inserted</param>
            <param name="hyperlink">Invisible hyperlink string to be inserted</param>
            <param name="position">Insert position</param>
        </member>
        <member name="M:Radegast.RRichTextBox.SetSelectionLink(System.Boolean)">
            <summary>
            Set the current selection's link style
            </summary>
            <param name="link">true: set link style, false: clear link style</param>
        </member>
        <member name="M:Radegast.RRichTextBox.GetSelectionLink">
            <summary>
            Get the link style for the current selection
            </summary>
            <returns>0: link style not set, 1: link style set, -1: mixed</returns>
        </member>
        <member name="M:Radegast.RRichTextBox.GetScrollPos">
            <summary>
            Sends a win32 message to get the scrollbars' position.
            </summary>
            <returns>a POINT structre containing horizontal
                  and vertical scrollbar position.</returns>
        </member>
        <member name="M:Radegast.RRichTextBox.SetScrollPos(Radegast.RRichTextBox.Win32.POINT)">
            <summary>
            Sends a win32 message to set scrollbars position.
            </summary>
            <param name="point">a POINT
                   conatining H/Vscrollbar scrollpos.</param>
        </member>
        <member name="T:Radegast.RRichTextBox.Win32">
            <summary>
            Summary description for Win32.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Radegast.ContextActionsManager.RegisterContextAction(System.Type,System.String,System.EventHandler)" -->
        <!-- Badly formed XML comment ignored for member "M:Radegast.ContextActionsManager.DeregisterContextAction(System.Type,System.String)" -->
        <member name="M:Radegast.ContextActionsManager.DeregisterContextAction(Radegast.IContextAction)">
            <summary>
            Register a Context Action 
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Radegast.ContextActionsManager.AddContributions(System.Windows.Forms.ToolStripDropDown,System.Object)">
            <summary>
            Used by UI forms to add new ContextMenu Items to a Menu they are about to Display based on the Object
            </summary>
            <param name="strip">The form's menu</param>
            <param name="o">The target object</param>
        </member>
        <member name="M:Radegast.ContextActionsManager.AddContributions_Helper(System.Windows.Forms.ToolStripDropDown,System.Collections.Generic.List{System.Windows.Forms.ToolStripMenuItem})">
            <summary>
            Used by AddContributions to add new ContextMenu Items to a Menu they are about to Display
            </summary>
            <param name="strip">The form's menu</param>
            <param name="itemsIn">New Items to Add</param>
        </member>
        <member name="M:Radegast.ContextActionsManager.AddContributions(System.Windows.Forms.ToolStripDropDown,System.Type,System.Object,System.Windows.Forms.Control[])">
            <summary>
            Used by UI forms to add new ContextMenu Items to a Menu they are about to Display
            </summary>
            <param name="strip">The form's menu</param>        
            <param name="type">The type it will target</param>
            <param name="obj">the Target ofbject</param>
            <param name="controls">Control to search for extra contributions (like buttons)</param>
        </member>
        <member name="M:Radegast.ContextActionsManager.SetCurrentItem(System.Windows.Forms.ToolStripDropDown,System.Object)">
            <summary>
            Used by UI forms to set the Context target (saved in the toplevel strip if it's a RadegastContextMenuStrip)
            </summary>
            <param name="strip"></param>
            <param name="o"></param>
        </member>
        <member name="M:Radegast.ContextActionsManager.GleanContributions(System.Windows.Forms.ToolStripDropDown,System.Type,System.Object,System.Windows.Forms.Control[])">
            <summary>
            Used by UI forms to add new ContextMenu Items gleaned from Controls
            </summary>
            <param name="strip">The form's menu</param>        
            <param name="type">The type it will target</param>
            <param name="obj">the Target ofbject</param>
            <param name="controls">Control to search for extra contributions (like buttons)</param>
        </member>
        <member name="M:Radegast.ContextActionsManager.GleanContributions_Helper(System.Collections.Generic.ICollection{System.Windows.Forms.ToolStripMenuItem},System.Type,System.Windows.Forms.Control,System.Object)">
            <summary>
            Used by GleanContributions to add new ContextMenu Items gleaned from Parent control that has buttons on it
            </summary>
            <param name="items">Collection of Items to be added to</param>        
            <param name="type">The type it will target</param>
            <param name="control">Parent control that has buttons on it</param>
            <param name="obj">Will becvome the button's target when </param>
        </member>
        <member name="M:Radegast.TabsConsole.SelectDefaultTab">
            <summary>
            Make default tab (chat) active
            </summary>
        </member>
        <member name="M:Radegast.TabsConsole.DisplayNotificationInChat(System.String)">
            <summary>
            Displays notification in the main chat tab
            </summary>
            <param name="msg">Message to be printed in the chat tab</param>
        </member>
        <member name="M:Radegast.TabsConsole.DisplayNotificationInChat(System.String,Radegast.ChatBufferTextStyle)">
            <summary>
            Displays notification in the main chat tab
            </summary>
            <param name="msg">Message to be printed in the chat tab</param>
            <param name="style">Style of the message to be printed, normal, object, etc.</param>
        </member>
        <member name="M:Radegast.TabsConsole.DisplayNotificationInChat(System.String,Radegast.ChatBufferTextStyle,System.Boolean)">
            <summary>
            Displays notification in the main chat tab
            </summary>
            <param name="msg">Message to be printed in the chat tab</param>
            <param name="style">Style of the message to be printed, normal, object, etc.</param>
            <param name="highlightChatTab">Highligt (and flash in taskbar) chat tab if not selected</param>
        </member>
        <member name="M:Radegast.TabsConsole.ShowIMTab(OpenMetaverse.UUID,System.String,System.Boolean)">
            <summary>
            Creates new IM tab if needed
            </summary>
            <param name="agentID">IM session with agentID</param>
            <param name="label">Tab label</param>
            <param name="makeActive">Should tab be selected and focused</param>
            <returns>True if there was an existing IM tab, false if it was created</returns>
        </member>
        <member name="M:Radegast.TabsConsole.InitializeOnlineTabs">
            <summary>
            Create Tabs that only make sense when connected
            </summary>
        </member>
        <member name="M:Radegast.TabsConsole.DisposeOnlineTabs">
            <summary>
            Close tabs that make no sense when not connected
            </summary>
        </member>
        <member name="M:Radegast.TabsConsole.SelectNextTab">
            <summary>
            Activates the next tab
            </summary>
        </member>
        <member name="M:Radegast.TabsConsole.SelectPreviousTab">
            <summary>
            Activates the previous tab
            </summary>
        </member>
        <member name="F:Radegast.TabsConsole.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.TabsConsole.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.TabsConsole.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Radegast.TabsConsole.NearbyAvatars">
            <summary>
            List of nearby avatars (radar data)
            </summary>
        </member>
        <member name="E:Radegast.TabsConsole.OnTabSelected">
            <summary>
            Fired when a tab is selected
            </summary>
        </member>
        <member name="E:Radegast.TabsConsole.OnChatNotification">
            <summary>
            Fired when a tab is selected
            </summary>
        </member>
        <member name="E:Radegast.TabsConsole.OnTabAdded">
            <summary>
            Fired when a new tab is added
            </summary>
        </member>
        <member name="E:Radegast.TabsConsole.OnTabRemoved">
            <summary>
            Fired when a tab is removed
            </summary>
        </member>
        <member name="P:Radegast.TabsConsole.SelectedTab">
            <summary>
            Currently selected tab
            </summary>
        </member>
        <member name="T:Radegast.TabsConsole.TabCallback">
            <summary>
            Delegate invoked on tab operations
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Radegast.TabsConsole.ChatNotificationCallback">
            <summary>
            Delegate invoked when chat notification is printed
            </summary>
            <param name="sender">Event sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="T:Radegast.TabEventArgs">
            <summary>
            Arguments for tab events
            </summary>
        </member>
        <member name="F:Radegast.TabEventArgs.Tab">
            <summary>
            Tab that was manipulated in the event
            </summary>
        </member>
        <member name="T:Radegast.ChatNotificationEventArgs">
            <summary>
            Argument for chat notification events
            </summary>
        </member>
        <member name="T:Radegast.NearbyAvatar">
            <summary>
            Element of list of nearby avatars
            </summary>
        </member>
        <member name="T:Radegast.CircularList`1">
            <summary>
            A list which acts like the List class, but with more of a java
            influence. This allows you to set
            a looping variable to true, and creates
            a circular list. Also it utilizes the java iterator pattern of
            Next and HasNext.
            
            Author: Wesley Tansey
            </summary>
            <typeparam name="T">The type of item that
            will be stored in the list</typeparam>
        </member>
        <member name="P:Radegast.CircularList`1.Loop">
            <summary>
            If true, the list will loop to the beginning when Next
            is called after the last element has been accessed.
            </summary>
        </member>
        <member name="P:Radegast.CircularList`1.Next">
            <summary>
            The next element in the list. The user is responsible for
            making sure that HasNext is true
            before getting the next element.
            </summary>
        </member>
        <member name="P:Radegast.CircularList`1.HasNext">
            <summary>
            Tells whether there is another element in the list
            </summary>
        </member>
        <member name="F:Radegast.Media.Speech.compress">
            <summary>
            If true, decrease distance falloff effect in volume.
            </summary>
        </member>
        <member name="M:Radegast.Media.Speech.#ctor">
            <summary>
            Creates a new sound object
            </summary>
            <param name="system">Sound system</param>
        </member>
        <member name="M:Radegast.Media.Speech.Dispose">
            <summary>
            Releases resources of this sound object
            </summary>
        </member>
        <member name="M:Radegast.Media.Speech.Play(System.String,System.Boolean,OpenMetaverse.Vector3)">
            <summary>
            Plays audio from a file, as created by an external speech synthesizer.
            </summary>
            <param name="filename">Name of a WAV file</param>
            <param name="global"></param>
            <returns>Length of the sound in ms</returns>
        </member>
        <member name="M:Radegast.Media.Speech.EndCallbackHandler">
            <summary>
            Handler for reaching the end of playback of a speech.
            </summary>
            <returns></returns>
        </member>
        <member name="E:Radegast.Media.Speech.OnSpeechDone">
            <summary>
            Fired when a stream meta data is received
            </summary>
        </member>
        <member name="T:Radegast.Media.Speech.SpeechDoneCallback">
            <summary>
            Fired when a stream meta data is received
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Key, value are sent in e</param>
        </member>
        <member name="F:Radegast.MainProgram.CommandLine">
            <summary>
            Parsed command line options
            </summary>
        </member>
        <member name="M:Radegast.MainProgram.Main(System.String[])">
            <summary>
            The main entry point for the application.
            </summary>
        </member>
        <member name="M:FormFlash.StartFlash(System.Windows.Forms.Form)">
            <summary>
            Flashes the form's taskbar button.
            </summary>
            <param name="form"></param>
        </member>
        <member name="M:FormFlash.StopFlash(System.Windows.Forms.Form)">
            <summary>
            Stops flashing the form's taskbar button.
            </summary>
            <param name="form"></param>
        </member>
        <member name="T:Radegast.UnderlineStyle">
            <summary>
            Specifies the style of underline that should be
            applied to the text.
            </summary>
        </member>
        <member name="F:Radegast.UnderlineStyle.None">
            <summary>
            No underlining.
            </summary>
        </member>
        <member name="F:Radegast.UnderlineStyle.Normal">
            <summary>
            Standard underlining across all words.
            </summary>
        </member>
        <member name="F:Radegast.UnderlineStyle.Word">
            <summary>
            Standard underlining broken between words.
            </summary>
        </member>
        <member name="F:Radegast.UnderlineStyle.Double">
            <summary>
            Double line underlining.
            </summary>
        </member>
        <member name="F:Radegast.UnderlineStyle.Dotted">
            <summary>
            Dotted underlining.
            </summary>
        </member>
        <member name="F:Radegast.UnderlineStyle.Dash">
            <summary>
            Dashed underlining.
            </summary>
        </member>
        <member name="F:Radegast.UnderlineStyle.DashDot">
            <summary>
            Dash-dot ("-.-.") underlining.
            </summary>
        </member>
        <member name="F:Radegast.UnderlineStyle.DashDotDot">
            <summary>
            Dash-dot-dot ("-..-..") underlining.
            </summary>
        </member>
        <member name="F:Radegast.UnderlineStyle.Wave">
            <summary>
            Wave underlining (like spelling mistakes in MS Word).
            </summary>
        </member>
        <member name="F:Radegast.UnderlineStyle.Thick">
            <summary>
            Extra thick standard underlining.
            </summary>
        </member>
        <member name="F:Radegast.UnderlineStyle.HairLine">
            <summary>
            Extra thin standard underlining.
            </summary>
        </member>
        <member name="F:Radegast.UnderlineStyle.DoubleWave">
            <summary>
            Double thickness wave underlining.
            </summary>
        </member>
        <member name="F:Radegast.UnderlineStyle.HeavyWave">
            <summary>
            Thick wave underlining.
            </summary>
        </member>
        <member name="F:Radegast.UnderlineStyle.LongDash">
            <summary>
            Extra long dash underlining.
            </summary>
        </member>
        <member name="T:Radegast.UnderlineColor">
            <summary>
            Specifies the color of underline that should be
            applied to the text.
            </summary>
            <remarks>
            I named these colors by their appearance, so some
            of them might not be what you expect. Please email
            me if you feel one should be changed.
            </remarks>
        </member>
        <member name="F:Radegast.UnderlineColor.Black">
            <summary>Black.</summary>
        </member>
        <member name="F:Radegast.UnderlineColor.None">
            <summary>None.</summary>
        </member>
        <member name="F:Radegast.UnderlineColor.Blue">
            <summary>Blue.</summary>
        </member>
        <member name="F:Radegast.UnderlineColor.Cyan">
            <summary>Cyan.</summary>
        </member>
        <member name="F:Radegast.UnderlineColor.LimeGreen">
            <summary>Lime green.</summary>
        </member>
        <member name="F:Radegast.UnderlineColor.Magenta">
            <summary>Magenta.</summary>
        </member>
        <member name="F:Radegast.UnderlineColor.Red">
            <summary>Red.</summary>
        </member>
        <member name="F:Radegast.UnderlineColor.Yellow">
            <summary>Yellow.</summary>
        </member>
        <member name="F:Radegast.UnderlineColor.White">
            <summary>White.</summary>
        </member>
        <member name="F:Radegast.UnderlineColor.DarkBlue">
            <summary>DarkBlue.</summary>
        </member>
        <member name="F:Radegast.UnderlineColor.DarkCyan">
            <summary>DarkCyan.</summary>
        </member>
        <member name="F:Radegast.UnderlineColor.Green">
            <summary>Green.</summary>
        </member>
        <member name="F:Radegast.UnderlineColor.DarkMagenta">
            <summary>Dark magenta.</summary>
        </member>
        <member name="F:Radegast.UnderlineColor.Brown">
            <summary>Brown.</summary>
        </member>
        <member name="F:Radegast.UnderlineColor.OliveGreen">
            <summary>Olive green.</summary>
        </member>
        <member name="F:Radegast.UnderlineColor.DarkGray">
            <summary>Dark gray.</summary>
        </member>
        <member name="F:Radegast.UnderlineColor.Gray">
            <summary>Gray.</summary>
        </member>
        <member name="T:Radegast.ScrollBarInformation">
            <summary>
            This class contains all the scroll bar information.
            </summary>
        </member>
        <member name="M:Radegast.ScrollBarInformation.#ctor">
            <summary>
            Sets up an empty scroll bar information class.
            </summary>
        </member>
        <member name="M:Radegast.ScrollBarInformation.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            This sets up the scroll bar information with all the basic details.
            </summary>
            <param name="min">the minimum size</param>
            <param name="max">the maximum size</param>
            <param name="page">the size of the page</param>
            <param name="pos">the position of the thingy</param>
            <param name="trackpos">this is updated while the scroll bar is wiggling up and down.</param>
        </member>
        <member name="P:Radegast.ScrollBarInformation.Minimum">
            <summary>
            Specifies the minimum scrolling position.
            </summary>
            <value>the minimum scrolling position</value>
        </member>
        <member name="P:Radegast.ScrollBarInformation.Maximum">
            <summary>
            Specifies the maximum scrolling position.
            </summary>
            <value>the maximum scrolling position</value>
        </member>
        <member name="P:Radegast.ScrollBarInformation.Page">
            <summary>
            Specifies the page size. A scroll bar uses this value to determine the
            appropriate size of the proportional scroll box.
            </summary>
            <value></value>
        </member>
        <member name="P:Radegast.ScrollBarInformation.Position">
            <summary>
            The position of the thumb inside the scroll bar.
            </summary>
            <value></value>
        </member>
        <member name="P:Radegast.ScrollBarInformation.TrackPosition">
            <summary>
            Specifies the immediate position of a scroll box that the user is dragging.
            An application can retrieve this value while processing the SB_THUMBTRACK
            request code. An application cannot set the immediate scroll position; the
            SetScrollInfo function ignores this member.
            </summary>
            <value>the immediated position of the scroll box</value>
        </member>
        <member name="M:Radegast.AutoPilot2.#ctor(OpenMetaverse.GridClient)">
            <summary>
            Constructor.
            </summary>
            <param name="client">The GridClient to use</param>
        </member>
        <member name="M:Radegast.AutoPilot2.MoveToNextWaypoint">
            <summary>
            Triggers Autopilot to move towards next waypoint along the path
            </summary>
            <returns>Next Waypoint index</returns>
        </member>
        <member name="M:Radegast.AutoPilot2.MoveToNextWaypoint(System.Boolean)">
            <summary>
            Triggers Autopilot to move towards next waypoint along the path
            </summary>
            <param name="increment">Increment current Waypoint index</param>
            <exception cref="T:System.Exception">Must have at least 2 Waypoints</exception>
            <returns>Next Waypoint index</returns>
        </member>
        <member name="M:Radegast.AutoPilot2.Start">
            <summary>
            Starts AutoPilot from an Idle state. Will trigger a Moving status change.
            </summary>
            <exception cref="T:System.Exception">Must have at least 2 Waypoints</exception>
            <exception cref="T:System.Exception">Status must be Idle</exception>
            <returns>Next Waypoint index</returns>
        </member>
        <member name="M:Radegast.AutoPilot2.Restart">
            <summary>
            Restarts AutoPilot. Will trigger a Cancel status change if not already cancelled.
            </summary>
            <exception cref="T:System.Exception">Must have at least 2 Waypoints</exception>
            <returns>Next Waypoint index</returns>
        </member>
        <member name="M:Radegast.AutoPilot2.Pause">
            <summary>
            Pauses AutoPilot from a Moving state. Will trigger a Paused status change.
            </summary>
            <exception cref="T:System.Exception">Status must be Moving</exception>
            <returns>Next Waypoint index</returns>
        </member>
        <member name="M:Radegast.AutoPilot2.Resume">
            <summary>
            Resumes AutoPilot from a Paused state. Will trigger a Moving status change.
            </summary>
            <exception cref="T:System.Exception">Status must be Paused</exception>
            <returns>Next Waypoint index</returns>
        </member>
        <member name="M:Radegast.AutoPilot2.Stop">
            <summary>
            Stops AutoPilot. Will trigger a Cancel status change if not already cancelled.
            </summary>
        </member>
        <member name="M:Radegast.AutoPilot2.Stop(Radegast.AutoPilot2.AutoPilotStatus)">
            <summary>
            Stops AutoPilot. Will trigger the given status if not already in that state.
            </summary>
            <param name="newStatus">The new status for AutoPilot. Cannot be Moving</param>
            <exception cref="T:System.ArgumentOutOfRangeException">newStatus cannot be Moving</exception>
        </member>
        <member name="M:Radegast.AutoPilot2.SetStatus(Radegast.AutoPilot2.AutoPilotStatus)">
            <summary>
            Sets AutoPilot's Status. If newStatus is different from current Status than it will cause OnStatusChange event trigger.
            </summary>
            <param name="newStatus">The new Status AutoPilot is to be changed to</param>
            <returns>True if OnStatusChanged triggered</returns>
        </member>
        <member name="M:Radegast.AutoPilot2.Objects_TerseObjectUpdate(System.Object,OpenMetaverse.TerseObjectUpdateEventArgs)">
            <summary>
            Event Handler for waypoint distance checking
            </summary>
        </member>
        <member name="M:Radegast.AutoPilot2.ticker_Elapsed(System.Object,System.Timers.ElapsedEventArgs)">
            <summary>
            Event Handler for Timer which detects if agent is stuck
            </summary>
        </member>
        <member name="P:Radegast.AutoPilot2.Status">
            <summary>
            The Status of the AutoPilot instance
            </summary>
        </member>
        <member name="P:Radegast.AutoPilot2.Waypoints">
            <summary>
            The Vector3d Waypoints in the AutoPilot instance
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Must have at least 2 Waypoints</exception>
        </member>
        <member name="P:Radegast.AutoPilot2.PreviousWaypoint">
            <summary>
            The previous Vector3d Waypoint along the path. Returns Vector3d.Zero if there is no previous waypoint.
            </summary>
        </member>
        <member name="P:Radegast.AutoPilot2.NextWaypoint">
            <summary>
            The next Vector3d Waypoint along the path. Returns Vector3d.Zero if there is no next waypoint.
            </summary>
        </member>
        <member name="P:Radegast.AutoPilot2.NextWaypointIndex">
            <summary>
            The next Waypoint's index. A new value will immediately take effect if AutoPilot is not Idle
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">NextWaypointIndex must be greater than or equal to 0 and less than the number of Waypoints</exception>
            <exception cref="T:System.Exception">Must have at least 2 Waypoints</exception>
        </member>
        <member name="P:Radegast.AutoPilot2.NextWaypointIsFinal">
            <summary>
            The next Waypoint's index
            </summary>
        </member>
        <member name="P:Radegast.AutoPilot2.NextWaypointIsStart">
            <summary>
            Returns true if next Waypoint is the Start
            </summary>
        </member>
        <member name="P:Radegast.AutoPilot2.WaypointRadius">
            <summary>
            The Waypoint detection radius
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">WaypointRadius must be greater than 0</exception>
        </member>
        <member name="P:Radegast.AutoPilot2.StuckTimeout">
            <summary>
            The timeout in milliseconds before being considered stuck
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">StuckTimeout must be greater than 0</exception>
        </member>
        <member name="E:Radegast.AutoPilot2.OnWaypointArrival">
            <summary>
            Event for when agent arrives at a Waypoint
            </summary>
        </member>
        <member name="E:Radegast.AutoPilot2.OnStatusChange">
            <summary>
            Event for when AutoPilot's status changes
            </summary>
        </member>
        <member name="T:Radegast.AutoPilot2.WaypointDelegate">
            <summary>
            Delegate to pass the coordinate value of next waypoint to an event-handler
            </summary>
        </member>
        <member name="T:Radegast.AutoPilot2.AutoPilotStatusDelegate">
            <summary>
            Delegate to pass the coordinate value of next waypoint and the new Status of AutoPilot to an event-handler
            </summary>
        </member>
        <member name="T:Radegast.AutoPilot2.AutoPilotStatus">
            <summary>
            Enum declaration representing the statuses of AutoPilot
            </summary>
        </member>
        <member name="T:Radegast.StringTokenizer">
            <summary>
            StringTokenizer tokenized string (or stream) into tokens.
            </summary>
        </member>
        <member name="M:Radegast.StringTokenizer.StartRead">
            <summary>
            save read point positions so that CreateToken can use those
            </summary>
        </member>
        <member name="M:Radegast.StringTokenizer.ReadWhitespace">
            <summary>
            reads all whitespace characters (does not include newline)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radegast.StringTokenizer.ReadNumber">
            <summary>
            reads number. Number is: DIGIT+ ("." DIGIT*)?
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radegast.StringTokenizer.ReadWord">
            <summary>
            reads word. Word contains any alpha character or _
            </summary>
        </member>
        <member name="M:Radegast.StringTokenizer.ReadComment">
            <summary>
            Reads he rest of line in // comment
            </summary>
        </member>
        <member name="M:Radegast.StringTokenizer.ReadStarComment">
            <summary>
            Read c-style comments /* */
            </summary>
        </member>
        <member name="M:Radegast.StringTokenizer.ReadString">
            <summary>
            reads all characters until next " is found.
            If "" (2 quotes) are found, then they are consumed as
            part of the string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Radegast.StringTokenizer.IsSymbol(System.Char)">
            <summary>
            checks whether c is a symbol character.
            </summary>
        </member>
        <member name="P:Radegast.StringTokenizer.SymbolChars">
            <summary>
            gets or sets which characters are part of TokenKind.Symbol
            </summary>
        </member>
        <member name="P:Radegast.StringTokenizer.IgnoreWhiteSpace">
            <summary>
            if set to true, white space characters will be ignored,
            but EOL and whitespace inside of string will still be tokenized
            </summary>
        </member>
        <member name="F:Radegast.Rendering.RenderSettings.OcclusionCullingEnabled">
            <summary>Should we try to optimize by not drawing objects occluded behind other objects</summary>
        </member>
        <member name="F:Radegast.Rendering.RenderSettings.HeavierDistanceChecking">
            <summary>Should we try to make sure that large prims that are > our draw distance are in view when we are standing on them</summary>
        </member>
        <member name="F:Radegast.Rendering.RenderSettings.MinimumTimeBetweenTerrainUpdated">
            <summary>Minimum time between rebuilding terrain mesh and texture</summary>
        </member>
        <member name="F:Radegast.Rendering.RenderSettings.TextureNonPowerOfTwoSupported">
            <summary>Are textures that don't have dimensions that are powers of two supported</summary>
        </member>
        <member name="F:Radegast.Rendering.RenderSettings.AvatarRenderingEnabled">
            <summary>
            Render avatars
            </summary>
        </member>
        <member name="F:Radegast.Rendering.RenderSettings.PrimitiveRenderingEnabled">
            <summary>
            Render prims
            </summary>
        </member>
        <member name="F:Radegast.Rendering.RenderSettings.RenderAvatarSkeleton">
            <summary>
            Show avatar skeloton
            </summary>
        </member>
        <member name="F:Radegast.Rendering.RenderSettings.EnableShiny">
            <summary>
            Enable shader for shiny
            </summary>
        </member>
        <member name="T:Radegast.IRadegastPlugin">
            <summary>
            Interface of Radegast plugins
            </summary>
        </member>
        <member name="M:Radegast.IRadegastPlugin.StartPlugin(Radegast.RadegastInstance)">
            <summary>
            Called in plugin initialization
            </summary>
            <param name="inst">RadegastInstance plugin is loaded into</param>
        </member>
        <member name="M:Radegast.IRadegastPlugin.StopPlugin(Radegast.RadegastInstance)">
            <summary>
            Called on plugin shutdown
            </summary>
            <param name="inst">RadegastInstance plugin is unloaded from</param>
        </member>
        <member name="F:Radegast.Media.BufferSound.volumeSetting">
            <summary>
            The individual volume setting for THIS object
            </summary>
        </member>
        <member name="M:Radegast.Media.BufferSound.#ctor(OpenMetaverse.UUID,OpenMetaverse.UUID,System.Boolean,System.Boolean,OpenMetaverse.Vector3,System.Single)">
            <summary>
            Creates a new sound object
            </summary>
            <param name="system">Sound system</param>
        </member>
        <member name="M:Radegast.Media.BufferSound.KillAll">
            <summary>
            Stop all playing sounds in the environment
            </summary>
        </member>
        <member name="M:Radegast.Media.BufferSound.AdjustVolumes">
            <summary>
            Adjust volumes of all playing sounds to observe the new global sound volume
            </summary>
        </member>
        <member name="M:Radegast.Media.BufferSound.AdjustVolume">
            <summary>
            Adjust the volume of THIS sound when all are being adjusted.
            </summary>
        </member>
        <member name="M:Radegast.Media.BufferSound.Dispose">
            <summary>
            Releases resources of this sound object
            </summary>
        </member>
        <member name="M:Radegast.Media.BufferSound.Assets_OnSoundReceived(OpenMetaverse.AssetDownload,OpenMetaverse.Assets.Asset)">
            Handle arrival of a sound resource.
        </member>
        <member name="M:Radegast.Media.BufferSound.EndCallbackHandler">
            <summary>
            Handles stop sound even from FMOD
            </summary>
            <returns>RESULT.OK</returns>
        </member>
        <member name="T:Radegast.RadegastAppender">
            <summary>
            Writes log information out onto the console
            </summary>
        </member>
        <member name="E:Radegast.RadegastAppender.Log">
            <summary>Raised when the GridClient object in the main Radegast instance is changed</summary>
        </member>
        <member name="M:Radegast.Rendering.Frustum.PointInFrustum(System.Single,System.Single,System.Single)">
            <summary>
            tasojen normaalit osoittaa sisäänpäin joten jos testattava vertex on
            kaikkien tasojen "edessä", se on ruudulla ja rendataan
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <returns></returns>
        </member>
        <member name="M:Radegast.Rendering.Frustum.SphereInFrustum(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            palauttaa etäisyyden kameraan jos pallo frustumissa, muuten 0.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="T:Radegast.Rendering.Compat">
            <summary>
            Compatibility functions for some OpenGL variants
            </summary>
        </member>
        <member name="F:Radegast.ntfRequestLure.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Radegast.ntfRequestLure.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Radegast.ntfRequestLure.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Radegast.NameMode">
            <summary>
            Enum representing different modes of handling display names
            </summary>
        </member>
        <member name="F:Radegast.NameMode.Standard">
            <summary> No display names </summary>
        </member>
        <member name="F:Radegast.NameMode.Smart">
            <summary> Display name followed by (username) if display name is not default  </summary>
        </member>
        <member name="F:Radegast.NameMode.OnlyDisplayName">
            <summary> Display name followed by (username) </summary>
        </member>
        <member name="F:Radegast.NameMode.DisplayNameAndUserName">
            <summary> Only display </summary>
        </member>
        <member name="T:Radegast.NameManager">
            <summary>
            Manager for looking up avatar names and their caching 
            </summary>
        </member>
        <member name="M:Radegast.NameManager.CleanCache">
            <summary>
            Cleans avatar name cache
            </summary>
        </member>
        <member name="M:Radegast.NameManager.GetLegacyName(OpenMetaverse.UUID)">
            <summary>
            Gets legacy First Last name
            </summary>
            <param name="agentID">UUID of the agent</param>
            <returns></returns>
        </member>
        <member name="M:Radegast.NameManager.GetUserName(OpenMetaverse.UUID)">
            <summary>
            Gets UserName
            </summary>
            <param name="agentID">UUID of the agent</param>
            <returns></returns>
        </member>
        <member name="M:Radegast.NameManager.GetDisplayName(OpenMetaverse.UUID)">
            <summary>
            Gets DisplayName
            </summary>
            <param name="agentID">UUID of the agent</param>
            <returns></returns>
        </member>
        <member name="M:Radegast.NameManager.Get(OpenMetaverse.UUID)">
            <summary>
            Get avatar display name, or queue fetching of the name
            </summary>
            <param name="agentID">UUID of avatar to lookup</param>
            <returns>Avatar display name or "Loading..." if not in cache</returns>
        </member>
        <member name="M:Radegast.NameManager.Get(OpenMetaverse.UUID,System.Boolean)">
            <summary>
            Get avatar display name, or queue fetching of the name
            </summary>
            <param name="agentID">UUID of avatar to lookup</param>
            <param name="blocking">If true, wait until name is recieved, otherwise return immediately</param>
            <returns>Avatar display name or "Loading..." if not in cache</returns>
        </member>
        <member name="M:Radegast.NameManager.Get(OpenMetaverse.UUID,System.String)">
            <summary>
            Get avatar display name, or queue fetching of the name
            </summary>
            <param name="agentID">UUID of avatar to lookup</param>
            <param name="defaultValue">If name failed to retrieve, use this</param>
            <returns>Avatar display name or the default value if not in cache</returns>
        </member>
        <member name="M:Radegast.NameManager.Get(OpenMetaverse.UUID,System.Boolean,System.String)">
            <summary>
            Get avatar display name, or queue fetching of the name
            </summary>
            <param name="agentID">UUID of avatar to lookup</param>
            <param name="blocking">If true, wait until name is recieved, otherwise return immediately</param>
            <param name="defaultValue">If name failed to retrieve, use this</param>
            <returns></returns>
        </member>
    </members>
</doc>
