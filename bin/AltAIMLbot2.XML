<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AltAIMLbot2</name>
    </assembly>
    <members>
        <member name="M:AltAIMLbot.Database.IEnglishFactiodEngine.UpdateFactoid(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            This method searches for the search query, then deletes the top ranked and inserts.
            </summary>
            <param name="query">The search term as a string that the caller wants to search for within the
            index as referenced by this object.</param>
            <param name="myText">The new value to replace in the database.</param>
        </member>
        <member name="M:AltAIMLbot.Database.WebGetFactiodEngine.GetResultTags">
            <summary>
            ASK.COM was 
              return "q_result,query_result,result,q_answer";
            </summary>
            <returns></returns>
        </member>
        <member name="M:AltAIMLbot.Database.WebGetFactiodEngine.MakeSearchString(System.String)">
            <summary>
             return @"http://www.ask.com/web?q=" + searchTerm1;
            </summary>
            <param name="searchTerm1"></param>
            <returns></returns>
        </member>
        <member name="T:AltAIMLbot.Utils.AIMLTagHandlerU">
            <summary>
            The template for all classes that handle the AIML tags found within template nodes of a
            category.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:AltAIMLbot.Utils.TextTransformer" -->
        <!-- Badly formed XML comment ignored for member "M:AltAIMLbot.Utils.TextPatternUtils.checkEndsAsSentence(System.String)" -->
        <member name="F:AltAIMLbot.Utils.StaticAIMLUtils.ReservedAttributes">
            <summary>
            Attributes that we use from AIML not intended to be stacked into user dictionary
            </summary>
        </member>
        <member name="M:AltAIMLbot.Utils.TextTransformer.#ctor(AltAIMLbot.AltBot,AltAIMLbot.Unifiable)">
            <summary>
            ctor
            </summary>
            <param name="bot">The bot this transformer is a part of</param>
            <param name="inputString">The input Unifiable to be transformed</param>
        </member>
        <member name="M:AltAIMLbot.Utils.TextTransformer.#ctor(AltAIMLbot.AltBot)">
            <summary>
            ctor
            </summary>
            <param name="bot">The bot this transformer is a part of</param>
        </member>
        <member name="M:AltAIMLbot.Utils.TextTransformer.#ctor">
            <summary>
            Default ctor for used as part of late binding mechanism
            </summary>
        </member>
        <member name="M:AltAIMLbot.Utils.TextTransformer.Transform(System.String)">
            <summary>
            Do a transformation on the supplied input Unifiable
            </summary>
            <param name="input">The Unifiable to be transformed</param>
            <returns>The resulting output</returns>
        </member>
        <member name="M:AltAIMLbot.Utils.TextTransformer.Transform">
            <summary>
            Do a transformation on the Unifiable found in the InputString attribute
            </summary>
            <returns>The resulting transformed Unifiable</returns>
        </member>
        <member name="M:AltAIMLbot.Utils.TextTransformer.ProcessChangeU">
            <summary>
            The method that does the actual processing of the text.
            </summary>
            <returns>The resulting processed text</returns>
        </member>
        <member name="F:AltAIMLbot.Utils.TextTransformer.inputString">
            <summary>
            Instance of the input Unifiable
            </summary>
        </member>
        <member name="F:AltAIMLbot.Utils.TextTransformer.Proc">
            <summary>
            The Proc that this transformation is connected with
            </summary>
        </member>
        <member name="P:AltAIMLbot.Utils.TextTransformer.InputString">
            <summary>
            The input Unifiable to be transformed in some way
            </summary>
        </member>
        <member name="P:AltAIMLbot.Utils.TextTransformer.OutputString">
            <summary>
            The transformed Unifiable
            </summary>
        </member>
        <member name="M:AltAIMLbot.Utils.AIMLTagHandlerU.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
            true if <see cref="P:System.Xml.IXmlLineInfo.LineNumber"/> and <see cref="P:System.Xml.IXmlLineInfo.LinePosition"/> can be provided; otherwise, false.
            </returns>
        </member>
        <member name="F:AltAIMLbot.Utils.AIMLTagHandlerU._request">
            <summary>
            A representation of the input into the Proc made by the user
            </summary>
        </member>
        <member name="F:AltAIMLbot.Utils.AIMLTagHandlerU._result0">
            <summary>
            A representation of the result to be returned to the user
            </summary>
        </member>
        <member name="F:AltAIMLbot.Utils.AIMLTagHandlerU._isRecursive">
            <summary>
            A flag to denote if inner tags are to be processed recursively before processing this tag
            </summary>
        </member>
        <member name="F:AltAIMLbot.Utils.AIMLTagHandlerU.query">
            <summary>
            The query that produced this node containing the wildcard matches
            </summary>
        </member>
        <member name="M:AltAIMLbot.Utils.AIMLTagHandlerU.#ctor">
            <summary>
            Default ctor to use when late binding
            </summary>
        </member>
        <member name="M:AltAIMLbot.Utils.AIMLTagHandlerU.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request itself</param>
            <param name="result">The result to be passed back to the user</param>
            <param name="templateNode">The node to be processed</param>
        </member>
        <member name="M:AltAIMLbot.Utils.AIMLTagHandlerU.ProcessAimlChange">
            <summary>
            By calling this and not just ProcessChangeU() 
            You've ensure we have a proper calling context
            </summary>
            <returns></returns>
        </member>
        <member name="M:AltAIMLbot.Utils.AIMLTagHandlerU.CompleteAimlProcess">
            <summary>
            By calling this and not just CompleteProcessU() 
            You've ensure we have a proper calling context
            </summary>
        </member>
        <member name="M:AltAIMLbot.Utils.AIMLTagHandlerU.CanUnify(AltAIMLbot.Unifiable)">
            <summary>
            Helper method that turns the passed Unifiable into an XML node
            </summary>
            <param name="outerXML">the Unifiable to XMLize</param>
            <returns>The XML node</returns>
        </member>
        <member name="M:AltAIMLbot.Utils.AIMLTagHandlerU.TransformAtomically(System.Func{AltAIMLbot.Unifiable,AltAIMLbot.Unifiable},System.Boolean)">
            <summary>
            The method that does the recursion of the text
            </summary>
            <returns>The resulting processed text</returns>
        </member>
        <member name="M:AltAIMLbot.Utils.AIMLTagHandlerU.Transform">
            <summary>
            Do a transformation on the Unifiable found in the InputString attribute
            </summary>
            <returns>The resulting transformed Unifiable</returns>
        </member>
        <member name="M:AltAIMLbot.Utils.AIMLTagHandlerU.MachineSideEffect(System.Threading.ThreadStart)">
            <summary>
            Machine SideEffect - this denoates that he state of machine will change when processing the taghandler
            </summary>
            <param name="func"></param>
        </member>
        <member name="P:AltAIMLbot.Utils.AIMLTagHandlerU.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
            <returns>
            The current line number or 0 if no line information is available (for example, <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo"/> returns false).
            </returns>
        </member>
        <member name="P:AltAIMLbot.Utils.AIMLTagHandlerU.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
            <returns>
            The current line position or 0 if no line information is available (for example, <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo"/> returns false).
            </returns>
        </member>
        <member name="P:AltAIMLbot.Utils.AIMLTagHandlerU.templateNode">
            <summary>
            The template node to be processed by the class
            </summary>
        </member>
        <member name="P:AltAIMLbot.Utils.AIMLTagHandlerU.user">
            <summary>
            A representation of the user who made the request
            </summary>
        </member>
        <member name="P:AltAIMLbot.Utils.AIMLTagHandlerU.RecurseResult">
            <summary>
            Final Result (not "innerResult!")
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlers.summerize.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.sentence">
            <summary>
            The sentence element tells the AIML interpreter to render the contents of the element 
            such that the first letter of each sentence is in uppercase, as defined (if defined) by 
            the locale indicated by the specified language (if specified). Sentences are interpreted 
            as strings whose last character is the period or full-stop character .. If the Unifiable does 
            not contain a ., then the entire Unifiable is treated as a sentence.
            
            If no character in this Unifiable has a different uppercase version, based on the Unicode 
            standard, then the original Unifiable is returned. 
            </summary>
        </member>
        <member name="M:AltAIMLbot.Utils.AIMLFormatingTagHandler.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be processed</param>
        </member>
        <member name="M:AltAIMLbot.Utils.AIMLFormatingTagHandler.ProcessChangeU">
            <summary>
            The method that does the actual processing of the text.
            </summary>
            <returns>The resulting processed text</returns>
        </member>
        <member name="M:AltAIMLbot.Utils.AIMLFormatingTagHandler.Format(AltAIMLbot.Unifiable)">
            <summary>
            The subclass only needs to process the non atomic inner text
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.sentence.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.sentence.Format(AltAIMLbot.Unifiable)">
            <summary>
            The method that does the actual Processing of the text.
            </summary>
            <returns>The resulting Processed text</returns>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.formal">
            <summary>
            The formal element tells the AIML interpreter to render the contents of the element 
            such that the first letter of each word is in uppercase, as defined (if defined) by 
            the locale indicated by the specified language (if specified). This is similar to methods 
            that are sometimes called "Title Case". 
            
            If no character in this Unifiable has a different uppercase version, based on the Unicode 
            standard, then the original Unifiable is returned.
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.formal.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlers.condition_aima">
             <summary>
             The condition element instructs the AIML interpreter to return specified contents depending 
             upon the results of matching a predicate against a pattern. 
             
             NB: The condition element has three different types. The three different types specified 
             here are distinguished by an xsi:type attribute, which permits a validating XML Schema 
             processor to validate them. Two of the types may contain li elements, of which there are 
             three different types, whose validity is determined by the type of enclosing condition. In 
             practice, an AIML interpreter may allow the omission of the xsi:type attribute and may instead 
             heuristically determine which type of condition (and hence li) is in use. 
             
             Block Condition 
             ---------------
             
             The blockCondition type of condition has a required attribute "name", which specifies an AIML 
             predicate, and a required attribute "value", which contains a simple pattern expression. 
            
             If the contents of the value attribute match the value of the predicate specified by name, then 
             the AIML interpreter should return the contents of the condition. If not, the empty string "" 
             should be returned.
             
             Single-predicate Condition 
             --------------------------
             
             The singlePredicateCondition type of condition has a required attribute "name", which specifies 
             an AIML predicate. This form of condition must contain at least one li element. Zero or more of 
             these li elements may be of the valueOnlyListItem type. Zero or one of these li elements may be 
             of the defaultListItem type.
             
             The singlePredicateCondition type of condition is processed as follows: 
            
             Reading each contained li in order: 
            
             1. If the li is a valueOnlyListItem type, then compare the contents of the value attribute of 
             the li with the value of the predicate specified by the name attribute of the enclosing 
             condition. 
                 a. If they match, then return the contents of the li and stop processing this condition. 
                 b. If they do not match, continue processing the condition. 
             2. If the li is a defaultListItem type, then return the contents of the li and stop processing
             this condition.
             
             Multi-predicate Condition 
             -------------------------
             
             The multiPredicateCondition type of condition has no attributes. This form of condition must 
             contain at least one li element. Zero or more of these li elements may be of the 
             nameValueListItem type. Zero or one of these li elements may be of the defaultListItem type.
             
             The multiPredicateCondition type of condition is processed as follows: 
            
             Reading each contained li in order: 
            
             1. If the li is a nameValueListItem type, then compare the contents of the value attribute of 
             the li with the value of the predicate specified by the name attribute of the li. 
                 a. If they match, then return the contents of the li and stop processing this condition. 
                 b. If they do not match, continue processing the condition. 
             2. If the li is a defaultListItem type, then return the contents of the li and stop processing 
             this condition. 
             
             ****************
             
             Condition List Items
             
             As described above, two types of condition may contain li elements. There are three types of 
             li elements. The type of li element allowed in a given condition depends upon the type of that 
             condition, as described above. 
             
             Default List Items 
             ------------------
             
             An li element of the type defaultListItem has no attributes. It may contain any AIML template 
             elements. 
            
             Value-only List Items
             ---------------------
             
             An li element of the type valueOnlyListItem has a required attribute value, which must contain 
             a simple pattern expression. The element may contain any AIML template elements.
             
             Name and Value List Items
             -------------------------
             
             An li element of the type nameValueListItem has a required attribute name, which specifies an 
             AIML predicate, and a required attribute value, which contains a simple pattern expression. The 
             element may contain any AIML template elements. 
             </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlers.condition_aima.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.bot">
            <summary>
            An element called bot, which may be considered a restricted version of get, is used to 
            tell the AIML interpreter that it should substitute the contents of a "bot predicate". The 
            value of a bot predicate is set at load-time, and cannot be changed at run-time. The AIML 
            interpreter may decide how to set the values of bot predicate at load-time. If the bot 
            predicate has no value defined, the AIML interpreter should substitute an empty Unifiable.
            
            The bot element has a required name attribute that identifies the bot predicate. 
            
            The bot element does not have any content. 
            </summary>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.get">
            <summary>
            The get element tells the AIML interpreter that it should substitute the contents of a 
            predicate, if that predicate has a value defined. If the predicate has no value defined, 
            the AIML interpreter should substitute the empty Unifiable "". 
            
            The AIML interpreter implementation may optionally provide a mechanism that allows the 
            AIML author to designate default values for certain predicates (see [9.3.]). 
            
            The get element must not perform any text formatting or other "normalization" on the predicate
            contents when returning them. 
            
            The get element has a required name attribute that identifies the predicate with an AIML 
            predicate name. 
            
            The get element does not have any content.
            </summary>
        </member>
        <member name="M:AltAIMLbot.Utils.UnifibleTagHandler.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be processed</param>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.get.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.get.CanUnify(AltAIMLbot.Unifiable)">
            <summary>
            Helper method that turns the passed Unifiable into an XML node
            </summary>
            <param name="outerXML">the Unifiable to XMLize</param>
            <returns>The XML node</returns>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.bot.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="Proc">The Proc involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.aimlexec">
            <summary>
            The srai element instructs the AIML interpreter to pass the result of Processing the contents 
            of the srai element to the AIML matching loop, as if the input had been produced by the user 
            (this includes stepping through the entire input normalization Process). The srai element does 
            not have any attributes. It may contain any AIML template elements. 
            
            As with all AIML elements, nested forms should be parsed from inside out, so embedded srais are 
            perfectly acceptable. 
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.aimlexec.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.AltBot">
            <summary>
            </summary>
            <summary>
            Encapsulates a Proccessor. If no settings.xml file is found or referenced the Proccessor will try to
            default to safe settings.
            </summary>
            <summary>
            Encapsulates a Proccessor. If no settings.xml file is found or referenced the Proccessor will try to
            default to safe settings.
            </summary>
        </member>
        <member name="F:AltAIMLbot.AltBot.LastLogMessage">
            <summary>
            The last message to be entered into the log (for testing purposes)
            </summary>
        </member>
        <member name="F:AltAIMLbot.AltBot.lastMessage">
            <summary>
            Writes a (timestamped) message to the Processor's log.
            
            Log files have the form of yyyyMMdd.log.
            </summary>
            <param name="message">The message to log</param>
        </member>
        <member name="F:AltAIMLbot.AltBot.PadAroundTemplateTags">
            <summary>
            @TODO @WORKAROUND Currently adding some padding around Template expanded tags
            </summary>
        </member>
        <member name="F:AltAIMLbot.AltBot.StaticLoader">
            <summary>
            Will ensure the same loader options are used between loaders
            </summary>
        </member>
        <member name="F:AltAIMLbot.AltBot.GlobalSettings">
            <summary>
            A dictionary object that looks after all the settings associated with this Proccessor
            </summary>
        </member>
        <member name="F:AltAIMLbot.AltBot.GenderSubstitutions">
            <summary>
            A dictionary of all the gender based substitutions used by this bot
            </summary>
        </member>
        <member name="F:AltAIMLbot.AltBot.Person2Substitutions">
            <summary>
            A dictionary of all the first person to second person (and back) substitutions
            </summary>
        </member>
        <member name="F:AltAIMLbot.AltBot.PersonSubstitutions">
            <summary>
            A dictionary of first / third person substitutions
            </summary>
        </member>
        <member name="F:AltAIMLbot.AltBot.InputSubstitutions">
            <summary>
            Generic substitutions that take place during the normalization process
            </summary>
        </member>
        <member name="F:AltAIMLbot.AltBot.OutputSubstitutions">
            <summary>
            Output substitutions that take place before the bot speaks
            </summary>
        </member>
        <member name="F:AltAIMLbot.AltBot.DefaultPredicates">
            <summary>
            The default predicates to set up for a user
            </summary>
        </member>
        <member name="F:AltAIMLbot.AltBot.HeardPredicates">
            <summary>
            A weak name/value association list of what has happened in dialog  
            </summary>
        </member>
        <member name="F:AltAIMLbot.AltBot.RelationMetaProps">
            <summary>
            A name+prop/value association list of things like  look.set-return, look.format-whword,
            look.format-assert, look.format-query, look.format-etc,
            </summary>
        </member>
        <member name="F:AltAIMLbot.AltBot.UnknownTagsAreBotVars">
            <summary>
            When a tag has no name like <icecream/> it is transformed to <bot name="icecream"></bot>
            </summary>
        </member>
        <member name="F:AltAIMLbot.AltBot.AllDictionaries">
            <summary>
             Substitution blocks for graphmasters
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:AltAIMLbot.AltBot.Splitters" -->
        <member name="F:AltAIMLbot.AltBot.isAcceptingUserInput">
            <summary>
            Flag to show if the bot is willing to accept user input
            </summary>
        </member>
        <member name="F:AltAIMLbot.AltBot.AllUserPreds">
            <summary>
            A dictionary of all inherited settings betten users
            </summary>
        </member>
        <member name="F:AltAIMLbot.AltBot.EnginePreds">
            <summary>
            A dictionary of all settings from anyone .. just a fallback
            </summary>
        </member>
        <member name="F:AltAIMLbot.AltBot.LogBuffer">
            <summary>
            A buffer to hold log messages to be written out to the log file when a max size is reached
            </summary>
        </member>
        <member name="F:AltAIMLbot.AltBot.CurrentStates">
            <summary>
            A list of Topic states that are set currently (for use of guarding content)
            </summary>
        </member>
        <member name="F:AltAIMLbot.AltBot.StartedOn">
            <summary>
            When the Bot was initialised
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:AltAIMLbot.AltBot.saySapi" -->
        <member name="F:AltAIMLbot.AltBot.TrustAIML">
            <summary>
            If set to false the input from AIML files will undergo the same normalization process that
            user input goes through. If true the Proccessor will assume the AIML is correct. Defaults to true.
            </summary>
        </member>
        <member name="F:AltAIMLbot.AltBot.MaxThatSize">
            <summary>
            The maximum number of characters a "that" element of a path is allowed to be. Anything above
            this length will cause "that" to be "*". This is to avoid having the graphmaster process
            huge "that" elements in the path that might have been caused by the Proccessor reporting third party
            data.
            </summary>
        </member>
        <member name="M:AltAIMLbot.AltBot.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:AltAIMLbot.AltBot.loadAIMLFromDefaults">
            <summary>
            Loads AIML from .aiml files into the graphmaster "brain" of the Proccessor
            </summary>
        </member>
        <member name="M:AltAIMLbot.AltBot.loadAIMLFromURI(System.String,AltAIMLbot.Request)">
            <summary>
            Loads AIML from .aiml files into the graphmaster "brain" of the Proccessor
            </summary>
        </member>
        <member name="M:AltAIMLbot.AltBot.loadAIMLAndSettings(System.String)">
            <summary>
            Loads AIML from .aiml files into the graphmaster "brain" of the Proccessor
            </summary>
        </member>
        <member name="M:AltAIMLbot.AltBot.loadAIMLFromXML(System.Xml.XmlDocument,AltAIMLbot.Utils.LoaderOptions,AltAIMLbot.Request)">
            <summary>
            Allows the Proccessor to load a new XML version of some AIML
            </summary>
            <param name="newAIML">The XML document containing the AIML</param>
            <param name="filename">The originator of the XML document</param>
        </member>
        <member name="M:AltAIMLbot.AltBot.setup">
            <summary>
            Instantiates the dictionary objects and collections associated with this class
            </summary>
        </member>
        <member name="M:AltAIMLbot.AltBot.loadGlobalBotSettings">
            <summary>
            Loads settings based upon the default location of the Settings.xml file
            </summary>
        </member>
        <member name="M:AltAIMLbot.AltBot.loadSettingsFile(System.String,AltAIMLbot.Request)">
            <summary>
            Loads settings and configuration info from various xml files referenced in the settings file passed in the args. 
            Also generates some default values if such values have not been set by the settings file.
            </summary>
            <param name="pathToSettings">Path to the settings xml file</param>
        </member>
        <member name="M:AltAIMLbot.AltBot.loadSplitters(System.String)">
            <summary>
            Loads the splitters for this Proccessor from the supplied config file (or sets up some safe defaults)
            </summary>
            <param name="pathToSplitters">Path to the config file</param>
        </member>
        <member name="M:AltAIMLbot.AltBot.ScanAndLoadGraphs">
            <summary>
            Loads a dump of all graphmaster into memory so avoiding processing the AIML files again
            </summary>
            <param name="path">the path to the dump file</param>
        </member>
        <member name="M:AltAIMLbot.AltBot.SaveLoadedGraphs">
            <summary>
            Saves the graphmaster node (and children) to a binary file to avoid processing the AIML each time the 
            Proccessor starts
            </summary>
            <param name="path">the path to the file for saving</param>
        </member>
        <member name="M:AltAIMLbot.AltBot.saveToBinaryFile(System.String)">
            <summary>
            Saves the graphmaster node (and children) to a binary file to avoid processing the AIML each time the 
            Proccessor starts
            </summary>
            <param name="path">the path to the file for saving</param>
        </member>
        <member name="M:AltAIMLbot.AltBot.loadFromBinaryFile(System.String)">
            <summary>
            Loads a dump of the graphmaster into memory so avoiding processing the AIML files again
            </summary>
            <param name="path">the path to the dump file</param>
        </member>
        <member name="M:AltAIMLbot.AltBot.phoneHome(AltAIMLbot.Unifiable,AltAIMLbot.Request)">
            <summary>
            Attempts to send an email to the botmaster at the AdminEmail address setting with error messages
            resulting from a query to the Proccessor
            </summary>
            <param name="errorMessage">the resulting error message</param>
            <param name="request">the request object that encapsulates all sorts of useful information</param>
        </member>
        <member name="M:AltAIMLbot.AltBot.GetBotSetting(AltAIMLbot.Unifiable)">
            <summary>
            Returns the value of a setting given the name of the setting
            </summary>
            <param name="name">the name of the setting whose value we're interested in</param>
            <returns>the value of the setting</returns>
        </member>
        <member name="M:AltAIMLbot.AltBot.ChatString(System.String,System.String)">
            <summary> 
            Given some raw input string username/unique ID creates a response for the user
            </summary>
            <param name="rawInput">the raw input</param>
            <param name="UserGUID">a usersname</param>
            <returns>the result to be output to the user</returns>        
        </member>
        <member name="M:AltAIMLbot.AltBot.Chat(System.String,System.String)">
            <summary>
            Given some raw input and a unique ID creates a response for a new user
            </summary>
            <param name="rawInput">the raw input</param>
            <param name="UserGUID">an ID for the new user (referenced in the result object)</param>
            <returns>the result to be output to the user</returns>
        </member>
        <member name="M:AltAIMLbot.AltBot.ChatWithRequest(AltAIMLbot.Request)">
             <summary>
             Given a request containing user input, produces a result from the Proccessor
             </summary>
             <param name="request">the request from the user</param>
             <returns>the result to be output to the user</returns>
            
        </member>
        <member name="P:AltAIMLbot.AltBot.isPerformingOutput">
            <summary>
            Flag to show if the bot is producing output
            </summary>
        </member>
        <member name="P:AltAIMLbot.AltBot.MaxLogBufferSize">
            <summary>
            How big to let the log buffer get before writing to disk
            </summary>
        </member>
        <member name="P:AltAIMLbot.AltBot.NotAcceptingUserInputMessage">
            <summary>
            The message to show if a user tries to use the Proccessor whilst it is set to not process user input
            </summary>
        </member>
        <member name="P:AltAIMLbot.AltBot.TimeOut">
            <summary>
            The maximum amount of time a request should take (in milliseconds)
            </summary>
        </member>
        <member name="P:AltAIMLbot.AltBot.TimeOutMessage">
            <summary>
            The message to display in the event of a timeout
            </summary>
        </member>
        <member name="P:AltAIMLbot.AltBot.Locale">
            <summary>
            The locale of the bot as a CultureInfo object
            </summary>
        </member>
        <member name="P:AltAIMLbot.AltBot.Strippers">
            <summary>
            Will match all the illegal characters that might be inputted by the user
            </summary>
        </member>
        <member name="P:AltAIMLbot.AltBot.AdminEmail">
            <summary>
            The email address of the botmaster to be used if WillCallHome is set to true
            </summary>
        </member>
        <member name="P:AltAIMLbot.AltBot.IsLogging">
            <summary>
            Flag to denote if the bot is writing messages to its logs
            </summary>
        </member>
        <member name="P:AltAIMLbot.AltBot.WillCallHome">
            <summary>
            Flag to denote if the bot will email the botmaster using the AdminEmail setting should an error
            occur
            </summary>
        </member>
        <member name="P:AltAIMLbot.AltBot.Sex">
            <summary>
            The supposed sex of the bot
            </summary>
        </member>
        <member name="P:AltAIMLbot.AltBot.PathToAIML">
            <summary>
            The directory to look in for the AIML files
            </summary>
        </member>
        <member name="P:AltAIMLbot.AltBot.PathToConfigFiles">
            <summary>
            The directory to look in for the various XML configuration files
            </summary>
        </member>
        <member name="P:AltAIMLbot.AltBot.PathToLogs">
            <summary>
            The directory into which the various log files will be written
            </summary>
        </member>
        <member name="P:AltAIMLbot.AltBot.PathToWordNet">
            <summary>
            The directory to look in for the WordNet3 files
            </summary>
        </member>
        <member name="P:AltAIMLbot.AltBot.PathToLucene">
            <summary>
            The directory to look in for the Lucene Index files
            </summary>
        </member>
        <member name="P:AltAIMLbot.AltBot.Size">
            <summary>
            The number of categories this Proccessor has in its graphmaster "brain"
            </summary>
        </member>
        <member name="P:AltAIMLbot.AltBot.DefaultStartGraph">
            <summary>
            The "brain" of the Proccessor
            </summary>
        </member>
        <member name="P:AltAIMLbot.AltBot.MBrain">
            <summary>
            The Markovian "brain" of the Proccessor for generation
            </summary>
        </member>
        <member name="P:AltAIMLbot.AltBot.pHMM">
            <summary>
            Proccessor for phonetic HMM
            </summary>
        </member>
        <member name="P:AltAIMLbot.AltBot.pMSM">
            <summary>
            Proccessor for action Markov State Machine
            </summary>
        </member>
        <member name="T:AltAIMLbot.UserImpl">
            <summary>
            Encapsulates information and history of a user who has interacted with the bot
            </summary>
        </member>
        <member name="M:AltAIMLbot.Variables.ISettingsDictionaryT`1.addSetting(System.String,System.Object)">
            <summary>
            Adds a bespoke setting to the Settings class (accessed via the grabSettings(string name)
            method.
            </summary>
            <param name="name">The name of the new setting</param>
            <param name="value">The value associated with this setting</param>
        </member>
        <member name="M:AltAIMLbot.Variables.ISettingsDictionaryT`1.removeSetting(System.String)">
            <summary>
            Removes the named setting from this class
            </summary>
            <param name="name">The name of the setting to remove</param>
        </member>
        <member name="M:AltAIMLbot.Variables.ISettingsDictionaryT`1.updateSetting(System.String,System.Object)">
            <summary>
            Updates the named setting with a new value whilst retaining the position in the
            dictionary
            </summary>
            <param name="name">the name of the setting</param>
            <param name="value">the new value</param>
        </member>
        <member name="M:AltAIMLbot.Variables.ISettingsDictionaryT`1.grabSetting(System.String)">
            <summary>
            Returns the value of a setting given the name of the setting
            </summary>
            <param name="name">the name of the setting whose value we're interested in</param>
            <returns>the value of the setting</returns>
        </member>
        <member name="M:AltAIMLbot.Variables.ISettingsDictionaryT`1.containsLocalCalled(System.String)">
            <summary>
            Checks to see if a setting of a particular name exists
            </summary>
            <param name="name">The setting name to check</param>
            <returns>Existential truth value</returns>
        </member>
        <member name="M:AltAIMLbot.UserStaticModel.CreateRequest(AltAIMLbot.Unifiable,AltAIMLbot.Unifiable,AltAIMLbot.User)">
            <summary>
            If user says something to robot we.. do a user.CreateRequest("Hi robot",BotAsUser);
            </summary>
            <param name="input"></param>
            <param name="targetUser"></param>
            <returns></returns>
        </member>
        <member name="M:AltAIMLbot.UserConversationScope.LastSaidByReponder(AltAIMLbot.UserConversationScope)">
            <summary>
            Returns the sematantic meaning to use for the next <that/> part of a subsequent path
            </summary>
            <returns>the Unifiable to use for that</returns>
        </member>
        <member name="M:AltAIMLbot.UserConversationScope.getThat(AltAIMLbot.User)">
            <summary>
            Returns the first sentence of the last output from the bot
            </summary>
            <returns>the first sentence of the last output from the bot</returns>
        </member>
        <member name="M:AltAIMLbot.UserConversationScope.getThat(System.Int32,AltAIMLbot.User)">
            <summary>
            Returns the first sentence of the output "n" steps ago from the bot
            </summary>
            <param name="n">the number of steps back to go</param>
            <returns>the first sentence of the output "n" steps ago from the bot</returns>
        </member>
        <member name="M:AltAIMLbot.UserConversationScope.getThat(System.Int32,System.Int32,AltAIMLbot.User)">
            <summary>
            Returns the sentence numbered by "sentence" of the output "n" steps ago from the bot
            </summary>
            <param name="n">the number of steps back to go</param>
            <param name="sentence">the sentence number to get</param>
            <returns>the sentence numbered by "sentence" of the output "n" steps ago from the bot</returns>
        </member>
        <member name="M:AltAIMLbot.UserConversationScope.getInputSentence(AltAIMLbot.User)">
            <summary>
            Returns the first sentence of the last output from the bot
            </summary>
            <returns>the first sentence of the last output from the bot</returns>
        </member>
        <member name="M:AltAIMLbot.UserConversationScope.getInputSentence(System.Int32,AltAIMLbot.User)">
            <summary>
            Returns the first sentence from the output from the bot "n" steps ago
            </summary>
            <param name="n">the number of steps back to go</param>
            <returns>the first sentence from the output from the bot "n" steps ago</returns>
        </member>
        <member name="M:AltAIMLbot.UserConversationScope.getInputSentence(System.Int32,System.Int32,AltAIMLbot.User)">
            <summary>
            Returns the identified sentence number from the input from the bot "n" steps ago
            </summary>
            <param name="n">the number of steps back to go</param>
            <param name="sentence">the sentence number to return</param>
            <returns>the identified sentence number from the input from the bot "n" steps ago</returns>
        </member>
        <member name="M:AltAIMLbot.UserConversationScope.getRequestSentence(System.Int32,System.Int32,AltAIMLbot.User)">
            <summary>
            Returns the identified sentence number from the input from the bot "n" steps ago
            </summary>
            <param name="n">the number of steps back to go</param>
            <param name="sentence">the sentence number to return</param>
            <returns>the identified sentence number from the input from the bot "n" steps ago</returns>
        </member>
        <member name="M:AltAIMLbot.UserConversationScope.getResponseSentence(AltAIMLbot.User)">
            <summary>
            Returns the first sentence of the last output from the bot
            </summary>
            <returns>the first sentence of the last output from the bot</returns>
        </member>
        <member name="M:AltAIMLbot.UserConversationScope.getResponseSentence(System.Int32,AltAIMLbot.User)">
            <summary>
            Returns the first sentence from the output from the bot "n" steps ago
            </summary>
            <param name="n">the number of steps back to go</param>
            <returns>the first sentence from the output from the bot "n" steps ago</returns>
        </member>
        <member name="M:AltAIMLbot.UserConversationScope.getResponseSentence(System.Int32,System.Int32,AltAIMLbot.User)">
            <summary>
            Returns the identified sentence number from the output from the bot "n" steps ago
            </summary>
            <param name="n">the number of steps back to go</param>
            <param name="sentence">the sentence number to return</param>
            <returns>the identified sentence number from the output from the bot "n" steps ago</returns>
        </member>
        <member name="P:AltAIMLbot.UserConversationScope.Topic">
            <summary>
            the value of the "topic" predicate
            </summary>
        </member>
        <member name="F:AltAIMLbot.UserImpl.id">
            <summary>
            The local instance of the GUID that identifies this user to the bot
            </summary>
        </member>
        <member name="F:AltAIMLbot.UserImpl.Interactions">
            <summary>
            A collection of all the Interaction objects returned to the user in this session
            (in reverse order of time)
            </summary>
        </member>
        <member name="M:AltAIMLbot.UserImpl.#ctor(System.String,System.String,AltAIMLbot.AltBot)">
            <summary>
            Ctor
            </summary>
            <param name="UserID">The GUID of the user</param>
            <param name="bot">the bot the user is connected to</param>
        </member>
        <member name="M:AltAIMLbot.UserImpl.#ctor(System.String,System.String,AltAIMLbot.AltBot,AltAIMLbot.Variables.SettingsDictionary)">
            <summary>
            Ctor
            </summary>
            <param name="userID">The GUID of the user</param>
            <param name="bot">the bot the user is connected to</param>
        </member>
        <member name="M:AltAIMLbot.UserImpl.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:AltAIMLbot.UserImpl.LastSaidByReponder(AltAIMLbot.UserConversationScope)">
            <summary>
            Returns the Unifiable to use for the next that part of a subsequent path
            </summary>
            <returns>the Unifiable to use for that</returns>
        </member>
        <member name="M:AltAIMLbot.UserImpl.getThat(AltAIMLbot.User)">
            <summary>
            Returns the first sentence of the last output from the bot
            </summary>
            <returns>the first sentence of the last output from the bot</returns>
        </member>
        <member name="M:AltAIMLbot.UserImpl.getThat(System.Int32,AltAIMLbot.User)">
            <summary>
            Returns the first sentence of the output "n" steps ago from the bot
            </summary>
            <param name="n">the number of steps back to go</param>
            <returns>the first sentence of the output "n" steps ago from the bot</returns>
        </member>
        <member name="M:AltAIMLbot.UserImpl.getThat(System.Int32,System.Int32,AltAIMLbot.User)">
            <summary>
            Returns the sentence numbered by "sentence" of the output "n" steps ago from the bot
            </summary>
            <param name="n">the number of steps back to go</param>
            <param name="sentence">the sentence number to get</param>
            <returns>the sentence numbered by "sentence" of the output "n" steps ago from the bot</returns>
        </member>
        <member name="M:AltAIMLbot.UserImpl.getInputSentence(AltAIMLbot.User)">
            <summary>
            Returns the first sentence of the last output from the bot
            </summary>
            <returns>the first sentence of the last output from the bot</returns>
        </member>
        <member name="M:AltAIMLbot.UserImpl.getInputSentence(System.Int32,AltAIMLbot.User)">
            <summary>
            Returns the first sentence from the output from the bot "n" steps ago
            </summary>
            <param name="n">the number of steps back to go</param>
            <returns>the first sentence from the output from the bot "n" steps ago</returns>
        </member>
        <member name="M:AltAIMLbot.UserImpl.getInputSentence(System.Int32,System.Int32,AltAIMLbot.User)">
            <summary>
            Returns the identified sentence number from the input from the bot "n" steps ago
            </summary>
            <param name="n">the number of steps back to go</param>
            <param name="sentence">the sentence number to return</param>
            <returns>the identified sentence number from the input from the bot "n" steps ago</returns>
        </member>
        <member name="M:AltAIMLbot.UserImpl.getRequestSentence(System.Int32,System.Int32,AltAIMLbot.User)">
            <summary>
            Returns the identified sentence number from the input from the bot "n" steps ago
            </summary>
            <param name="n">the number of steps back to go</param>
            <param name="sentence">the sentence number to return</param>
            <returns>the identified sentence number from the input from the bot "n" steps ago</returns>
        </member>
        <member name="M:AltAIMLbot.UserImpl.getResponseSentence(AltAIMLbot.User)">
            <summary>
            Returns the first sentence of the last output from the bot
            </summary>
            <returns>the first sentence of the last output from the bot</returns>
        </member>
        <member name="M:AltAIMLbot.UserImpl.getResponseSentence(System.Int32,AltAIMLbot.User)">
            <summary>
            Returns the first sentence from the output from the bot "n" steps ago
            </summary>
            <param name="n">the number of steps back to go</param>
            <returns>the first sentence from the output from the bot "n" steps ago</returns>
        </member>
        <member name="M:AltAIMLbot.UserImpl.getResponseSentence(System.Int32,System.Int32,AltAIMLbot.User)">
            <summary>
            Returns the identified sentence number from the output from the bot "n" steps ago
            </summary>
            <param name="n">the number of steps back to go</param>
            <param name="sentence">the sentence number to return</param>
            <returns>the identified sentence number from the output from the bot "n" steps ago</returns>
        </member>
        <member name="M:AltAIMLbot.UserImpl.addResult(AltAIMLbot.Result)">
            <summary>
            Adds the latest result from the bot to the Results collection
            </summary>
            <param name="latestResult">the latest result from the bot</param>
        </member>
        <member name="M:AltAIMLbot.UserImpl.addSetting(System.String,System.Object)">
            <summary>
            Adds a bespoke setting to the Settings class (accessed via the grabSettings(string name)
            method.
            </summary>
            <param name="name">The name of the new setting</param>
            <param name="value">The value associated with this setting</param>
        </member>
        <member name="M:AltAIMLbot.UserImpl.removeSetting(System.String)">
            <summary>
            Removes the named setting from this class
            </summary>
            <param name="name">The name of the setting to remove</param>
        </member>
        <member name="M:AltAIMLbot.UserImpl.updateSetting(System.String,System.Object)">
            <summary>
            Updates the named setting with a new value whilst retaining the position in the
            dictionary
            </summary>
            <param name="name">the name of the setting</param>
            <param name="value">the new value</param>
        </member>
        <member name="M:AltAIMLbot.UserImpl.grabSetting(System.String)">
            <summary>
            Returns the value of a setting given the name of the setting
            </summary>
            <param name="name">the name of the setting whose value we're interested in</param>
            <returns>the value of the setting</returns>
        </member>
        <member name="M:AltAIMLbot.UserImpl.containsLocalCalled(System.String)">
            <summary>
            Checks to see if a setting of a particular name exists
            </summary>
            <param name="name">The setting name to check</param>
            <returns>Existential truth value</returns>
        </member>
        <member name="M:AltAIMLbot.UserImpl.getThats">
            <summary>
            Returns the string to use for the next that part of a subsequent path
            </summary>
            <returns>the string to use for that</returns>
        </member>
        <member name="P:AltAIMLbot.UserImpl.Qstate">
            <summary>
            List of possible non-determinstic "states". When present will select the one with 
            the highest score
            </summary>
        </member>
        <member name="P:AltAIMLbot.UserImpl.blackBoardThat">
            <summary>
            the value of the "that" on the blackboard predicate
            </summary>
        </member>
        <member name="P:AltAIMLbot.UserImpl.rbot">
            <summary>
            The bot this user is using
            </summary>
        </member>
        <member name="P:AltAIMLbot.UserImpl.StartGraph">
            <summary>
            The grahmaster this user is using
            // this stil is not "listener"
            </summary>
        </member>
        <member name="P:AltAIMLbot.UserImpl.UserID">
            <summary>
            The GUID that identifies this user to the bot
            </summary>
        </member>
        <member name="P:AltAIMLbot.UserImpl.ResultsCopy">
            <summary>
            A collection of all the result objects returned to the user in this session
            (in reverse order of time)
            </summary>
        </member>
        <member name="P:AltAIMLbot.UserImpl.Topic">
            <summary>
            the value of the "topic" predicate
            </summary>
        </member>
        <member name="P:AltAIMLbot.UserImpl.Predicates">
            <summary>
            the predicates associated with this particular user
            </summary>
        </member>
        <member name="P:AltAIMLbot.UserImpl.LastResult">
            <summary>
            The most recent result to be returned by the bot
            </summary>
        </member>
        <member name="P:AltAIMLbot.UserImpl.IsTraced">
            <summary>
            If the user is being traced/debugged
            </summary>
        </member>
        <member name="P:AltAIMLbot.UserImpl.TopicString">
            <summary>
            the value of the "topic" predicate
            </summary>
        </member>
        <member name="P:AltAIMLbot.UserImpl.State">
            <summary>
            the value of the "state" predicate
            </summary>
        </member>
        <member name="T:AltAIMLbot.Request">
            <summary>
            Encapsulates all sorts of information about a request to the Proccessor for processing
            </summary>
        </member>
        <member name="P:AltAIMLbot.QuerySettingsReadOnly.StartGraphName">
            <summary>
            The Graph to start the query on
            </summary>
        </member>
        <member name="P:AltAIMLbot.QuerySettingsReadOnly.IsTraced">
            <summary>
            If the query is being traced
            </summary>
        </member>
        <member name="P:AltAIMLbot.QuerySettingsReadOnly.ProcessMultipleTemplates">
            <summary>
            Some patterns implies multiple templates
            </summary>
        </member>
        <member name="P:AltAIMLbot.QuerySettingsReadOnly.ProcessMultiplePatterns">
            <summary>
            After the first pattern, if the min/maxes are not satisfied.. keep going
            </summary>
        </member>
        <member name="P:AltAIMLbot.QuerySettingsReadOnly.MinOutputs">
            <summary>
            the number of "successfull" (non-empty) templates after "eval"
            </summary>
        </member>
        <member name="P:AltAIMLbot.QuerySettingsReadOnly.MinTemplates">
            <summary>
            The number of templates to harvest in query stage (should be at least one)
            </summary>
        </member>
        <member name="P:AltAIMLbot.QuerySettingsReadOnly.MinPatterns">
            <summary>
            The number of patterns to harvest in query stage (should be at least one)
            </summary>
        </member>
        <member name="P:AltAIMLbot.QuerySettingsSettable.ProcessMultipleTemplates">
            <summary>
            Some patterns implies multiple templates
            </summary>
        </member>
        <member name="P:AltAIMLbot.QuerySettingsSettable.ProcessMultiplePatterns">
            <summary>
            After the first pattern, if the min/maxes are not satisfied.. keep going
            </summary>
        </member>
        <member name="P:AltAIMLbot.QuerySettingsSettable.MinOutputs">
            <summary>
            the number of "successfull" (non-empty) templates after "eval"
            </summary>
        </member>
        <member name="P:AltAIMLbot.QuerySettingsSettable.MinTemplates">
            <summary>
            The number of templates to harvest in query stage (should be at least one)
            </summary>
        </member>
        <member name="P:AltAIMLbot.QuerySettingsSettable.MinPatterns">
            <summary>
            The number of patterns to harvest in query stage (should be at least one)
            </summary>
        </member>
        <member name="P:AltAIMLbot.QuerySettingsSettable.StartGraphName">
            <summary>
            The Graph to start the query on
            </summary>
        </member>
        <member name="P:AltAIMLbot.QuerySettingsSettable.IsTraced">
            <summary>
            If the query is being traced
            </summary>
        </member>
        <member name="P:AltAIMLbot.QuerySettings.StartGraphName">
            <summary>
            The Graph to start the query on
            </summary>
        </member>
        <member name="P:AltAIMLbot.QuerySettings.IsTraced">
            <summary>
            If the query is being traced
            </summary>
        </member>
        <member name="P:AltAIMLbot.QuerySettings.ProcessMultipleTemplates">
            <summary>
            Some patterns implies multiple templates
            </summary>
        </member>
        <member name="P:AltAIMLbot.QuerySettings.ProcessMultiplePatterns">
            <summary>
            After the first pattern, if the min/maxes are not satisfied.. 
            Try a new pattern
            </summary>
        </member>
        <member name="P:AltAIMLbot.QuerySettings.MinOutputs">
            <summary>
            the number of "successfull" (non-empty) templates after "eval"
            </summary>
        </member>
        <member name="P:AltAIMLbot.QuerySettings.MinSetVars">
            <summary>
            The number of sets before the query is stopped
            </summary>
        </member>
        <member name="P:AltAIMLbot.QuerySettings.MinGetVars">
            <summary>
            The number of gets before the query is stopped
            </summary>
        </member>
        <member name="P:AltAIMLbot.QuerySettings.MinTemplates">
            <summary>
            The number of templates to harvest in query stage (should be at least one)
            </summary>
        </member>
        <member name="P:AltAIMLbot.QuerySettings.MinPatterns">
            <summary>
            The number of patterns to harvest in query stage (should be at least one)
            </summary>
        </member>
        <member name="P:AltAIMLbot.QuerySettings.SraiDepth">
            <summary>
            The number srai's one can decend generation stage
            the "Min" is what is starts out with (defualt 0)
            </summary>
        </member>
        <member name="P:AltAIMLbot.Utils.RequestOrQuery.RequesterPredicates">
            <summary>
            The get/set user dictionary
            </summary>
        </member>
        <member name="P:AltAIMLbot.Utils.RequestOrQuery.ResponderPredicates">
            <summary>
            The get/set bot dictionary (or user)
            </summary>
        </member>
        <member name="P:AltAIMLbot.Utils.RequestOrQuery.TargetSettings">
            <summary>
            If loading/saing settings from this request this may be eitehr the requestor/responders Dictipoanry
            </summary>
        </member>
        <member name="F:AltAIMLbot.Request._result">
            <summary>
            The final result produced by this request
            </summary>
        </member>
        <member name="M:AltAIMLbot.Request.#ctor(AltAIMLbot.Unifiable,AltAIMLbot.User,AltAIMLbot.Unifiable,AltAIMLbot.User,AltAIMLbot.AltBot,AltAIMLbot.Request,AltAIMLbot.Utils.GraphMaster)">
            <summary>
            Ctor
            </summary>
            <param name="rawInput">The raw input from the user</param>
            <param name="user">The user who made the request</param>
            <param name="bot">The bot to which this is a request</param>
        </member>
        <member name="M:AltAIMLbot.Request.IsAllowedGraph(AltAIMLbot.Utils.GraphMaster)">
            <summary>
            TopLevelQuery calls this
            </summary>
            <param name="graph"></param>
            <returns></returns>
        </member>
        <member name="P:AltAIMLbot.Request.Durration">
            <summary>
            The amount of time the request took to process
            </summary>
        </member>
        <member name="P:AltAIMLbot.Request.rawInput">
            <summary>
            The raw input from the user
            </summary>
        </member>
        <member name="P:AltAIMLbot.Request.ChatInput">
            <summary>
            The raw input from the user
            </summary>
        </member>
        <member name="P:AltAIMLbot.Request.StartedOn">
            <summary>
            The time at which this request was created within the system
            </summary>
        </member>
        <member name="P:AltAIMLbot.Request.Requester">
            <summary>
            The user who made this request
            </summary>
        </member>
        <member name="P:AltAIMLbot.Request.Responder">
            <summary>
            The user who is the target of this request
            </summary>
        </member>
        <member name="P:AltAIMLbot.Request.TargetBot">
            <summary>
            The Proccessor to which the request is being made
            </summary>
        </member>
        <member name="P:AltAIMLbot.Request.WhyRequestComplete">
            <summary>
            Flag to show that the request has timed out
            </summary>
        </member>
        <member name="P:AltAIMLbot.Request.StartGraphName">
            <summary>
            The Graph to start the query on
            </summary>
        </member>
        <member name="T:AltAIMLbot.Result">
            <summary>
            Encapsulates information about the result of a request to the bot
            </summary>
        </member>
        <member name="P:AltAIMLbot.InteractionResult.IsTraced">
            The user that is providing the <that/> answer
        </member>
        <member name="P:AltAIMLbot.InteractionResult.InputSentences">
            <summary>
            The individual sentences that constitute the raw input from the user
            </summary>
        </member>
        <member name="P:AltAIMLbot.InteractionResult.OutputSentences">
            <summary>
            The individual sentences produced by the bot that form the complete response
            </summary>
        </member>
        <member name="P:AltAIMLbot.InteractionResult.request">
            <summary>
            The request from the user
            </summary>
        </member>
        <member name="P:AltAIMLbot.InteractionResult.TemplatesSucceeded">
            <summary>
            The user for whom this is a result
            </summary>
        </member>
        <member name="P:AltAIMLbot.InteractionResult.SetOutput">
            <summary>
            If the query is being traced
            </summary>
        </member>
        <member name="P:AltAIMLbot.InteractionResult.Output">
            <summary>
            The result from the bot with logging and checking
            </summary>
        </member>
        <member name="P:AltAIMLbot.InteractionResult.RawOutput">
            <summary>
            Returns the raw sentences without any logging 
            </summary>
        </member>
        <member name="M:AltAIMLbot.Result.FreeRequest">
            The user that is providing the <that/> answer
        </member>
        <member name="M:AltAIMLbot.Result.#ctor(System.String,AltAIMLbot.UserDuringProcessing,AltAIMLbot.AltBot,AltAIMLbot.Request,AltAIMLbot.UserConversationScope)">
            <summary>
            Ctor
            </summary>
            <param name="user">The user for whom this is a result</param>
            <param name="bot">The bot providing the result</param>
            <param name="request">The request that originated this result</param>
        </member>
        <member name="M:AltAIMLbot.Result.ToString">
            <summary>
            Returns the raw output from the bot
            </summary>
            <returns>The raw output from the bot</returns>
        </member>
        <member name="P:AltAIMLbot.Result.SubQueries">
            <summary>
            The subQueries processed by the bot's graphmaster that contain the templates that 
            are to be converted into the collection of Sentences
            </summary>
        </member>
        <member name="P:AltAIMLbot.Result.InputSentences">
            <summary>
            The individual sentences that constitute the raw input from the user
            </summary>
        </member>
        <member name="P:AltAIMLbot.Result.InputPaths">
            <summary>
            The normalized sentence(s) (paths) fed into the graphmaster
            </summary>
        </member>
        <member name="P:AltAIMLbot.Result.OutputSentences">
            <summary>
            The individual sentences produced by the bot that form the complete response
            </summary>
        </member>
        <member name="P:AltAIMLbot.Result.request">
            <summary>
            The request from the user
            </summary>
        </member>
        <member name="P:AltAIMLbot.Result.TemplatesSucceeded">
            <summary>
            The user for whom this is a result
            </summary>
        </member>
        <member name="P:AltAIMLbot.Result.SetOutput">
            <summary>
            If the query is being traced
            </summary>
        </member>
        <member name="P:AltAIMLbot.Result.RawInput">
            <summary>
            The raw input from the user
            </summary>
        </member>
        <member name="P:AltAIMLbot.Result.Output">
            <summary>
            The result from the bot with logging and checking
            </summary>
        </member>
        <member name="P:AltAIMLbot.Result.RawOutput">
            <summary>
            Returns the raw sentences without any logging 
            </summary>
        </member>
        <member name="P:AltAIMLbot.Result.NormalizedOutput">
            <summary>
            @see ChatOutput.TheMainSentence
            </summary>
        </member>
        <member name="T:AltAIMLbot.Utils.AIMLLoader">
            <summary>
            A utility class for loading AIML files from disk into the graphmaster structure that 
            forms an AIML RProcessor's "brain"
            </summary>
        </member>
        <member name="F:AltAIMLbot.Utils.AIMLLoader.RawUserInput">
            <summary>
            Allow all chars in RawUserInput
            </summary>
        </member>
        <member name="F:AltAIMLbot.Utils.AIMLLoader.GlobalFilteredWords">
            <summary>
            Deletes any content that contains these words in it
            TODO make this done in a  text file
            </summary>
        </member>
        <member name="M:AltAIMLbot.Utils.AIMLLoader.#ctor(AltAIMLbot.AltBot,AltAIMLbot.Request)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot whose brain is being processed</param>
        </member>
        <member name="M:AltAIMLbot.Utils.AIMLLoader.loadAIMLDir(System.String,AltAIMLbot.Utils.LoaderOptions)">
            <summary>
            Loads the AIML from files found in the path
            </summary>
            <param name="path"></param>                
        </member>
        <member name="M:AltAIMLbot.Utils.AIMLLoader.loadAIMLFile(System.String,AltAIMLbot.Utils.LoaderOptions,System.Boolean)">
            <summary>
            Given the name of a file in the AIML path directory, attempts to load it into the 
            graphmaster
            </summary>
            <param name="path">The name of the file to process</param>
        </member>
        <member name="M:AltAIMLbot.Utils.AIMLLoader.loadAIMLString(System.String,AltAIMLbot.Utils.LoaderOptions)">
            <summary>
            Given an XML document containing valid AIML, attempts to load it into the graphmaster
            </summary>
            <param name="doc">The XML document containing the AIML</param>
            <param name="loadOpts">Where the XML document originated</param>
        </member>
        <member name="M:AltAIMLbot.Utils.AIMLLoader.loadAIMLStream(System.IO.Stream,AltAIMLbot.Utils.LoaderOptions)">
            <summary>
            Given an XML document containing valid AIML, attempts to load it into the graphmaster
            </summary>
            <param name="doc">The XML document containing the AIML</param>
            <param name="loadOpts">Where the XML document originated</param>
        </member>
        <member name="M:AltAIMLbot.Utils.AIMLLoader.loadAIMLStreamFallback(System.IO.Stream,AltAIMLbot.Utils.LoaderOptions)">
            <summary>
            Given an XML document containing valid AIML, attempts to load it into the graphmaster
            </summary>
            <param name="doc">The XML document containing the AIML</param>
            <param name="loadOpts">Where the XML document originated</param>
        </member>
        <member name="M:AltAIMLbot.Utils.AIMLLoader.processTopic(System.Xml.XmlNode,System.Xml.XmlNode,AltAIMLbot.Utils.LoaderOptions,System.Collections.Generic.List{AltAIMLbot.Utils.ConversationCondition})">
            <summary>
            Given a "topic" topicNode, processes all the categories for the topic and adds them to the 
            graphmaster "brain"
            </summary>
            <param name="topicNode">the "topic" node</param>
            <param name="path">the file from which this topicNode is taken</param>
        </member>
        <member name="M:AltAIMLbot.Utils.AIMLLoader.processOuterThat(System.Xml.XmlNode,System.Xml.XmlNode,AltAIMLbot.Utils.LoaderOptions,System.Collections.Generic.List{AltAIMLbot.Utils.ConversationCondition})">
            <summary>
            Given a "topic" topicNode, processes all the categories for the topic and adds them to the 
            graphmaster "brain"
            </summary>
            <param name="topicNode">the "topic" node</param>
            <param name="path">the file from which this topicNode is taken</param>
        </member>
        <member name="M:AltAIMLbot.Utils.AIMLLoader.processCategory(System.Xml.XmlNode,System.Xml.XmlNode,AltAIMLbot.Utils.LoaderOptions,System.Collections.Generic.List{AltAIMLbot.Utils.ConversationCondition})">
            <summary>
            Adds a category to the graphmaster structure using the default topic ("*")
            </summary>
            <param name="cateNode">the XML node containing the category</param>
            <param name="path">the file from which this category was taken</param>
        </member>
        <member name="M:AltAIMLbot.Utils.AIMLLoader.processCategoryWithTopic(System.Xml.XmlNode,AltAIMLbot.Unifiable,System.Xml.XmlNode,AltAIMLbot.Utils.LoaderOptions,System.Collections.Generic.List{AltAIMLbot.Utils.ConversationCondition})">
            <summary>
            Adds a category to the graphmaster structure using the given topic
            </summary>
            <param name="cateNode">the XML node containing the category</param>
            <param name="topicName">the topic to be used</param>
            <param name="loadOpts">the file from which this category was taken</param>
        </member>
        <member name="M:AltAIMLbot.Utils.AIMLLoader.extractPrecondNode(System.Xml.XmlNode,System.String,System.Xml.XmlNode,System.String@,System.Xml.XmlNode@)">
            <summary>
            Generates a path from a category XML cateNode and topic name
            </summary>
            <param name="cateNode">the category XML node</param>
            <param name="topicName">the topic</param>
            <param name="isUserInput">marks the path to be created as originating from user input - so
            normalize out the * and _ wildcards used by AIML</param>
            <returns>The appropriately processed path</returns>
        </member>
        <member name="M:AltAIMLbot.Utils.AIMLLoader.generatePath(AltAIMLbot.Unifiable,AltAIMLbot.Unifiable,AltAIMLbot.Unifiable,AltAIMLbot.Unifiable,System.Boolean,System.Func{AltAIMLbot.Unifiable,System.Boolean,AltAIMLbot.Unifiable})">
            <summary>
            Generates a path from the passed arguments
            </summary>
            <param name="pattern">the pattern</param>
            <param name="that">the that</param>
            <param name="topicName">the topic</param>
            <param name="isUserInput">marks the path to be created as originating from user input - so
            normalize out the * and _ wildcards used by AIML</param>
            <returns>The appropriately processed path</returns>
        </member>
        <member name="M:AltAIMLbot.Utils.AIMLLoader.generateCPath(AltAIMLbot.Unifiable,AltAIMLbot.Unifiable,AltAIMLbot.Unifiable,AltAIMLbot.Unifiable,System.Boolean,System.Func{AltAIMLbot.Unifiable,System.Boolean,AltAIMLbot.Unifiable})">
            <summary>
            Generates a path from the passed arguments
            </summary>
            <param name="pattern">the pattern</param>
            <param name="that">the that</param>
            <param name="topicName">the topic</param>
            <param name="isUserInput">marks the path to be created as originating from user input - so
            normalize out the * and _ wildcards used by AIML</param>
            <returns>The appropriately processed path</returns>
        </member>
        <member name="M:AltAIMLbot.Utils.AIMLLoader.Normalize(System.String,System.Boolean)">
            <summary>
            Given an input, provide a normalized output
            </summary>
            <param name="input">The Unifiable to be normalized</param>
            <param name="isUserInput">True if the Unifiable being normalized is part of the user input path - 
            flags that we need to normalize out * and _ chars</param>
            <returns>The normalized Unifiable</returns>
        </member>
        <member name="P:AltAIMLbot.Utils.AIMLLoader.RProcessorOld">
            <summary>
            The RProcessor whose brain is being processed
            </summary>
        </member>
        <member name="F:AltAIMLbot.Utterance.EnglishSentences">
            <summary>
            The individual sentences that constitute the raw input from the user
            </summary>
        </member>
        <member name="F:AltAIMLbot.Utterance.English">
            <summary>
            The raw input from the user
            </summary>
        </member>
        <member name="P:AltAIMLbot.Utterance.NormalizedPaths">
            <summary>
            The normalized sentence(s) (paths) fed into the graphmaster
            </summary>
        </member>
        <member name="P:AltAIMLbot.Utterance.Speaker">
            <summary>
            The user that made this Utterance
            </summary>
        </member>
        <member name="P:AltAIMLbot.Utterance.ToWhom">
            <summary>
            The user responding to the request
            </summary>
        </member>
        <member name="P:AltAIMLbot.Utterance.That">
            <summary>
            The last meaning unit extracted from what the ToWhom said previous
            </summary>
        </member>
        <member name="P:AltAIMLbot.Utterance.InResponse">
            <summary>
            The last Utterance containing That
            </summary>
        </member>
        <member name="P:AltAIMLbot.Utterance.RawText">
            <summary>
            Returns the raw sentences without any logging 
            </summary>
        </member>
        <member name="P:AltAIMLbot.Utterance.TheMainSentence">
            <summary>
            TheMainSentence is the last question (if it contains one)
             else the last sentence in collection
            </summary>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.xml">
            <summary>
            An element called bot, which may be considered a restricted version of get, is used to 
            tell the AIML interpreter that it should substitute the contents of a "bot predicate". The 
            value of a bot predicate is set at load-time, and cannot be changed at run-time. The AIML 
            interpreter may decide how to set the values of bot predicate at load-time. If the bot 
            predicate has no value defined, the AIML interpreter should substitute an empty Unifiable.
            
            The bot element has a required name attribute that identifies the bot predicate. 
            
            The bot element does not have any content. 
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.xml.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="Proc">The Proc involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.cycterm">
            <summary>
            &lt;cycterm&gt; translates an English word/phrase into a Cyc symbol 
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.cycterm.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.TagHandlerProcessor">
            <summary>
            Encapsulates an AIML Custom Tag Proccessor.
            </summary>
            <summary>
            Encapsulates an AIML Tag Proccessor.
            </summary>
        </member>
        <member name="F:AltAIMLbot.TagHandlerProcessor.CustomTags">
            <summary>
            Holds information about the available custom tag handling classes (if loaded)
            Key = class name
            Value = TagHandler class that provides information about the class
            </summary>
        </member>
        <member name="F:AltAIMLbot.TagHandlerProcessor.LateBindingAssemblies">
            <summary>
            Holds references to the assemblies that hold the custom tag handling code.
            </summary>
        </member>
        <member name="M:AltAIMLbot.TagHandlerProcessor.getBespokeTags(AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Searches the CustomTag collection and processes the AIML if an appropriate tag handler is found
            </summary>
            <param name="user">the user who originated the request</param>
            <param name="query">the query that produced targetBot node</param>
            <param name="request">the request from the user</param>
            <param name="result">the result to be sent to the user</param>
            <param name="node">the node to evaluate</param>
            <returns>the output Unifiable</returns>
        </member>
        <member name="M:AltAIMLbot.TagHandlerProcessor.loadCustomTagHandlers(System.String)">
            <summary>
            Loads any custom tag handlers found in the dll referenced in the argument
            </summary>
            <param name="pathToDLL">the path to the dll containing the custom tag handling code</param>
        </member>
        <member name="M:AltAIMLbot.TagHandlerProcessor.proccessResponse(AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode,AltAIMLbot.Unifiable,System.Boolean@,System.Boolean@,AltAIMLbot.Utils.AIMLTagHandlerU,AltAIMLbot.Utils.TemplateInfo,System.Boolean,System.Boolean)">
            <summary>
            Should return the child tagHandler
            </summary>
            <param name="query"></param>
            <param name="request"></param>
            <param name="result"></param>
            <param name="templateNode"></param>
            <param name="sGuard"></param>
            <param name="createdOutput"></param>
            <param name="templateSucceeded"></param>
            <param name="parentHandler"></param>
            <param name="templateInfo"></param>
            <param name="copyChild"></param>
            <param name="copyParent"></param>
            <returns></returns>
        </member>
        <member name="M:AltAIMLbot.TagHandlerProcessor.processNode(System.Xml.XmlNode,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,AltAIMLbot.User,AltAIMLbot.Utils.AIMLTagHandlerU,System.Boolean,System.Boolean,AltAIMLbot.Utils.AIMLTagHandlerU,System.Boolean,System.Boolean@)">
            <summary>
            Recursively evaluates the template nodes returned from the Proccessor
            </summary>
            <param name="node">the node to evaluate</param>
            <param name="query">the query that produced targetBot node</param>
            <param name="request">the request from the user</param>
            <param name="result">the result to be sent to the user</param>
            <param name="user">the user who originated the request</param>
            <returns>the output Unifiable</returns>
        </member>
        <member name="M:AltAIMLbot.TagHandlerProcessor.processNodeVV(System.Xml.XmlNode,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,AltAIMLbot.User,AltAIMLbot.Utils.AIMLTagHandlerU,System.Boolean,System.Boolean,AltAIMLbot.Utils.AIMLTagHandlerU,System.Boolean@)">
            <summary>
            Recursively evaluates the template nodes returned from the Proccessor
            </summary>
            <param name="node">the node to evaluate</param>
            <param name="query">the query that produced targetBot node</param>
            <param name="request">the request from the user</param>
            <param name="result">the result to be sent to the user</param>
            <param name="user">the user who originated the request</param>
            <returns>the output Unifiable</returns>
        </member>
        <member name="T:AltAIMLbot.BayesClassifier">
            <summary>
            Implements a straightforward Baysian Classifier in Log space.
            will serialize to a file in XML format
            </summary>
        </member>
        <member name="M:AltAIMLbot.LevenshteinDistance.Compute(System.String,System.String)">
            <summary>
            Compute the distance between two strings.
            </summary>
        </member>
        <member name="M:AltAIMLbot.LevenshteinDistance.EditDistance``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <SUMMARY>Computes the Levenshtein Edit Distance between two enumerables.</SUMMARY>
            <TYPEPARAM name="T">The type of the items in the enumerables.</TYPEPARAM>
            <PARAM name="x">The first enumerable.</PARAM>
            <PARAM name="y">The second enumerable.</PARAM>
            <RETURNS>The edit distance.</RETURNS>
        </member>
        <member name="T:AltAIMLbot.DoubleMetaphoneStringExtension">
            <summary>
            DoubleMetaphone string extension
            </summary>
            <remarks>
            Original C++ implementation:
            	"Double Metaphone (c) 1998, 1999 by Lawrence Philips"
            	http://www.ddj.com/cpp/184401251?pgno=1
            </remarks>
        </member>
        <member name="T:AltAIMLbot.Utils.TagHandler">
            <summary>
            Encapsulates information about a custom tag class
            </summary>
        </member>
        <member name="F:AltAIMLbot.Utils.TagHandler.AssemblyName">
            <summary>
            The assembly this class is found in
            </summary>
        </member>
        <member name="F:AltAIMLbot.Utils.TagHandler.ClassName">
            <summary>
            The class name for the assembly
            </summary>
        </member>
        <member name="F:AltAIMLbot.Utils.TagHandler.TagName">
            <summary>
            The name of the tag this class will deal with
            </summary>
        </member>
        <member name="M:AltAIMLbot.Utils.TagHandler.Instantiate(System.Collections.Generic.Dictionary{System.String,System.Reflection.Assembly},AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode,AltAIMLbot.AltBot)">
            <summary>
            Provides an instantiation of the class represented by this tag-handler
            </summary>
            <param name="Assemblies">All the assemblies the bot knows about</param>
            <returns>The instantiated class</returns>
        </member>
        <member name="T:AltAIMLbot.CycNLTagHandlers.NumberTemplate">
            <summary>
            IMPLEMENTED FOR COMPLETENESS REASONS
            </summary>
        </member>
        <member name="M:AltAIMLbot.CycNLTagHandlers.NumberTemplate.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be processed</param>
        </member>
        <member name="F:AltAIMLbot.Proof.UsedTemplates">
            <summary>
            Categories uses life a "proof"
            Also used ot prevent looping
            </summary>
        </member>
        <member name="T:AltAIMLbot.SystemExecHandler">
            <summary>
            Return a Response object
            </summary>
            <param name="cmd"></param>
            <param name="requestOrNull"></param>
            <returns></returns>
        </member>
        <member name="T:AltAIMLbot.Normalize.SplitIntoSentences">
            <summary>
            Splits the raw input into its constituent sentences. Split using the tokens found in 
            the bots Splitters Unifiable array.
            </summary>
        </member>
        <member name="F:AltAIMLbot.Normalize.SplitIntoSentences.bot">
            <summary>
            The bot this sentence splitter is associated with
            </summary>
        </member>
        <member name="F:AltAIMLbot.Normalize.SplitIntoSentences.inputString">
            <summary>
            The raw input Unifiable
            </summary>
        </member>
        <member name="M:AltAIMLbot.Normalize.SplitIntoSentences.#ctor(System.Func{System.String[]},AltAIMLbot.Unifiable)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot this sentence splitter is associated with</param>
            <param name="inputString">The raw input Unifiable to be processed</param>
        </member>
        <member name="M:AltAIMLbot.Normalize.SplitIntoSentences.#ctor(System.Func{System.String[]})">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot this sentence splitter is associated with</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AltAIMLbot.Normalize.SplitIntoSentences.Transform(AltAIMLbot.Unifiable)" -->
        <!-- Badly formed XML comment ignored for member "M:AltAIMLbot.Normalize.SplitIntoSentences.Transform" -->
        <member name="T:AltAIMLbot.AIMLTagHandlersU.when">
            <summary>
            The date element tells the AIML interpreter that it should substitute the system local 
            date and time. No formatting constraints on the output are specified.
            
            The date element does not have any content. 
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.when.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.sr">
            <summary>
            The sr element is a shortcut for: 
            
            <srai><star/></srai> 
            
            The atomic sr does not have any content. 
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.sr.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.recursiveVerbatum">
            <summary>
            The version element tells the AIML interpreter that it should substitute the version number
            of the AIML interpreter.
            
            The version element does not have any content. 
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.recursiveVerbatum.#ctor(System.Xml.XmlNode,AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode,System.Boolean)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.lazyClosure.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.lazyClosure.RecurseProcess">
            <summary>
            The method that does the actual Processing of the text.
            </summary>
            <returns>The resulting Processed text</returns>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.lazyClosure.ProcessChangeU">
            <summary>
            The method that does the actual Processing of the text.
            </summary>
            <returns>The resulting Processed text</returns>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.cycquery">
            <summary>
            &lt;cycquery&gt; executes a CycL statement and returns the result 
            </summary>
        </member>
        <member name="M:AltAIMLbot.Database.CycTagHandler.ProcessChangeU">
            <summary>
            The method that does the actual processing of the text.
            </summary>
            <returns>The resulting processed text</returns>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.cycquery.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the query</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:AltAIMLbot.Variables.SettingsDictionaryReal" -->
        <member name="F:AltAIMLbot.Variables.SettingsDictionaryReal.settingsHash">
            <summary>
            Holds a dictionary of settings
            </summary>
        </member>
        <member name="F:AltAIMLbot.Variables.SettingsDictionaryReal.bot">
            <summary>
            The bot this dictionary is associated with (only for writting log)
            </summary>
        </member>
        <member name="M:AltAIMLbot.Variables.SettingsDictionaryReal.Add(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
                            </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
                            </exception>
        </member>
        <member name="M:AltAIMLbot.Variables.SettingsDictionaryReal.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. 
                            </exception>
        </member>
        <member name="M:AltAIMLbot.Variables.SettingsDictionaryReal.Contains(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
                            </param>
        </member>
        <member name="M:AltAIMLbot.Variables.SettingsDictionaryReal.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.String}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
                            </param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.
                            </param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.
                            </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.
                            </exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.
                                -or-
                            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
                                -or-
                                The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
                                -or-
                                Type <paramref name="array"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
                            </exception>
        </member>
        <member name="M:AltAIMLbot.Variables.SettingsDictionaryReal.Remove(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
                            </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
                            </exception>
        </member>
        <member name="M:AltAIMLbot.Variables.SettingsDictionaryReal.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:AltAIMLbot.Variables.SettingsDictionaryReal.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:AltAIMLbot.Variables.SettingsDictionaryReal.#ctor(System.String,AltAIMLbot.AltBot,AltAIMLbot.Variables.KeyValueList)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot for whom this is a settings dictionary</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AltAIMLbot.Variables.SettingsDictionaryReal.loadSettings(System.String,AltAIMLbot.Request)" -->
        <!-- Badly formed XML comment ignored for member "M:AltAIMLbot.Variables.SettingsDictionaryReal.loadSettingNode(AltAIMLbot.Variables.ISettingsDictionary,System.Collections.IEnumerable,AltAIMLbot.Variables.SettingsPolicy,AltAIMLbot.Request)" -->
        <member name="M:AltAIMLbot.Variables.SettingsDictionaryReal.addSetting(System.String,System.Object)">
            <summary>
            Adds a bespoke setting to the Settings class (accessed via the grabSettings(string name)
            method.
            </summary>
            <param name="name">The name of the new setting</param>
            <param name="value">The value associated with this setting</param>
        </member>
        <member name="M:AltAIMLbot.Variables.SettingsDictionaryReal.removeSetting(System.String)">
            <summary>
            Removes the named setting from this class
            </summary>
            <param name="name">The name of the setting to remove</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AltAIMLbot.Variables.SettingsDictionaryReal.removeFromHash(System.String)" -->
        <member name="M:AltAIMLbot.Variables.SettingsDictionaryReal.updateSetting(System.String,System.Object)">
            <summary>
            Updates the named setting with a new value whilst retaining the position in the
            dictionary
            </summary>
            <param name="name">the name of the setting</param>
            <param name="value">the new value</param>
        </member>
        <member name="M:AltAIMLbot.Variables.SettingsDictionaryReal.clearSettings">
            <summary>
            Clears the dictionary to an empty state
            </summary>
        </member>
        <member name="M:AltAIMLbot.Variables.SettingsDictionaryReal.grabSetting(System.String,System.Boolean)">
            <summary>
            Returns the value of a setting given the name of the setting
            </summary>
            <param name="name">the name of the setting whose value we're interested in</param>
            <returns>the value of the setting</returns>
        </member>
        <member name="M:AltAIMLbot.Variables.SettingsDictionaryReal.grabSetting(System.String)">
            <summary>
            Returns the value of a setting given the name of the setting
            </summary>
            <param name="name">the name of the setting whose value we're interested in</param>
            <returns>the value of the setting</returns>
        </member>
        <member name="M:AltAIMLbot.Variables.SettingsDictionaryReal.containsLocalCalled(System.String)">
            <summary>
            Checks to see if a setting of a particular name exists
            </summary>
            <param name="name">The setting name to check</param>
            <returns>Existential truth value</returns>
        </member>
        <member name="M:AltAIMLbot.Variables.SettingsDictionaryReal.SettingNames(MushDLR223.ScriptEngines.ICollectionRequester,System.Int32)">
            <summary>
            Returns a collection of the names of all the settings defined in the dictionary
            </summary>
            <returns>A collection of the names of all the settings defined in the dictionary</returns>
        </member>
        <member name="M:AltAIMLbot.Variables.SettingsDictionaryReal.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the key; otherwise, false.
            </returns>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
                            </param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
                            </exception>
        </member>
        <member name="M:AltAIMLbot.Variables.SettingsDictionaryReal.Add(System.String,System.String)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <param name="key">The object to use as the key of the element to add.
                            </param><param name="value">The object to use as the value of the element to add.
                            </param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
                            </exception><exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
                            </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
                            </exception>
        </member>
        <member name="M:AltAIMLbot.Variables.SettingsDictionaryReal.Remove(System.String)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key"/> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
            <param name="key">The key of the element to remove.
                            </param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
                            </exception><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"/> is read-only.
                            </exception>
        </member>
        <member name="M:AltAIMLbot.Variables.SettingsDictionaryReal.TryGetValue(System.String,System.String@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/> contains an element with the specified key; otherwise, false.
            </returns>
            <param name="key">The key whose value to get.
                            </param><param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value"/> parameter. This parameter is passed uninitialized.
                            </param><exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.
                            </exception>
        </member>
        <member name="F:AltAIMLbot.Variables.SettingsDictionaryReal.DefaultFormatter">
            <summary>
            //"$bot feels $value emotion towards $user";
            </summary>
        </member>
        <member name="M:AltAIMLbot.Variables.SettingsDictionaryReal.GetMeta(System.String,System.String)">
            <summary>
            $user $relation $value   $robot  $dict
              1      2        3       4       5 
            </summary>
            <param name="relation"></param>
            <returns></returns>
        </member>
        <member name="M:AltAIMLbot.Variables.SettingsDictionaryReal.Clone(AltAIMLbot.Variables.ISettingsDictionary)">
            <summary>
            Copies the values in the current object into the SettingsDictionary passed as the target
            </summary>
            <param name="target">The target to recieve the values from this SettingsDictionary</param>
        </member>
        <member name="M:AltAIMLbot.Variables.SettingsDictionaryReal.AddMissingKeys(AltAIMLbot.Variables.ISettingsDictionary,AltAIMLbot.Variables.ISettingsDictionary,MushDLR223.ScriptEngines.ICollectionRequester)">
            <summary>
            Copies the values in the current object into the SettingsDictionary passed as the target
            If the keys are missing
            </summary>
            <param name="target">The target to recieve the values from this SettingsDictionary</param>
        </member>
        <!-- Badly formed XML comment ignored for member "P:AltAIMLbot.Variables.SettingsDictionaryReal.KeyZ" -->
        <member name="P:AltAIMLbot.Variables.SettingsDictionaryReal.Count">
            <summary>
            The number of items in the dictionary
            </summary>
        </member>
        <member name="P:AltAIMLbot.Variables.SettingsDictionaryReal.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:AltAIMLbot.Variables.SettingsDictionaryReal.DictionaryAsXML">
            <summary>
            An XML representation of the contents of this dictionary
            </summary>
        </member>
        <member name="P:AltAIMLbot.Variables.SettingsDictionaryReal.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="P:AltAIMLbot.Variables.SettingsDictionaryReal.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1"/> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </returns>
        </member>
        <member name="M:AltAIMLbot.Variables.SettingsDictionaryEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:AltAIMLbot.Variables.SettingsDictionaryEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. 
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:AltAIMLbot.Variables.SettingsDictionaryEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. 
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:AltAIMLbot.Variables.SettingsDictionaryEnumerator.Current">
            <summary>
            Gets the element in the collection at the current position of the enumerator.
            </summary>
            <returns>
            The element in the collection at the current position of the enumerator.
            </returns>
        </member>
        <member name="P:AltAIMLbot.Variables.SettingsDictionaryEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <returns>
            The current element in the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element.
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="T:AltAIMLbot.Utils.MatchState">
            <summary>
            Denotes what part of the input path a node represents.
            
            Used when pushing values represented by wildcards onto collections for
            the star, thatstar and topicstar AIML values.
            </summary>
        </member>
        <member name="T:AltAIMLbot.Utils.Node">
            <summary>
            Encapsulates a node in the graphmaster tree structure
            </summary>
        </member>
        <member name="F:AltAIMLbot.Utils.Node.children0">
            <summary>
            Contains the child nodes of this node
            </summary>
        </member>
        <member name="F:AltAIMLbot.Utils.Node.TemplateInfos">
            <summary>
            The template (if any) associated with this node
            </summary>
        </member>
        <member name="F:AltAIMLbot.Utils.Node.TemplateInfosDisabled">
            <summary>
            The template (if any) associated with this node
            </summary>
        </member>
        <member name="F:AltAIMLbot.Utils.Node.word">
            <summary>
            The word that identifies this node to it's ParentResult node
            </summary>
        </member>
        <member name="M:AltAIMLbot.Utils.Node.addTerminal(System.Xml.XmlNode,System.Xml.XmlNode,AltAIMLbot.Unifiable,AltAIMLbot.Unifiable,AltAIMLbot.Unifiable,AltAIMLbot.Utils.LoaderOptions,AltAIMLbot.Unifiable,System.Collections.Generic.List{AltAIMLbot.Utils.ConversationCondition},System.Boolean@)">
            <summary>
            Adds a category to the node
            </summary>
            <param name="path">the path for the category</param>
            <param name="template">the template to find at the end of the path</param>
            <param name="filename">the file that was the source of this category</param>
        </member>
        <member name="M:AltAIMLbot.Utils.Node.addPathNodeChilds(AltAIMLbot.Unifiable,AltAIMLbot.Utils.NodeAdder)">
            <summary>
            Adds a category to the node
            </summary>
            <param name="path">the path for the category</param>
            <param name="outTemplate">the outTemplate to find at the end of the path</param>
            <param name="filename">the file that was the source of this category</param>
        </member>
        <member name="M:AltAIMLbot.Utils.Node.evaluate(System.String,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Utils.MatchState,AltAIMLbot.StringAppendableUnifiableImpl)">
            <summary>
            Navigates this node (and recusively into child nodes) for a match to the path passed as an argument
            whilst processing the referenced request
            </summary>
            <param name="path">The normalized path derived from the user's input</param>
            <param name="query">The query that this search is for</param>
            <param name="request">An encapsulation of the request from the user</param>
            <param name="matchstate">The part of the input path the node represents</param>
            <param name="wildcard">The contents of the user input absorbed by the AIML wildcards "_" and "*"</param>
            <returns>The template to process to generate the output</returns>
        </member>
        <member name="M:AltAIMLbot.Utils.Node.storeWildCard(AltAIMLbot.Unifiable,AltAIMLbot.StringAppendableUnifiableImpl)">
            <summary>
            Correctly stores a word in the wildcard slot
            </summary>
            <param name="word">The word matched by the wildcard</param>
            <param name="wildcard">The contents of the user input absorbed by the AIML wildcards "_" and "*"</param>
        </member>
        <member name="M:AltAIMLbot.Utils.KeySorterImpl.Compare(System.String,System.String)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <returns>
            Value 
                                Condition 
                                Less than zero
                            <paramref name="x"/> is less than <paramref name="y"/>.
                                Zero
                            <paramref name="x"/> equals <paramref name="y"/>.
                                Greater than zero
                            <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
            <param name="x">The first object to compare.
                            </param><param name="y">The second object to compare.
                            </param>
        </member>
        <member name="T:AltAIMLbot.Normalize.MakeCaseInsensitive">
            <summary>
            Normalizes the input text into upper case
            </summary>
        </member>
        <member name="M:AltAIMLbot.Normalize.MakeCaseInsensitive.TransformInput(AltAIMLbot.Unifiable)">
            <summary>
            An ease-of-use static method that re-produces the instance transformation methods
            </summary>
            <param name="input">The Unifiable to transform</param>
            <returns>The resulting Unifiable</returns>
        </member>
        <member name="M:AltAIMLbot.Utils.GraphLinkInfo.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
            true if <see cref="P:System.Xml.IXmlLineInfo.LineNumber"/> and <see cref="P:System.Xml.IXmlLineInfo.LinePosition"/> can be provided; otherwise, false.
            </returns>
        </member>
        <member name="P:AltAIMLbot.Utils.GraphLinkInfo.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
            <returns>
            The current line number or 0 if no line information is available (for example, <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo"/> returns false).
            </returns>
        </member>
        <member name="P:AltAIMLbot.Utils.GraphLinkInfo.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
            <returns>
            The current line position or 0 if no line information is available (for example, <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo"/> returns false).
            </returns>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.learn">
            <summary>
            The learn element instructs the AIML interpreter to retrieve a resource specified by a URI, 
            and to Process its AIML object contents.
            supports network HTTP and web service based AIML learning (as well as local filesystem)
            </summary>
        </member>
        <member name="M:AltAIMLbot.Utils.LoadingTagHandler.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="Proc">The Proc involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be processed</param>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.learn.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.date">
            <summary>
            The date element tells the AIML interpreter that it should substitute the system local 
            date and time. No formatting constraints on the output are specified.
            
            The date element does not have any content. 
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.date.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.category">
            <summary>
            An element called bot, which may be considered a restricted version of get, is used to 
            tell the AIML interpreter that it should substitute the contents of a "bot predicate". The 
            value of a bot predicate is set at load-time, and cannot be changed at run-time. The AIML 
            interpreter may decide how to set the values of bot predicate at load-time. If the bot 
            predicate has no value defined, the AIML interpreter should substitute an empty Unifiable.
            
            The bot element has a required name attribute that identifies the bot predicate. 
            
            The bot element does not have any content. 
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.category.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="Proc">The Proc involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.HelperForMerge">
            <summary>
            Encapsulates information about the result of a request to the bot
            </summary>
        </member>
        <member name="T:AltAIMLbot.Utils.Gender">
            <summary>
            Used to determine the gender of things
            </summary>
        </member>
        <member name="T:AltAIMLbot.Normalize.ApplySubstitutions">
            <summary>
            Checks the text for any matches in the bot's substitutions dictionary and makes
            any appropriate changes.
            </summary>
        </member>
        <member name="M:AltAIMLbot.Normalize.ApplySubstitutions.getMarker(System.Int32)">
            <summary>
            Produces a random "marker" Unifiable that tags text that is already the result of a substitution
            </summary>
            <param name="len">The length of the marker</param>
            <returns>the resulting marker</returns>
        </member>
        <member name="M:AltAIMLbot.Normalize.ApplySubstitutions.Substitute(AltAIMLbot.Variables.ISettingsDictionary,System.String)">
            <summary>
            Static helper that applies replacements from the passed dictionary object to the 
            target Unifiable
            </summary>
            <param name="bot">The bot for whom this is being processed</param>
            <param name="dictionary">The dictionary containing the substitutions</param>
            <param name="target">the target Unifiable to which the substitutions are to be applied</param>
            <returns>The processed Unifiable</returns>
        </member>
        <member name="M:AltAIMLbot.Normalize.ApplySubstitutions.makeRegexSafe(System.String)">
            <summary>
            Given an input, escapes certain characters so they can be used as part of a regex
            </summary>
            <param name="input">The raw input</param>
            <returns>the safe version</returns>
        </member>
        <member name="T:AltAIMLbot.Utils.SubQuery">
            <summary>
            A container class for holding wildcard matches encountered during an individual path's 
            interrogation of the graphmaster.
            </summary>
        </member>
        <member name="M:AltAIMLbot.Utils.SubQuery.#ctor(AltAIMLbot.Unifiable,AltAIMLbot.Result,AltAIMLbot.Request)">
            <summary>
            Ctor
            </summary>
            <param name="fullPath">The path that this query relates to</param>
        </member>
        <member name="F:AltAIMLbot.Utils.SubQuery.FullPath">
            <summary>
            The path that this query relates to
            </summary>
        </member>
        <member name="F:AltAIMLbot.Utils.SubQuery.InputStar">
            <summary>
            If the raw input matches a wildcard then this attribute will contain the block of 
            text that the user has inputted that is matched by the wildcard.
            </summary>
        </member>
        <member name="F:AltAIMLbot.Utils.SubQuery.Templates">
            <summary>
            The template found from searching the graphmaster brain with the path 
            </summary>
        </member>
        <member name="F:AltAIMLbot.Utils.SubQuery.ThatStar">
            <summary>
            If the "that" part of the normalized path contains a wildcard then this attribute 
            will contain the block of text that the user has inputted that is matched by the wildcard.
            </summary>
        </member>
        <member name="F:AltAIMLbot.Utils.SubQuery.TopicStar">
            <summary>
            If the "topic" part of the normalized path contains a wildcard then this attribute 
            will contain the block of text that the user has inputted that is matched by the wildcard.
            </summary>
        </member>
        <member name="M:AltAIMLbot.Utils.SubQuery.removeSetting(System.String)">
            <summary>
            Removes the named setting from this class
            </summary>
            <param name="name">The name of the setting to remove</param>
        </member>
        <member name="M:AltAIMLbot.Utils.SubQuery.updateSetting(System.String,AltAIMLbot.Unifiable)">
            <summary>
            Updates the named setting with a new value whilst retaining the position in the
            dictionary
            </summary>
            <param name="name">the name of the setting</param>
            <param name="value">the new value</param>
        </member>
        <member name="M:AltAIMLbot.Utils.SubQuery.containsSettingCalled(System.String)">
            <summary>
            Checks to see if a setting of a particular name exists
            </summary>
            <param name="name">The setting name to check</param>
            <returns>Existential truth value</returns>
        </member>
        <member name="M:AltAIMLbot.Utils.SubQuery.addSetting(System.String,AltAIMLbot.Unifiable)">
            <summary>
            Adds a bespoke setting to the Settings class (accessed via the grabSettings(string name)
            method.
            </summary>
            <param name="name">The name of the new setting</param>
            <param name="value">The value associated with this setting</param>
        </member>
        <member name="M:AltAIMLbot.Utils.SubQuery.AddSideEffect(System.String,System.Threading.ThreadStart)">
            <summary>
            This a really a Request/Response AddSideEffect.. 
             however putting it here on SubQuery is lasss ambiguous
            </summary>
            <param name="effectName"></param>
            <param name="action"></param>
        </member>
        <member name="P:AltAIMLbot.Utils.SubQuery.Graph">
            <summary>
            The Graph to start the query on
            </summary>
        </member>
        <member name="P:AltAIMLbot.Utils.SubQuery.UseLuceneForSet">
            <summary>
            All conditions must be right
            </summary>
        </member>
        <member name="P:AltAIMLbot.Utils.SubQuery.UseLuceneForGet">
            <summary>
            All conditions must be right
            </summary>
        </member>
        <member name="P:AltAIMLbot.Utils.SubQuery.CanSetDict">
            <summary>
            All conditions must be right
            </summary>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.substitute">
             <summary>
             The atomic version of the person element is a shortcut for: 
             
             <person><star/></person> 
            
             The atomic person does not have any content. 
             
             The non-atomic person element instructs the AIML interpreter to: 
             
             1. replace words with first-person aspect in the result of Processing the contents of the 
             person element with words with the grammatically-corresponding third-person aspect; and 
             
             2. replace words with third-person aspect in the result of Processing the contents of the 
             person element with words with the grammatically-corresponding first-person aspect.
             
             The definition of "grammatically-corresponding" is left up to the implementation. 
             
             Historically, implementations of person have dealt with pronouns, likely due to the fact that 
             most AIML has been written in English. However, the decision about whether to transform the 
             person aspect of other words is left up to the implementation.
             </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.AIMLDictSubstFormatingTagHandler.Format(AltAIMLbot.Unifiable)">
            <summary>
            The subclass only needs to Process the non atomic inner text
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.substitute.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.substitute.ProcessChangeU">
            <summary>
            The subclass only needs to Process the non atomic inner text
            </summary>
            <param name="text"></param>
            <returns></returns>
            <summary>
            The method that does the actual Processing of the text.
            </summary>
            <returns>The resulting Processed text</returns>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlers.srai_prev">
            <summary>
            The srai element instructs the AIML interpreter to pass the result of processing the contents 
            of the srai element to the AIML matching loop, as if the input had been produced by the user 
            (this includes stepping through the entire input normalization process). The srai element does 
            not have any attributes. It may contain any AIML template elements. 
            
            As with all AIML elements, nested forms should be parsed from inside out, so embedded srais are 
            perfectly acceptable. 
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlers.srai_prev.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.optional">
            <summary>
            IMPLEMENTED FOR COMPLETENESS REASONS
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.optional.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlers.botsetting">
            <summary>
            The version element tells the AIML interpreter that it should substitute the version number
            of the AIML interpreter.
            
            The version element does not have any content. 
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlers.botsetting.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode,System.String)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be processed</param>
        </member>
        <member name="M:AltAIMLbot.WebServitor.WithHttp(System.String)">
            <summary>
            WithHttp add a http:// prefix if missing
                  and removes a trailing slash if present to allow easier concatenation;
            </summary>
            <param name="root0"></param>
            <returns></returns>
        </member>
        <member name="M:AltAIMLbot.WebServitor.WithSlash(System.String)">
            <summary>
             Adds a trailing "/" if needed
            </summary>
            <param name="root0"></param>
            <returns></returns>
        </member>
        <member name="P:AltAIMLbot.WebServitor.tl_serverRoot">
            <summary>
            The idea of tl_serverRoot is it my be set by a http client who knows this machine by a 
             public name such as http://12.1.1.12
            
            </summary>
        </member>
        <member name="M:AltAIMLbot.Unifiable.Equals(System.Object)">
            <summary>
            This should be overridden!
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:AltAIMLbot.Unifiable.GetHashCode">
            <summary>
            This should be overridden!
            </summary>
            <returns></returns>
        </member>
        <member name="M:AltAIMLbot.Unifiable.System#IConvertible#GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode"/> for this instance.
            </summary>
            <returns>
            The enumerated constant that is the <see cref="T:System.TypeCode"/> of the class or value type that implements this interface.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:AltAIMLbot.Unifiable.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.
            </summary>
            <returns>
            A Boolean value equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. 
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:AltAIMLbot.Unifiable.System#IConvertible#ToChar(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.
            </summary>
            <returns>
            A Unicode character equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. 
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:AltAIMLbot.Unifiable.System#IConvertible#ToSByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 8-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. 
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:AltAIMLbot.Unifiable.System#IConvertible#ToByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 8-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. 
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:AltAIMLbot.Unifiable.System#IConvertible#ToInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 16-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. 
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:AltAIMLbot.Unifiable.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 16-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. 
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:AltAIMLbot.Unifiable.System#IConvertible#ToInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 32-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. 
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:AltAIMLbot.Unifiable.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 32-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. 
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:AltAIMLbot.Unifiable.System#IConvertible#ToInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 64-bit signed integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. 
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:AltAIMLbot.Unifiable.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <returns>
            An 64-bit unsigned integer equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. 
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:AltAIMLbot.Unifiable.System#IConvertible#ToSingle(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            <returns>
            A single-precision floating-point number equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. 
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:AltAIMLbot.Unifiable.System#IConvertible#ToDouble(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            <returns>
            A double-precision floating-point number equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. 
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:AltAIMLbot.Unifiable.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Decimal"/> number using the specified culture-specific formatting information.
            </summary>
            <returns>
            A <see cref="T:System.Decimal"/> number equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. 
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:AltAIMLbot.Unifiable.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.DateTime"/> using the specified culture-specific formatting information.
            </summary>
            <returns>
            A <see cref="T:System.DateTime"/> instance equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. 
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:AltAIMLbot.Unifiable.System#IConvertible#ToString(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.String"/> using the specified culture-specific formatting information.
            </summary>
            <returns>
            A <see cref="T:System.String"/> instance equivalent to the value of this instance.
            </returns>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. 
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:AltAIMLbot.Unifiable.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an <see cref="T:System.Object"/> of the specified <see cref="T:System.Type"/> that has an equivalent value, using the specified culture-specific formatting information.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> instance of type <paramref name="conversionType"/> whose value is equivalent to the value of this instance.
            </returns>
            <param name="conversionType">The <see cref="T:System.Type"/> to which the value of this instance is converted. 
                            </param><param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information. 
                            </param><filterpriority>2</filterpriority>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.topicstar">
            <summary>
            The topicstar element tells the AIML interpreter that it should substitute the contents of 
            a wildcard from the current topic (if the topic contains any wildcards).
            
            The topicstar element has an optional integer index attribute that indicates which wildcard 
            to use; the minimum acceptable value for the index is "1" (the first wildcard). Not 
            specifying the index is the same as specifying an index of "1". 
            
            The topicstar element does not have any content. 
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.StarTagHandler.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode,System.Int32)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.StarTagHandler.ComputeInnerOrNull">
            <summary>
            The method that does the actual Processing of the text.
            </summary>
            <returns>The resulting Processed text</returns>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.topicstar.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.liif">
             <summary>
             The condition element instructs the AIML interpreter to return specified contents depending 
             upon the results of matching a predicate against a pattern. 
             
             NB: The condition element has three different types. The three different types specified 
             here are distinguished by an xsi:type attribute, which permits a validating XML Schema 
             Processor to validate them. Two of the types may contain li elements, of which there are 
             three different types, whose validity is determined by the type of enclosing condition. In 
             practice, an AIML interpreter may allow the omission of the xsi:type attribute and may instead 
             heuristically determine which type of condition (and hence li) is in use. 
             
             Block Condition 
             ---------------
             
             The blockCondition type of condition has a required attribute "name", which specifies an AIML 
             predicate, and a required attribute "value", which contains a simple pattern expression. 
            
             If the contents of the value attribute match the value of the predicate specified by name, then 
             the AIML interpreter should return the contents of the condition. If not, the empty Unifiable "" 
             should be returned.
             
             Single-predicate Condition 
             --------------------------
             
             The singlePredicateCondition type of condition has a required attribute "name", which specifies 
             an AIML predicate. This form of condition must contain at least one li element. Zero or more of 
             these li elements may be of the valueOnlyListItem type. Zero or one of these li elements may be 
             of the defaultListItem type.
             
             The singlePredicateCondition type of condition is Processed as follows: 
            
             Reading each contained li in order: 
            
             1. If the li is a valueOnlyListItem type, then compare the contents of the value attribute of 
             the li with the value of the predicate specified by the name attribute of the enclosing 
             condition. 
                 a. If they match, then return the contents of the li and stop Processing this condition. 
                 b. If they do not match, continue Processing the condition. 
             2. If the li is a defaultListItem type, then return the contents of the li and stop Processing
             this condition.
             
             Multi-predicate Condition 
             -------------------------
             
             The multiPredicateCondition type of condition has no attributes. This form of condition must 
             contain at least one li element. Zero or more of these li elements may be of the 
             nameValueListItem type. Zero or one of these li elements may be of the defaultListItem type.
             
             The multiPredicateCondition type of condition is Processed as follows: 
            
             Reading each contained li in order: 
            
             1. If the li is a nameValueListItem type, then compare the contents of the value attribute of 
             the li with the value of the predicate specified by the name attribute of the li. 
                 a. If they match, then return the contents of the li and stop Processing this condition. 
                 b. If they do not match, continue Processing the condition. 
             2. If the li is a defaultListItem type, then return the contents of the li and stop Processing 
             this condition. 
             
             ****************
             
             Condition List Items
             
             As described above, two types of condition may contain li elements. There are three types of 
             li elements. The type of li element allowed in a given condition depends upon the type of that 
             condition, as described above. 
             
             Default List Items 
             ------------------
             
             An li element of the type defaultListItem has no attributes. It may contain any AIML template 
             elements. 
            
             Value-only List Items
             ---------------------
             
             An li element of the type valueOnlyListItem has a required attribute value, which must contain 
             a simple pattern expression. The element may contain any AIML template elements.
             
             Name and Value List Items
             -------------------------
             
             An li element of the type nameValueListItem has a required attribute name, which specifies an 
             AIML predicate, and a required attribute value, which contains a simple pattern expression. The 
             element may contain any AIML template elements. 
             </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.liif.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.input">
            <summary>
            The input element tells the AIML interpreter that it should substitute the contents of a 
            previous user input. 
            
            The template-side input has an optional index attribute that may contain either a single 
            integer or a comma-separated pair of integers. The minimum value for either of the integers 
            in the index is "1". The index tells the AIML interpreter which previous user input should 
            be returned (first dimension), and optionally which "sentence" (see [8.3.2.]) of the previous 
            user input. 
            
            The AIML interpreter should raise an error if either of the specified index dimensions is 
            invalid at run-time. 
            
            An unspecified index is the equivalent of "1,1". An unspecified second dimension of the index 
            is the equivalent of specifying a "1" for the second dimension. 
            
            The input element does not have any content. 
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.input.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.id">
            <summary>
            The id element tells the AIML interpreter that it should substitute the user ID. 
            The determination of the user ID is not specified, since it will vary by application. 
            A suggested default return value is "localhost". 
            
            The id element does not have any content.
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.id.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.dbquery">
            <summary>
            
            </summary>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.bind">
            <summary>
            IMPLEMENTED FOR COMPLETENESS REASONS
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.bind.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="F:AltAIMLbot.Servitor.DebugLevelExternalDb">
            <summary>
            dmiles - set 0-2 for verboseness of ExternDB from node
            
                search on this field to see what it covers
            </summary>
        </member>
        <member name="M:AltAIMLbot.Servitor.RequestingInput">
            <summary>
            This function is called when the HumanAgent a1's input member is fired (which happens when it receives an action from another agent)
            </summary>
            <returns></returns>
        </member>
        <member name="M:AltAIMLbot.Servitor.GlobalActionReceived(System.Int32,System.Int32,System.Int32)">
            <summary>
            This function is called when any agent performs any action.
            </summary>
            <param name="sender"></param>
            <param name="action"></param>
            <param name="target"></param>
        </member>
        <member name="M:AltAIMLbot.Servitor.saveToBinaryFile(System.String)">
            <summary>
            Saves the whole bot to a binary file to avoid processing the AIML each time the 
            bot starts
            </summary>
            <param name="path">the path to the file for saving</param>
        </member>
        <member name="M:AltAIMLbot.Servitor.loadFromBinaryFile(System.String)">
            <summary>
            Loads a dump of whole bot into memory so avoiding processing the AIML files again
            </summary>
            <param name="path">the path to the dump file</param>
        </member>
        <member name="T:AltAIMLbot.Utils.LoaderOptions">
            <summary>
            A utility class for loading AIML files from disk into the graphmaster structure that 
            forms an AIML bot's "brain"
            </summary>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.that">
            <summary>
            The template-side that element indicates that an AIML interpreter should substitute the 
            contents of a previous bot output. 
            
            The template-side that has an optional index attribute that may contain either a single 
            integer or a comma-separated pair of integers. The minimum value for either of the integers 
            in the index is "1". The index tells the AIML interpreter which previous bot output should be 
            returned (first dimension), and optionally which "sentence" (see [8.3.2.]) of the previous bot
            output (second dimension). 
            
            The AIML interpreter should raise an error if either of the specified index dimensions is 
            invalid at run-time. 
            
            An unspecified index is the equivalent of "1,1". An unspecified second dimension of the index 
            is the equivalent of specifying a "1" for the second dimension. 
            
            The template-side that element does not have any content. 
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.that.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.set">
            <summary>
            The set element instructs the AIML interpreter to set the value of a predicate to the result 
            of Processing the contents of the set element. The set element has a required attribute name, 
            which must be a valid AIML predicate name. If the predicate has not yet been defined, the AIML 
            interpreter should define it in memory. 
            
            The AIML interpreter should, generically, return the result of Processing the contents of the 
            set element. The set element must not perform any text formatting or other "normalization" on 
            the predicate contents when returning them. 
            
            The AIML interpreter implementation may optionally provide a mechanism that allows the AIML 
            author to designate certain predicates as "return-name-when-set", which means that a set 
            operation using such a predicate will return the name of the predicate, rather than its 
            captured value. (See [9.2].) 
            
            A set element may contain any AIML template elements.
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.set.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="F:AltAIMLbot.Utils.GraphMaster.Guards">
            <summary>
            All the &lt;guard&gt;s (if any) associated with this database
            </summary>
        </member>
        <member name="F:AltAIMLbot.Utils.GraphMaster.Patterns">
            <summary>
            All the &lt;pattern&gt;s (if any) associated with this database
            </summary>
        </member>
        <member name="F:AltAIMLbot.Utils.GraphMaster.ResponseInfos">
            <summary>
            All the &lt;templates&gt;s (if any) associated with this database
            </summary>
        </member>
        <member name="F:AltAIMLbot.Utils.GraphMaster.Thats">
            <summary>
            All the &lt;that&gt;s (if any) associated with this database
            </summary>
        </member>
        <member name="F:AltAIMLbot.Utils.GraphMaster.Topics">
            <summary>
            All the &lt;topic&gt;s (if any) associated with this database
            </summary>
        </member>
        <member name="F:AltAIMLbot.Utils.GraphMaster.CategoryInfos">
            <summary>
            All the &lt;category&gt;s (if any) associated with this database
            </summary>
        </member>
        <member name="F:AltAIMLbot.Utils.GraphMaster.FileCategories">
            <summary>
            All the &lt;templates&gt;s (if any) associated with this database
            </summary>
        </member>
        <member name="F:AltAIMLbot.Utils.GraphMaster.RemoveDupicateTemplatesFromNodes">
            <summary>
            Search and try to elimentate duplicate Templates
            slows it down but maybe important to do
            </summary>
        </member>
        <member name="F:AltAIMLbot.Utils.GraphMaster.RemovePreviousTemplatesFromNodes">
            <summary>
            This is nomal AIML default (false = we we might rotate templates fopr a more interesting robot (false = cogbot normally))
            </summary>
        </member>
        <member name="F:AltAIMLbot.Utils.GraphMaster.DistinguishSilenetTags">
            <summary>
            True = Normal Cogbot defualt (false would mean AIML templates vetted to make the robot respond)
            </summary>        
        </member>
        <member name="M:AltAIMLbot.Utils.GraphMaster.saveToBinaryFile(System.String,System.Runtime.Serialization.Formatters.Binary.BinaryFormatter)">
            <summary>
            Saves the graphmaster node (and children) to a binary file to avoid processing the AIML each time the 
            Proccessor starts
            </summary>
            <param name="path">the path to the file for saving</param>
        </member>
        <member name="M:AltAIMLbot.Utils.GraphMaster.loadFromBinaryFile(System.String,System.Runtime.Serialization.Formatters.Binary.BinaryFormatter)">
            <summary>
            Loads a dump of the graphmaster into memory so avoiding processing the AIML files again
            </summary>
            <param name="path">the path to the dump file</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AltAIMLbot.Utils.GraphMaster.getQueries(AltAIMLbot.Utils.Node,AltAIMLbot.Unifiable,AltAIMLbot.Request,AltAIMLbot.Utils.MatchState,System.Int32,AltAIMLbot.StringAppendableUnifiableImpl,AltAIMLbot.Utils.GraphQuery)" -->
        <member name="P:AltAIMLbot.Utils.GraphMaster.DefaultSilentTagsInPutParallel">
            <summary>
            Should tags that make no output be placed in parallel Graphmaster
            </summary>
        </member>
        <member name="P:AltAIMLbot.Utils.GraphMaster.TrackTemplates">
            <summary>
            Should template Objects be stored in graphmasters
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:AltAIMLbot.Utils.TestCaseRunner.EvalTestCase(System.Xml.XmlNode,AltAIMLbot.Request,MushDLR223.ScriptEngines.OutputDelegate)" -->
        <member name="T:AltAIMLbot.AIMLTagHandlersU.srai">
            <summary>
            The srai element instructs the AIML interpreter to pass the result of Processing the contents 
            of the srai element to the AIML matching loop, as if the input had been produced by the user 
            (this includes stepping through the entire input normalization Process). The srai element does 
            not have any attributes. It may contain any AIML template elements. 
            
            As with all AIML elements, nested forms should be parsed from inside out, so embedded srais are 
            perfectly acceptable. 
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.srai.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.DoubleMetaphoneStringExtension">
            <summary>
            DoubleMetaphone string extension
            </summary>
            <remarks>
            Original C++ implementation:
            	"Double Metaphone (c) 1998, 1999 by Lawrence Philips"
            	http://www.ddj.com/cpp/184401251?pgno=1
            </remarks>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.javascript">
            <summary>
            NOT IMPLEMENTED FOR SECURITY REASONS
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.javascript.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="F:AltAIMLbot.AIMLTagHandlersU.javascript.DefaultAssemblyReferences">
            <summary>
            Returns a string array containing the names of the assemblies added as references to the engine by default.
            </summary>
        </member>
        <member name="F:AltAIMLbot.AIMLTagHandlersU.javascript.DefaultNamespaceReferences">
            <summary>
            Returns a string array containing the names of the assemblies added as references to the engine by default.
            </summary>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.gender">
             <summary>
             The atomic version of the gender element is a shortcut for:
             
             <gender><star/></gender> 
            
             The atomic gender does not have any content. 
             
             The non-atomic gender element instructs the AIML interpreter to: 
             
             1. replace male-gendered words in the result of Processing the contents of the gender element 
             with the grammatically-corresponding female-gendered words; and 
             
             2. replace female-gendered words in the result of Processing the contents of the gender element 
             with the grammatically-corresponding male-gendered words. 
             
             The definition of "grammatically-corresponding" is left up to the implementation.
             
             Historically, implementations of gender have exclusively dealt with pronouns, likely due to the 
             fact that most AIML has been written in English. However, the decision about whether to 
             transform gender of other words is left up to the implementation.
             </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.gender.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="F:AltAIMLbot.GUI.AIMLPadEditor.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:AltAIMLbot.GUI.AIMLPadEditor.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:AltAIMLbot.GUI.AIMLPadEditor.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:AltAIMLbot.QuerySettingsImpl.StartGraphName">
            <summary>
            The Graph to start the query on
            </summary>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.xmlattribute">
            <summary>
            The sr element is a shortcut for: 
            
            <srai><star/></srai> 
            
            The atomic sr does not have any content. 
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.xmlattribute.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.version">
            <summary>
            The version element tells the AIML interpreter that it should substitute the version number
            of the AIML interpreter.
            
            The version element does not have any content. 
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.version.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.thatstar">
            <summary>
            The thatstar element tells the AIML interpreter that it should substitute the contents of a 
            wildcard from a pattern-side that element. 
            
            The thatstar element has an optional integer index attribute that indicates which wildcard 
            to use; the minimum acceptable value for the index is "1" (the first wildcard). 
            
            An AIML interpreter should raise an error if the index attribute of a star specifies a 
            wildcard that does not exist in the that element's pattern content. Not specifying the index 
            is the same as specifying an index of "1". 
            
            The thatstar element does not have any content. 
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.thatstar.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.template">
            <summary>
            IMPLEMENTED FOR COMPLETENESS REASONS
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.template.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlers.format_prev">
            <summary>
            The format element tells the AIML interpreter to render the contents of the element 
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlers.format_prev.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode,System.Func{System.String,System.String})">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be processed</param>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.format.Format(AltAIMLbot.Unifiable)">
            <summary>
            The subclass only needs to Process the non atomic inner text
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.format.ProcessChangeU">
            <summary>
            The method that does the actual Processing of the text.
            </summary>
            <returns>The resulting Processed text</returns>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.format.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode,System.Func{AltAIMLbot.Unifiable,AltAIMLbot.Unifiable},System.Func{AltAIMLbot.Unifiable,AltAIMLbot.Unifiable})">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.BTXmlNodeExtensions">
            <summary>
            Allows any BTXML node operation to work on any XML node
            </summary>
        </member>
        <member name="M:AltAIMLbot.BehaviorTree.runSubTree(AltAIMLbot.BTXmlDocument)">
            <summary>
            Executes a subBehavior in the same context
            </summary>
            <param name="subDoc"></param>
            <returns></returns>
        </member>
        <member name="M:AltAIMLbot.BehaviorTree.ProcessNodeAddEvents(System.Xml.XmlNode)">
            <summary>
            ProcessNodeAddEvents: saves previous "onX" hanlders and adds defines owns
            </summary>
            <param name="myNode"></param>
        </member>
        <member name="M:AltAIMLbot.BehaviorTree.ProcessNodeDeleteEvents(System.Xml.XmlNode)">
            <summary>
            ProcessNodeDeleteEvents: deletes current"onX" hanlders and restores previously defined ones
            </summary>
            <param name="myNode"></param>
        </member>
        <member name="T:AltAIMLbot.Database.WordExpander">
            <summary>
            Delegate to the Wordnet data expander (walks up the Undisambiguated Hyponyms)
            </summary>
            <param name="inputString"></param>
            <param name="queryhook"></param>
            <returns></returns>
        </member>
        <member name="F:AltAIMLbot.Database.MyLuceneIndexer.AssertReducndancyChecks">
            <summary>
              Assert Redundancy Checks (for loading multple factiods from files
            </summary>
        </member>
        <member name="M:AltAIMLbot.Database.MyLuceneIndexer.AskTextStringAll(System.String,AltAIMLbot.Request)">
            <summary>
            @askall what is 1 plus 1?
            </summary>
            <param name="textstr"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:AltAIMLbot.Database.MyLuceneIndexer.#ctor(System.String,System.String,AltAIMLbot.AltBot,LAIR.ResourceAPIs.WordNet.WordNetEngine)">
            <summary>
            
            </summary>
            <param name="indexDir"></param>
            <param name="fieldName">usually "TEXT_MATTER"</param>
        </member>
        <member name="M:AltAIMLbot.Database.MyLuceneIndexer.Index(System.Collections.Generic.Dictionary{System.UInt64,System.String},AltAIMLbot.Database.WordExpander)">
            <summary>
            This method indexes the content that is sent across to it. Each piece of content (or "document")
            that is indexed has to have a unique identifier (so that the caller can take action based on the
            document id). Therefore, this method accepts key-value pairs in the form of a dictionary. The key
            is a ulong which uniquely identifies the string to be indexed. The string itself is the value
            within the dictionary for that key. Be aware that stop words (like the, this, at, etc.) are _not_
            indexed.
            </summary>
            <param name="txtIdPairToBeIndexed">A dictionary of key-value pairs that are sent by the caller
            to uniquely identify each string that is to be indexed.</param>
            <returns>The number of documents indexed.</returns>
        </member>
        <member name="M:AltAIMLbot.Database.MyLuceneIndexer.UpdateFactoid(System.String,System.String,System.Xml.XmlNode)">
            <summary>
            This method searches for the search query, then deletes the top ranked and inserts.
            </summary>
            <param name="query">The search term as a string that the caller wants to search for within the
            index as referenced by this object.</param>
            <param name="myText">The new value to replace in the database.</param>
        </member>
        <member name="M:AltAIMLbot.Database.MyLuceneIndexer.DeleteTopScoring(System.String,System.Xml.XmlNode,System.Boolean)">
            <summary>
            This method searches for the search query, then deletes those with a score equal to the top ranked.
            </summary>
            <param name="query">The search term as a string that the caller wants to search for within the
            index as referenced by this object.</param>         
        </member>
        <member name="M:AltAIMLbot.Database.MyLuceneIndexer.Search(System.String,System.Object[]@,System.String[]@,System.Single[]@,AltAIMLbot.Database.WordExpander,System.Boolean)">
            <summary>
            This method searches for the search term passed by the caller.
            </summary>
            <param name="searchTerm">The search term as a string that the caller wants to search for within the
            index as referenced by this object.</param>
            <param name="ids">An out parameter that is populated by this method for the caller with docments ids.</param>
            <param name="results">An out parameter that is populated by this method for the caller with docments text.</param>
            <param name="scores">An out parameter that is populated by this method for the caller with docments scores.</param>
        </member>
        <member name="M:AltAIMLbot.Database.MyLuceneIndexer.callDbQuery(System.String,MushDLR223.ScriptEngines.OutputDelegate,System.Func{AltAIMLbot.Unifiable},System.Xml.XmlNode,System.Single,System.Boolean,System.Single@)">
            <summary>
             Inspects the database for 
            searchTerm1
                max  = 1,
                failprefix = "",
                wordnet = true,
                threshold = 0.0f
            </summary>
            <param name="searchTerm1"></param>
            <param name="dbgLog"></param>
            <param name="OnFalure"></param>
            <param name="templateNode"></param>
            <param name="threshold"> &lt;dbquery&gt; uses 0.0f by default</param>
            <param name="expandOnNoHits"></param>
            <returns></returns>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.think">
            <summary>
            The think element instructs the AIML interpreter to perform all usual Processing of its 
            contents, but to not return any value, regardless of whether the contents produce output.
            
            The think element has no attributes. It may contain any AIML template elements.
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.think.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.think.Format(AltAIMLbot.Unifiable)">
            <summary>
            The method that does the actual Processing of the text.
            </summary>
            <returns>The resulting Processed text</returns>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlers.sentence_prev">
            <summary>
            The sentence element tells the AIML interpreter to render the contents of the element 
            such that the first letter of each sentence is in uppercase, as defined (if defined) by 
            the locale indicated by the specified language (if specified). Sentences are interpreted 
            as strings whose last character is the period or full-stop character .. If the string does 
            not contain a ., then the entire string is treated as a sentence.
            
            If no character in this string has a different uppercase version, based on the Unicode 
            standard, then the original string is returned. 
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlers.sentence_prev.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.regex">
            <summary>
            IMPLEMENTED FOR COMPLETENESS REASONS
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.regex.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.guard">
            <summary>
            The template-side guard element indicates guard an AIML interpreter should substitute the 
            contents of a previous bot output. 
            
            The template-side guard has an optional index attribute guard may contain either a single 
            integer or a comma-separated pair of integers. The minimum value for either of the integers 
            in the index is "1". The index tells the AIML interpreter which previous bot output should be 
            returned (first dimension), and optionally which "sentence" (see [8.3.2.]) of the previous bot
            output (second dimension). 
            
            The AIML interpreter should raise an error if either of the specified index dimensions is 
            invalid at run-time. 
            
            An unspecified index is the equivalent of "1,1". An unspecified second dimension of the index 
            is the equivalent of specifying a "1" for the second dimension. 
            
            The template-side guard element does not have any content. 
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.guard.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query guard originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.CycNLTagHandlers.OptionalOne">
            <summary>
            IMPLEMENTED FOR COMPLETENESS REASONS
            </summary>
        </member>
        <member name="M:AltAIMLbot.CycNLTagHandlers.OptionalOne.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be processed</param>
        </member>
        <member name="M:AltAIMLbot.Utils.ConversationCondition.#ctor(System.String,AltAIMLbot.Unifiable,System.Xml.XmlNode)">
            <summary>
            Name/Value requirment
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="proof"></param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.topic">
            <summary>
            An element called bot, which may be considered a restricted version of get, is used to 
            tell the AIML interpreter that it should substitute the contents of a "bot predicate". The 
            value of a bot predicate is set at load-time, and cannot be changed at run-time. The AIML 
            interpreter may decide how to set the values of bot predicate at load-time. If the bot 
            predicate has no value defined, the AIML interpreter should substitute an empty Unifiable.
            
            The bot element has a required name attribute that identifies the bot predicate. 
            
            The bot element does not have any content. 
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.topic.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="Proc">The Proc involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlers.prolist">
            <summary>
            converts text into a prolog compatible list
            <prolist>What do you want ?</prolist>
            [what,do,you,want,questionmark]
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlers.prolist.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.lowercase">
            <summary>
            The lowercase element tells the AIML interpreter to render the contents of the element 
            in lowercase, as defined (if defined) by the locale indicated by the specified language
            (if specified). 
            
            If no character in this Unifiable has a different lowercase version, based on the Unicode 
            standard, then the original Unifiable is returned. 
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.lowercase.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:AltAIMLbot.AIMLTagHandlersU.inputreq" -->
        <member name="M:AltAIMLbot.AIMLTagHandlersU.inputreq.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlers.filterqa.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.cyccondition">
             <summary>
             The cyccondition element instructs the AIML interpreter to return specified contents depending 
             upon the results of matching a predicate against a pattern. 
             
             NB: The cyccondition element has three different types. The three different types specified 
             here are distinguished by an xsi:type attribute, which permits a validating XML Schema 
             Processor to validate them. Two of the types may contain li elements, of which there are 
             three different types, whose validity is determined by the type of enclosing cyccondition. In 
             practice, an AIML interpreter may allow the omission of the xsi:type attribute and may instead 
             heuristically determine which type of cyccondition (and hence li) is in use. 
             
             Block Condition 
             ---------------
             
             The blockCondition type of condition has a required attribute "name", which specifies an AIML 
             predicate, and a required attribute "value", which contains a simple pattern expression. 
            
             If the contents of the value attribute match the value of the predicate specified by name, then 
             the AIML interpreter should return the contents of the cyccondition. If not, the empty Unifiable "" 
             should be returned.
             
             Single-predicate Condition 
             --------------------------
             
             The singlePredicateCondition type of condition has a required attribute "name", which specifies 
             an AIML predicate. This form of condition must contain at least one li element. Zero or more of 
             these li elements may be of the valueOnlyListItem type. Zero or one of these li elements may be 
             of the defaultListItem type.
             
             The singlePredicateCondition type of condition is Processed as follows: 
            
             Reading each contained li in order: 
            
             1. If the li is a valueOnlyListItem type, then compare the contents of the value attribute of 
             the li with the value of the predicate specified by the name attribute of the enclosing 
             condition. 
                 a. If they match, then return the contents of the li and stop Processing this condition. 
                 b. If they do not match, continue Processing the condition. 
             2. If the li is a defaultListItem type, then return the contents of the li and stop Processing
             this condition.
             
             Multi-predicate Condition 
             -------------------------
             
             The multiPredicateCondition type of condition has no attributes. This form of condition must 
             contain at least one li element. Zero or more of these li elements may be of the 
             nameValueListItem type. Zero or one of these li elements may be of the defaultListItem type.
             
             The multiPredicateCondition type of condition is Processed as follows: 
            
             Reading each contained li in order: 
            
             1. If the li is a nameValueListItem type, then compare the contents of the value attribute of 
             the li with the value of the predicate specified by the name attribute of the li. 
                 a. If they match, then return the contents of the li and stop Processing this condition. 
                 b. If they do not match, continue Processing the condition. 
             2. If the li is a defaultListItem type, then return the contents of the li and stop Processing 
             this condition. 
             
             ****************
             
             Condition List Items
             
             As described above, two types of condition may contain li elements. There are three types of 
             li elements. The type of li element allowed in a given condition depends upon the type of that 
             condition, as described above. 
             
             Default List Items 
             ------------------
             
             An li element of the type defaultListItem has no attributes. It may contain any AIML template 
             elements. 
            
             Value-only List Items
             ---------------------
             
             An li element of the type valueOnlyListItem has a required attribute value, which must contain 
             a simple pattern expression. The element may contain any AIML template elements.
             
             Name and Value List Items
             -------------------------
             
             An li element of the type nameValueListItem has a required attribute name, which specifies an 
             AIML predicate, and a required attribute value, which contains a simple pattern expression. The 
             element may contain any AIML template elements. 
             </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.cyccondition.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.cycassert">
            <summary>
            &lt;cycassert&gt; simple way to assert a CycL statement
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.cycassert.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlers.btxml.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be processed</param>
        </member>
        <member name="T:AltAIMLbot.Utils.CustomTagAttribute">
            <summary>
            A custom attribute to be applied to all custom tags in external "late bound" dlls
            </summary>
        </member>
        <member name="T:AltAIMLbot.AltPorterStemmer">
            <summary> 
            Stemmer, implementing the Porter Stemming Algorithm
            
            The Stemmer class transforms a word into its root form.  The input
            word can be provided a character at time (by calling add()), or at once
            by calling one of the various stem(something) methods.
            </summary>
        </member>
        <member name="M:AltAIMLbot.AltPorterStemmer.Reset">
            <summary> reset() resets the stemmer so it can stem another word.  If you invoke
            the stemmer by calling add(char) and then stem(), you must call reset()
            before starting another word.
            </summary>
        </member>
        <member name="M:AltAIMLbot.AltPorterStemmer.Add(System.Char)">
            <summary> Add a character to the word being stemmed.  When you are finished
            adding characters, you can call stem(void) to process the word.
            </summary>
        </member>
        <member name="M:AltAIMLbot.AltPorterStemmer.ToString">
            <summary> After a word has been stemmed, it can be retrieved by toString(),
            or a reference to the internal buffer can be retrieved by getResultBuffer
            and getResultLength (which is generally more efficient.)
            </summary>
        </member>
        <member name="M:AltAIMLbot.AltPorterStemmer.GetResultLength">
            <summary> Returns the length of the word resulting from the stemming process.</summary>
        </member>
        <member name="M:AltAIMLbot.AltPorterStemmer.GetResultBuffer">
            <summary> Returns a reference to a character buffer containing the results of
            the stemming process.  You also need to consult getResultLength()
            to determine the length of the result.
            </summary>
        </member>
        <member name="M:AltAIMLbot.AltPorterStemmer.Stem(System.String)">
            <summary> Stem a word provided as a String.  Returns the result as a String.</summary>
        </member>
        <member name="M:AltAIMLbot.AltPorterStemmer.Stem(System.Char[])">
            <summary>Stem a word contained in a char[].  Returns true if the stemming process
            resulted in a word different from the input.  You can retrieve the
            result with getResultLength()/getResultBuffer() or toString().
            </summary>
        </member>
        <member name="M:AltAIMLbot.AltPorterStemmer.Stem(System.Char[],System.Int32,System.Int32)">
            <summary>Stem a word contained in a portion of a char[] array.  Returns
            true if the stemming process resulted in a word different from
            the input.  You can retrieve the result with
            getResultLength()/getResultBuffer() or toString().
            </summary>
        </member>
        <member name="M:AltAIMLbot.AltPorterStemmer.Stem(System.Char[],System.Int32)">
            <summary>Stem a word contained in a leading portion of a char[] array.
            Returns true if the stemming process resulted in a word different
            from the input.  You can retrieve the result with
            getResultLength()/getResultBuffer() or toString().
            </summary>
        </member>
        <member name="M:AltAIMLbot.AltPorterStemmer.Stem">
            <summary>Stem the word placed into the Stemmer buffer through calls to add().
            Returns true if the stemming process resulted in a word different
            from the input.  You can retrieve the result with
            getResultLength()/getResultBuffer() or toString().
            </summary>
        </member>
        <member name="M:AltAIMLbot.AltPorterStemmer.MainPS(System.String[])">
            <summary>Test program for demonstrating the Stemmer.  It reads a file and
            stems each word, writing the result to standard out.
            Usage: Stemmer file-name
            </summary>
        </member>
        <member name="T:AltAIMLbot.Cron">
            <summary>
            An implementation of the Cron service.
            </summary>
        </member>
        <member name="T:AltAIMLbot.Database.NLP.BrillTagger">
            <summary>
            Summary description for Class1.
            </summary>
        </member>
        <member name="T:AltAIMLbot.Database.NLP.Formatter">
            <summary>
            Summary description for Formatter.
            </summary>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.system">
            <summary>
            NOT IMPLEMENTED FOR SECURITY REASONS
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.system.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.size">
            <summary>
            The size element tells the AIML interpreter that it should substitute the number of 
            categories currently loaded.
            
            The size element does not have any content. 
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.size.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlers.satisfied.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.random">
            <summary>
            The random element instructs the AIML interpreter to return exactly one of its contained li 
            elements randomly. The random element must contain one or more li elements of type 
            defaultListItem, and cannot contain any other elements.
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.random.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.gossip">
            <summary>
            The gossip element instructs the AIML interpreter to capture the result of Processing the 
            contents of the gossip elements and to store these contents in a manner left up to the 
            implementation. Most common uses of gossip have been to store captured contents in a separate 
            file. 
            
            The gossip element does not have any attributes. It may contain any AIML template elements.
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.gossip.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.gossip.Format(AltAIMLbot.Unifiable)">
            <summary>
            The method that does the actual Processing of the text.
            
            This like the think tag retunns nothihng.. but logs it to the console
            </summary>
            <returns>The resulting Processed text</returns>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.cycretract">
            <summary>
            &lt;cycretract&gt; simple way to retract a CycL statement
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.cycretract.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.Normalize.StripIllegalCharacters">
            <summary>
            Strips any illegal characters found within the input Unifiable. Illegal characters are referenced from
            the bot's Strippers regex that is defined in the setup XML file.
            </summary>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.space">
            <summary>
            The space element instructs the AIML interpreter to perform all usual Processing of its 
            contents, but to not return any value, regardless of whether the contents produce output.
            
            The space element has no attributes. It may contain any AIML template elements.
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.space.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.root">
            <summary>
            An element called bot, which may be considered a restricted version of get, is used to 
            tell the AIML interpreter that it should substitute the contents of a "bot predicate". The 
            value of a bot predicate is set at load-time, and cannot be changed at run-time. The AIML 
            interpreter may decide how to set the values of bot predicate at load-time. If the bot 
            predicate has no value defined, the AIML interpreter should substitute an empty Unifiable.
            
            The bot element has a required name attribute that identifies the bot predicate. 
            
            The bot element does not have any content. 
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.root.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode,AltAIMLbot.Variables.ParentProvider)">
            <summary>
            Ctor
            </summary>
            <param name="Proc">The Proc involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.person">
             <summary>
             The atomic version of the person element is a shortcut for: 
             
             <person><star/></person> 
            
             The atomic person does not have any content. 
             
             The non-atomic person element instructs the AIML interpreter to: 
             
             1. replace words with first-person aspect in the result of Processing the contents of the 
             person element with words with the grammatically-corresponding third-person aspect; and 
             
             2. replace words with third-person aspect in the result of Processing the contents of the 
             person element with words with the grammatically-corresponding first-person aspect.
             
             The definition of "grammatically-corresponding" is left up to the implementation. 
             
             Historically, implementations of person have dealt with pronouns, likely due to the fact that 
             most AIML has been written in English. However, the decision about whether to transform the 
             person aspect of other words is left up to the implementation.
             </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.person.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.cycphrase">
            <summary>
            &lt;cycphrase&gt; translates a Cyc symbol into an English word/phrase
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.cycphrase.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>                    s
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.cycphrase.ProcessChangeU">
            <summary>
            The method that does the actual Processing of the text.
            </summary>
            <returns>The resulting Processed text</returns>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.aiml">
            <summary>
            An element called bot, which may be considered a restricted version of get, is used to 
            tell the AIML interpreter that it should substitute the contents of a "bot predicate". The 
            value of a bot predicate is set at load-time, and cannot be changed at run-time. The AIML 
            interpreter may decide how to set the values of bot predicate at load-time. If the bot 
            predicate has no value defined, the AIML interpreter should substitute an empty Unifiable.
            
            The bot element has a required name attribute that identifies the bot predicate. 
            
            The bot element does not have any content. 
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.aiml.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="Proc">The Proc involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="M:AltAIMLbot.SideEffectStage.CompareTo(AltAIMLbot.SideEffectStage)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: 
                                Value 
                                Meaning 
                                Less than zero 
                                This object is less than the <paramref name="other"/> parameter.
                                Zero 
                                This object is equal to <paramref name="other"/>. 
                                Greater than zero 
                                This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.
                            </param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.uppercase">
            <summary>
            The uppercase element tells the AIML interpreter to render the contents of the element
            in uppercase, as defined (if defined) by the locale indicated by the specified language
            if specified).
            
            If no character in this Unifiable has a different uppercase version, based on the Unicode 
            standard, then the original Unifiable is returned. 
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.uppercase.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.uppercase.Format(AltAIMLbot.Unifiable)">
            <summary>
            The method that does the actual Processing of the text.
            </summary>
            <returns>The resulting Processed text</returns>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.star">
            <summary>
            The star element indicates that an AIML interpreter should substitute the value "captured" 
            by a particular wildcard from the pattern-specified portion of the match path when returning 
            the template. 
            
            The star element has an optional integer index attribute that indicates which wildcard to use. 
            The minimum acceptable value for the index is "1" (the first wildcard), and the maximum 
            acceptable value is equal to the number of wildcards in the pattern. 
            
            An AIML interpreter should raise an error if the index attribute of a star specifies a wildcard 
            that does not exist in the category element's pattern. Not specifying the index is the same as 
            specifying an index of "1". 
            
            The star element does not have any content. 
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.star.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlers.inject.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.cycrandom">
            <summary>
            The cycrandom element instructs the AIML interpreter to return exactly one of its contained li 
            elements cyc randomly. The cycrandom element must contain one or more li elements of type 
            defaultListItem, and cannot contain any other elements.
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.cycrandom.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.verbatum">
            <summary>
            The version element tells the AIML interpreter that it should substitute the version number
            of the AIML interpreter.
            
            The version element does not have any content. 
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.verbatum.#ctor(System.String,AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlers.say.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.person2">
            <summary>
            The atomic version of the person2 element is a shortcut for: 
            
            <person2><star/></person2> 
            
            The atomic person2 does not have any content.
            
            The non-atomic person2 element instructs the AIML interpreter to: 
            
            1. replace words with first-person aspect in the result of Processing the contents of the 
            person2 element with words with the grammatically-corresponding second-person aspect; and,
            
            2. replace words with second-person aspect in the result of Processing the contents of the 
            person2 element with words with the grammatically-corresponding first-person aspect. 
            
            The definition of "grammatically-corresponding" is left up to the implementation.
            
            Historically, implementations of person2 have dealt with pronouns, likely due to the fact 
            that most AIML has been written in English. However, the decision about whether to transform 
            the person aspect of other words is left up to the implementation.
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.person2.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.person2.Format(AltAIMLbot.Unifiable)">
            <summary>
            The method that does the actual Processing of the text.
            </summary>
            <returns>The resulting Processed text</returns>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.or">
            <summary>
            IMPLEMENTED FOR COMPLETENESS REASONS
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.or.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.guardstar">
            <summary>
            The guardstar element tells the AIML interpreter that it should substitute the contents of a 
            wildcard from a pattern-side guard element. 
            
            The guardstar element has an optional integer index attribute guard indicates which wildcard 
            to use; the minimum acceptable value for the index is "1" (the first wildcard). 
            
            An AIML interpreter should raise an error if the index attribute of a star specifies a 
            wildcard that does not exist in the guard element's pattern content. Not specifying the index 
            is the same as specifying an index of "1". 
            
            The guardstar element does not have any content. 
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.guardstar.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query guard originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.cycsystem">
            <summary>
            &lt;cycsystem&gt; executes a CycL statement and returns the result 
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.cycsystem.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.condition">
             <summary>
             The condition element instructs the AIML interpreter to return specified contents depending 
             upon the results of matching a predicate against a pattern. 
             
             NB: The condition element has three different types. The three different types specified 
             here are distinguished by an xsi:type attribute, which permits a validating XML Schema 
             Processor to validate them. Two of the types may contain li elements, of which there are 
             three different types, whose validity is determined by the type of enclosing condition. In 
             practice, an AIML interpreter may allow the omission of the xsi:type attribute and may instead 
             heuristically determine which type of condition (and hence li) is in use. 
             
             Block Condition 
             ---------------
             
             The blockCondition type of condition has a required attribute "name", which specifies an AIML 
             predicate, and a required attribute "value", which contains a simple pattern expression. 
            
             If the contents of the value attribute match the value of the predicate specified by name, then 
             the AIML interpreter should return the contents of the condition. If not, the empty Unifiable "" 
             should be returned.
             
             Single-predicate Condition 
             --------------------------
             
             The singlePredicateCondition type of condition has a required attribute "name", which specifies 
             an AIML predicate. This form of condition must contain at least one li element. Zero or more of 
             these li elements may be of the valueOnlyListItem type. Zero or one of these li elements may be 
             of the defaultListItem type.
             
             The singlePredicateCondition type of condition is Processed as follows: 
            
             Reading each contained li in order: 
            
             1. If the li is a valueOnlyListItem type, then compare the contents of the value attribute of 
             the li with the value of the predicate specified by the name attribute of the enclosing 
             condition. 
                 a. If they match, then return the contents of the li and stop Processing this condition. 
                 b. If they do not match, continue Processing the condition. 
             2. If the li is a defaultListItem type, then return the contents of the li and stop Processing
             this condition.
             
             Multi-predicate Condition 
             -------------------------
             
             The multiPredicateCondition type of condition has no attributes. This form of condition must 
             contain at least one li element. Zero or more of these li elements may be of the 
             nameValueListItem type. Zero or one of these li elements may be of the defaultListItem type.
             
             The multiPredicateCondition type of condition is Processed as follows: 
            
             Reading each contained li in order: 
            
             1. If the li is a nameValueListItem type, then compare the contents of the value attribute of 
             the li with the value of the predicate specified by the name attribute of the li. 
                 a. If they match, then return the contents of the li and stop Processing this condition. 
                 b. If they do not match, continue Processing the condition. 
             2. If the li is a defaultListItem type, then return the contents of the li and stop Processing 
             this condition. 
             
             ****************
             
             Condition List Items
             
             As described above, two types of condition may contain li elements. There are three types of 
             li elements. The type of li element allowed in a given condition depends upon the type of that 
             condition, as described above. 
             
             Default List Items 
             ------------------
             
             An li element of the type defaultListItem has no attributes. It may contain any AIML template 
             elements. 
            
             Value-only List Items
             ---------------------
             
             An li element of the type valueOnlyListItem has a required attribute value, which must contain 
             a simple pattern expression. The element may contain any AIML template elements.
             
             Name and Value List Items
             -------------------------
             
             An li element of the type nameValueListItem has a required attribute name, which specifies an 
             AIML predicate, and a required attribute value, which contains a simple pattern expression. The 
             element may contain any AIML template elements. 
             </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.condition.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.sayProcessorDelegate">
            <summary>
            Encapsulates a bot. If no settings.xml file is found or referenced the bot will try to
            default to safe settings.
            </summary>
            
        </member>
        <member name="P:AltAIMLbot.BestUnifiable.IsLitteral">
            <summary>
            All members are litteral
            </summary>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.lexis">
            <summary>
            IMPLEMENTED FOR COMPLETENESS REASONS
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.lexis.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.isa">
            <summary>
            IMPLEMENTED FOR COMPLETENESS REASONS
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.isa.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlers.crontag.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be processed</param>
        </member>
        <member name="T:AltAIMLbot.AIMLTagHandlersU.and">
            <summary>
            IMPLEMENTED FOR COMPLETENESS REASONS
            </summary>
        </member>
        <member name="M:AltAIMLbot.AIMLTagHandlersU.and.#ctor(AltAIMLbot.AltBot,AltAIMLbot.User,AltAIMLbot.Utils.SubQuery,AltAIMLbot.Request,AltAIMLbot.Result,System.Xml.XmlNode)">
            <summary>
            Ctor
            </summary>
            <param name="bot">The bot involved in this request</param>
            <param name="user">The user making the request</param>
            <param name="query">The query that originated this node</param>
            <param name="request">The request inputted into the system</param>
            <param name="result">The result to be passed to the user</param>
            <param name="templateNode">The node to be Processed</param>
        </member>
        <member name="T:AltAIMLbot.RunStatus">
            <summary>
            Values that can be returned from composites and the like.
            </summary> 
        </member>
        <member name="T:AltAIMLbot.Valence">
            <summary>
            Valence: A value that exhibits exponential decay defined by a halflife over time
            </summary>
        </member>
        <member name="F:AltAIMLbot.Valence.ID">
            <summary>
            ID: the variable name
            </summary>
        </member>
        <member name="F:AltAIMLbot.Valence.RefValue">
            <summary>
            The value of the variable at LastUpdate
            </summary>
        </member>
        <member name="F:AltAIMLbot.Valence.LastUpdate">
            <summary>
            The tickCount of the change
            </summary>
        </member>
        <member name="F:AltAIMLbot.Valence.Halflife">
            <summary>
            The halflife of the variable in milliseconds (since it is based on Environment.TickCount)
            </summary>
        </member>
        <member name="T:AltAIMLbot.ValenceSet">
            <summary>
            ValenceSet: Dictionary of Valences
            </summary>
        </member>
        <member name="T:AltAIMLbot.SemiStringStackQueue">
            <summary>
            SemiStringStackQueue: A Stack and a Queue at the same time
            </summary>
        </member>
        <member name="T:AltAIMLbot.BehaviorSet">
            <summary>
            BehaviorSet: Dictionary of Behaviors with begin/finish times and event handlers
            </summary>
        </member>
        <member name="F:AltAIMLbot.BehaviorSet.behaviorStack">
            <summary>
            A general stack to remember things to activate later
            </summary>
        </member>
        <member name="M:AltAIMLbot.BehaviorTree0.runSubTree(System.Xml.XmlDocument)">
            <summary>
            Executes a subBehavior in the same context
            </summary>
            <param name="subDoc"></param>
            <returns></returns>
        </member>
        <member name="M:AltAIMLbot.BehaviorTree0.ProcessNodeAddEvents(System.Xml.XmlNode)">
            <summary>
            ProcessNodeAddEvents: saves previous "onX" hanlders and adds defines owns
            </summary>
            <param name="myNode"></param>
        </member>
        <member name="M:AltAIMLbot.BehaviorTree0.ProcessNodeDeleteEvents(System.Xml.XmlNode)">
            <summary>
            ProcessNodeDeleteEvents: deletes current"onX" hanlders and restores previously defined ones
            </summary>
            <param name="myNode"></param>
        </member>
    </members>
</doc>
