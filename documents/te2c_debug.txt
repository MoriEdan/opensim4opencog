<pre>
-----------------------------------------------------------------------------------------------------------------------------------------------------<BR>[the,  shopper, drank, the, pepsi]<BR>(thereExists ?shopper4675 <BR>  (and (isa  ?shopper4675 (FrequentPerformerFn Shopping ) ) <BR>   (thereExists  ?pepsi6 <BR>     (and (isa ?pepsi6 PepsiCola )  <BR>     (and (occursDuring ?drank7550 Past )  <BR>     (and (isa ?drank7550 DrinkingEvent )  <BR>     (performedBy ?drank7550 ?shopper4675 )  <BR>     (consumedObject ?drank7550 ?pepsi6 ) ) ) ) ) )  )        <BR>                                                   <BR>[the, shopper, drinks, the, pepsi]<BR>(thereExists ?shopper4675 <BR>   (and (isa ?shopper4675 (FrequentPerformerFn Shopping ) ) <BR>    (thereExists ?pepsi6 <BR>     (and (isa ?pepsi6 PepsiCola )  <BR>     (and (occursDuring ?drank7550 Now )  <BR>     (and (isa ?drank7550 DrinkingEvent )  <BR>     (performedBy ?drank7550 ?shopper4675 )  <BR>     (consumedObject ?drank7550 ?pepsi6 ) ) ) ) ) )  )                            <BR><BR>[the, shopper, bought, fries]<BR>(thereExists ?shopper4794  <BR>   (and (isa ?shopper4794 (FrequentPerformerFn Shopping ) )  <BR>   (and (and (isa ?fries20 Frying ) <BR>    (objectOfStateChange ?fries20 ?POSSESSOR13610 ) ) <BR>   (and  (occursDuring ?bought3 Past ) <BR>   (and (isa ?bought3 Buying )  <BR>   (buyer ?bought3 ?shopper4794 ) <BR>   (objectPaidFor  ?bought3 ?fries20 ) ) ) ) ) )<BR><BR>[the, shopper, bought, fries, with, his,  pepsi]<BR>(thereExists ?shopper4863 <BR>    (and (isa  ?shopper4863 (FrequentPerformerFn Shopping ) ) <BR>    (and (isa  ?pepsi42 PepsiCola ) <BR>    (and (and (and (isa ?fries103 Frying  ) <BR>       (objectOfStateChange ?fries103  ?POSSESSOR13613 ) ) <BR>    (and (isa ?bought4 Buying ) (seller  ?bought4 ?shopper4863 ) <BR>    (objectPaidFor ?bought4 ?fries103  ) <BR>    (buyingPerformer ?bought4 ?pepsi42 ) ) )  <BR>    (equals ?POSSESSOR13613  <BR>            (OneOfFn  (PronounFn ThirdPerson-NLAttr Singular-NLAttr Masculine-NLAttr  PossessivePronoun-Post )  <BR>              (PronounFn ThirdPerson-NLAttr Singular-NLAttr Masculine-NLAttr  PossessivePronoun-Pre ) ) ) <BR>    (controls (OneOfFn (PronounFn  ThirdPerson-NLAttr Singular-NLAttr Masculine-NLAttr PossessivePronoun-Post )  <BR>                            (PronounFn ThirdPerson-NLAttr Singular-NLAttr Masculine-NLAttr  PossessivePronoun-Pre )  )<BR>                    ?pepsi42 ) ) ) ) )<BR><BR><BR><BR>|    english2Kif("I see  you").<BR>assert(known_phrase(verbSemTrans(#$and(#$isa(?ACTION1,  #$VisualPerception), #$pe<BR>rformedBy(?ACTION1, ?Speaker),  #$perceivedThings(?ACTION1, ?TargetAgent)), true)<BR>))<BR><BR><BR>e2c("George  fell last year").<BR><BR>[[txt, 'George'], [tag, staart, nnp, np]]<BR>[[txt,  fell], [tag, z, vbd]]<BR>[[txt, last], [tag, z, jj, ap, 'Adjective', 'Adverb',  'CountNoun', 'WHAdverb']]<BR>[[txt, year], [tag, laast, nn,  'CountNoun']]<BR><BR>seg([p('VP_non_cyclic', 1, 1), p('VP_non_cyclic', 2, 2),  p('PP_non_cyclic', 3, 3), p('VP_non_cyclic', 4, 4)])<BR><BR>(implies <BR>   (equals ?GEORGE2 <BR>    (OneOfFn  EddieGeorge-FootballPlayer-American <BR>       (CityNamedFn "George" RepublicOfSouthAfrica ) ) ) <BR>  (and  <BR>    (isa ?FELL1 Event ) <BR>    (implies  <BR>      (and  <BR>        (isa ?YEAR5 CalendarYear )  <BR>        (isa ?YEAR5 ContemporaryArtifact  ) ) <BR>      (or  <BR>        (and  <BR>          (isa ?FELL1  CuttingDownATree ) <BR>           (objectOfStateChange ?FELL1 ?YEAR5 )  <BR>          (doneBy ?FELL1  ?GEORGE2 ) ) <BR>        (and  <BR>          (organismKilled  ?FELL1 ?YEAR5 ) <BR>          (isa  ?FELL1 CuttingDownATree )  <BR>          (performedBy ?FELL1  ?GEORGE2 ) ) ) ) ) )<BR><BR><BR><BR>e2c("I see you").<BR><BR>[[txt, 'I'], [tag,  staart, ppss, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP',  'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun',  'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun',  'SubjectPronoun', 'WHPronoun']]<BR>[[txt, see], [tag, z, vb]]<BR>[[txt, you],  [tag, laast, ppss, ppo, prp, 'Determiner', 'Determiner-Central',  'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC',  'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun',  'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun',  'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun',  'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]<BR><BR>seg([p('ADVP_non_cyclic',  1, 1), p('VP_non_cyclic', 2, 2), p('ADVP_non_cyclic', 3,  3)])<BR><BR>(thereExists ?SPEAKER <BR>  (and <BR>    (isa  ?SPEAKER Person ) <BR>    (and <BR>       (isa ?SEE1 Event ) <BR>      (thereExists ?TARGETAGENT  <BR>        (and  <BR>          (isa ?TARGETAGENT  Person ) <BR>          (or  <BR>            (awareOf  ?SPEAKER ?TARGETAGENT )  <BR>            (and  <BR>               (isa ?SEE1 VisualPerception )  <BR>               (performedBy ?SEE1 ?SPEAKER )  <BR>               (perceivedThings ?SEE1 ?TARGETAGENT ) ) ) ) ) ) ) )<BR><BR>e2c("I seen the  wood").<BR><BR>[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun',  'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun',  'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject',  'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun',  'WHPronoun']]<BR>[[txt, seen], [tag, z, vbn]]<BR>[[txt, a], [tag, z, dt, at,  'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB',  'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer',  'CountNoun', 'MassNoun', 'MassNoun-Generic']]<BR>[[txt, wood], [tag, laast, nn,  'CountNoun', 'MassNoun', 'MassNoun-Generic']]<BR><BR>seg([p('ADVP_non_cyclic',  1, 1), p('VP_non_cyclic', 2, 2), p('QP', 3, 4)])<BR><BR>(thereExists ?SPEAKER  <BR>  (and <BR>    (isa ?SPEAKER Person )  <BR>    (and <BR>      (isa ?SEEN1 Event  ) <BR>      (thereExists ?WOOD5  
        (and  
          (isa ?WOOD5  
            (OneOfFn  Wood Wood-GolfClub WoodedArea ) )  
          (or  
            (awareOf  ?SPEAKER ?WOOD5 )  
            (and  
               (isa ?SEEN1 VisualPerception )  
               (performedBy ?SEEN1 ?SPEAKER )  
               (perceivedThings ?SEEN1 ?WOOD5 ) ) ) ) ) ) ) )

e2c("I sawed the  wood").

[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun',  'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun',  'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject',  'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun',  'WHPronoun']]
[[txt, sawed], [tag, z, 'NLWordForm', 'Verb',  'Adjective']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central',  'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC',  'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun',  'MassNoun', 'MassNoun-Generic']]
[[txt, wood], [tag, laast, nn, 'CountNoun',  'MassNoun', 'MassNoun-Generic']]


(thereExists ?SPEAKER 
   (and 
    (isa ?SPEAKER Person ) 
    (and  
      (isa ?SAWED1 Event )  
      (thereExists ?WOOD11  
        (and  
          (isa ?WOOD11  
            (OneOfFn  Wood Wood-GolfClub WoodedArea ) )  
          (and  
            (isa  ?SAWED1 SawingSomething )  
             (objectOfStateChange ?SAWED1 ?WOOD11 )  
            (doneBy  ?SAWED1 ?SPEAKER ) ) ) ) ) ) )

e2c("I see two books on a  shelf").

[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun',  'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun',  'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject',  'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun',  'WHPronoun']]
[[txt, see], [tag, z, vb]]
[[txt, two], [tag, z, cd,  'CountNoun', 'Determiner', 'Determiner-Central', 'Determiner-ClassA',  'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun',  'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun',  'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun',  'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun',  'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, books], [tag, z, nns,  'CountNoun', 'ProperCountNoun', 'ProperNoun']]
[[txt, on], [tag, z, in,  'Adverb', 'Preposition', 'Preposition-Directional-Telic',  'Preposition-Locative', 'VerbParticle', 'WHAdverb']]
[[txt, a], [tag, z, dt,  at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA',  'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite',  'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun',  'MassNoun-Generic']]
[[txt, shelf], [tag, laast, nn,  'CountNoun']]

seg([p('ADVP_non_cyclic', 1, 1), p('VP_non_cyclic', 2, 2),  p('QP', 3, 4), p('PP_non_cyclic', 5, 5), p('QP', 6, 7)])

(thereExists  ?SPEAKER 
  (and 
    (isa ?SPEAKER Person )  
    (and 
      (isa ?SEE2 Event  ) 
      (thereExistExactly 2 ?TWO2  
        (and  
          (and  
            (isa  ?TWO2 BookCopy )  
            (isa  ?TWO2 Thing ) ) 
          (and  
            (or  
               (awareOf ?SPEAKER ?TWO2 )  
               (and  
                 (isa ?SEE2 VisualPerception )  
                 (performedBy ?SEE2 ?SPEAKER )  
                 (perceivedThings ?SEE2 ?TWO2 ) ) )  
             (thereExists ?SHELF5  
               (and  
                 (isa ?SHELF5 ShelfInABuilding )  
                 (on-UnderspecifiedSurface ?TWO2 ?SHELF5 ) ) ) ) ) ) ) ) )

e2c("I see two  books sitting on a shelf").

[[txt, 'I'], [tag, staart, ppss, prp,  'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun',  'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun',  'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun',  'SubjectPronoun', 'WHPronoun']]
[[txt, see], [tag, z, vb]]
[[txt, two],  [tag, z, cd, 'CountNoun', 'Determiner', 'Determiner-Central',  'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC',  'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun',  'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun',  'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun',  'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, books], [tag, z, nns,  'CountNoun', 'ProperCountNoun', 'ProperNoun']]
[[txt, sitting], [tag, z, vbg,  'GerundiveCountNoun', 'GerundiveNoun', 'MassNoun-Generic',  'Adjective']]
[[txt, on], [tag, z, in, 'Adverb', 'Preposition',  'Preposition-Directional-Telic', 'Preposition-Locative', 'VerbParticle',  'WHAdverb']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central',  'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC',  'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun',  'MassNoun', 'MassNoun-Generic']]
[[txt, shelf], [tag, laast, nn,  'CountNoun']]

seg([p('ADVP_non_cyclic', 1, 1), p('VP_non_cyclic', 2, 2),  p('QP', 3, 4), p('VP_non_cyclic', 5, 5), p('PP_non_cyclic', 6, 6), p('QP', 7,  8)])

(thereExists ?SPEAKER 
  (and 
    (isa  ?SPEAKER Person ) 
    (and 
       (isa ?SEE3 Event ) 
      (thereExistExactly 2 ?TWO4  
        (and  
          (and  
            (isa  ?TWO4 BookCopy )  
            (isa  ?TWO4 SittingDown ) ) 
           (and 
            (or  
               (awareOf ?SPEAKER ?TWO4 )  
               (and  
                 (isa ?SEE3 VisualPerception )  
                 (performedBy ?SEE3 ?SPEAKER )  
                 (perceivedThings ?SEE3 ?TWO4 ) ) )  
             (thereExists ?SHELF11  
               (and  
                 (isa ?SHELF11 ShelfInABuilding )  
                 (on-UnderspecifiedSurface ?TWO4 ?SHELF11 ) ) ) ) ) ) ) ) )

e2c("I can see  you").

[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun',  'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun',  'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject',  'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun',  'WHPronoun']]
[[txt, can], [tag, z, md, 'Modal', 'CountNoun']]
[[txt,  see], [tag, z, vb]]
[[txt, you], [tag, laast, ppss, ppo, prp, 'Determiner',  'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB',  'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP',  'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post',  'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun',  'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer',  'WHPronoun']]

seg([p('ADVP_non_cyclic', 1, 1), p('VP_non_cyclic', 2, 2),  p('VP_non_cyclic', 3, 3), p('ADVP_non_cyclic', 4, 4)])

(thereExists  ?SPEAKER 
  (and 
    (isa ?SPEAKER Person )  
    (and 
      (behavourCapable  ?SPEAKER ?SEE4 ) 
      (and  
        (isa ?SEE4 Event )  
        (thereExists ?TARGETAGENT  
          (and  
            (isa  ?TARGETAGENT Person )  
            (or  
               (awareOf ?SPEAKER ?TARGETAGENT )  
               (and  
                 (isa ?SEE4 VisualPerception )  
                 (performedBy ?SEE4 ?SPEAKER )  
                 (perceivedThings ?SEE4 ?TARGETAGENT ) ) ) ) ) ) ) ) )

e2c("Fido is a  dog").

[[txt, 'Fido'], [tag, staart]]
[[txt, is], [tag, z, bez, vbz,  'BeAux']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central',  'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC',  'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun',  'MassNoun', 'MassNoun-Generic']]
[[txt, dog], [tag, laast, nn,  'CountNoun']]


(implies 
  (properNameString ?FIDO3 "Fido" )  
  (thereExists ?DOG8 
    (and  
      (and  
        (isa ?DOG8 InsultingSomeone )  
        (subjectOfInfo ?DOG8 :POSSESSOR )  ) 
      (and  
        (isa ?IS1 Living )  
        (occursDuring ?IS1 Now )  
        (preActors ?IS1 ?FIDO3 )  
        (actors ?IS1 ?DOG8 ) ) ) )  )

e2c("Who is the president of the United States of America  ?").

[[txt, 'Who'], [tag, staart, nnp, prp, wp, 'ExpletivePronoun',  'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun',  'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject',  'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun',  'WHPronoun']]
[[txt, is], [tag, z, bez, vbz, 'BeAux']]
[[txt, a], [tag, z,  dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA',  'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite',  'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun',  'MassNoun-Generic']]
[[txt, president], [tag, z, nn, 'CountNoun',  'ProperCountNoun', 'ProperNoun', 'Adjective']]
[[txt, of], [tag, z, in,  'Preposition', 'Preposition-Of']]
[[txt, a], [tag, z, dt, at, 'Determiner',  'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB',  'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer',  'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, 'United', 'States', of,  'America'], [tag, z]]
[[txt, ?], [tag, laast, ?,  'Punctuation-SP']]


(CYC-QUERY 
  (thereExists ?Who  
    (thereExists ?PRESIDENT46  
      (and  
        (and  
          (and  
            (isa  ?PRESIDENT46 Thing )  
            (isa  ?PRESIDENT46 Thing ) )  
          (isa ?PRESIDENT46  
            (OneOfFn  PresidentOfOrganization  
               (SubcollectionOfWithRelationFromTypeFn Person president Organization ) ) ) )  
        (and  
          (and  
            (isa  ?IS10 Living )  
             (occursDuring ?IS10 Now )  
             (preActors ?IS10 ?Who )  
            (actors  ?IS10 ?PRESIDENT46 ) )  
          (thereExists ?G300312  
            (and  
               (eq ?G300312 UnitedStatesOfAmerica )  
               (possessiveRelation ?G300312 ?PRESIDENT46 ) ) ) ) ) ) ) )

e2c("I saw  him").

[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun',  'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun',  'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject',  'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun',  'WHPronoun']]
[[txt, saw], [tag, z, vbd, 'CountNoun']]
[[txt, him], [tag,  laast, ppo, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP',  'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun',  'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun',  'SubjectPronoun', 'WHPronoun']]

seg([p('ADVP_non_cyclic', 1, 1),  p('VP_non_cyclic', 2, 2), p('ADVP_non_cyclic', 3, 3)])

(thereExists  ?SPEAKER 
  (and 
    (isa ?SPEAKER Person )  
    (and 
      (isa ?SAW1 Event  ) 
      (thereExists ?HIM  
        (and  
          (equals ?HIM  
             (PronounFn ThirdPerson-NLAttr Singular-NLAttr Masculine-NLAttr ObjectPronoun ) )  
          (or  
            (awareOf  ?SPEAKER ?HIM )  
            (and  
               (isa ?SAW1 SawingSomething )  
               (objectOfStateChange ?SAW1 ?HIM )  
               (doneBy ?SAW1 ?SPEAKER ) )  
            (and  
               (isa ?SAW1 VisualPerception )  
               (performedBy ?SAW1 ?SPEAKER )  
               (perceivedThings ?SAW1 ?HIM ) ) ) ) ) ) ) )

e2c("I saw him  Monday").

[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun',  'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun',  'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject',  'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun',  'WHPronoun']]
[[txt, saw], [tag, z, vbd, 'CountNoun']]
[[txt, him], [tag,  z, ppo, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP',  'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun',  'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun',  'SubjectPronoun', 'WHPronoun']]
[[txt, 'Monday'], [tag, laast, nnp, nr,  'CountNoun', 'ProperCountNoun', 'ProperNoun']]

seg([p('ADVP_non_cyclic',  1, 1), p('VP_non_cyclic', 2, 2), p('ADVP_non_cyclic', 3, 3), p('VP_non_cyclic',  4, 4)])

(thereExists ?SPEAKER 
  (and 
    (isa  ?SPEAKER Person ) 
    (implies  
      (occursDuring ?SAW2 Monday )  
      (holdsIn ?SAW2  
        (and  
          (isa ?SAW2 Event )  
          (thereExists ?HIM  
            (and  
               (equals ?HIM  
                 (PronounFn ThirdPerson-NLAttr Singular-NLAttr Masculine-NLAttr ObjectPronoun ) )  
               (or  
                 (awareOf ?SPEAKER ?HIM )  
                 (and  
                   (isa ?SAW2 SawingSomething )  
                   (objectOfStateChange ?SAW2 ?HIM )  
                   (doneBy ?SAW2 ?SPEAKER ) )  
                 (and  
                   (isa ?SAW2 VisualPerception )  
                   (performedBy ?SAW2 ?SPEAKER )  
                   (perceivedThings ?SAW2 ?HIM ) ) ) ) ) ) ) ) ) )

e2c("I saw him  January").

[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun',  'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun',  'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject',  'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun',  'WHPronoun']]
[[txt, saw], [tag, z, vbd, 'CountNoun']]
[[txt, him], [tag,  z, ppo, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP',  'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun',  'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun',  'SubjectPronoun', 'WHPronoun']]
[[txt, 'January'], [tag, laast, nnp, np,  'ProperCountNoun', 'ProperNoun']]

seg([p('ADVP_non_cyclic', 1, 1),  p('VP_non_cyclic', 2, 2), p('ADVP_non_cyclic', 3, 3), p('VP_non_cyclic', 4,  4)])

(thereExists ?SPEAKER 
  (and 
    (isa  ?SPEAKER Person ) 
    (implies  
      (occursDuring ?SAW3 January )  
      (holdsIn ?SAW3  
        (and  
          (isa ?SAW3 Event )  
          (thereExists ?HIM  
            (and  
               (equals ?HIM  
                 (PronounFn ThirdPerson-NLAttr Singular-NLAttr Masculine-NLAttr ObjectPronoun ) )  
               (or  
                 (awareOf ?SPEAKER ?HIM )  
                 (and  
                   (isa ?SAW3 SawingSomething )  
                   (objectOfStateChange ?SAW3 ?HIM )  
                   (doneBy ?SAW3 ?SPEAKER ) )  
                 (and  
                   (isa ?SAW3 VisualPerception )  
                   (performedBy ?SAW3 ?SPEAKER )  
                   (perceivedThings ?SAW3 ?HIM ) ) ) ) ) ) ) ) ) )

e2c("I saw him January  twenty first").

[[txt, 'I'], [tag, staart, ppss, prp, 'ExpletivePronoun',  'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun',  'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject',  'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun',  'WHPronoun']]
[[txt, saw], [tag, z, vbd, 'CountNoun']]
[[txt, him], [tag,  z, ppo, prp, 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP',  'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun',  'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun',  'SubjectPronoun', 'WHPronoun']]
[[txt, 'January'], [tag, z, nnp, np,  'ProperCountNoun', 'ProperNoun']]
[[txt, twenty], [tag, z, cd, 'CountNoun',  'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB',  'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP',  'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post',  'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun',  'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt,  first], [tag, laast, jj, od, rb, 'Adjective', 'Adverb', 'CountNoun',  'NongradableAdjective', 'OrdinalAdjective',  'WHAdverb']]

seg([p('ADVP_non_cyclic', 1, 1), p('VP_non_cyclic', 2, 2),  p('ADVP_non_cyclic', 3, 3), p('VP_non_cyclic', 4, 4), p('QP', 5, 5),  p('PP_non_cyclic', 6, 6)])

e2c("Monday ' s concert should be  good").

[[txt, 'Monday\'s'], [txt, 'Monday', '\'s'], [txt, 'Monday'],  [tag, staart, '\'s', 'nr$']]
[[txt, concert], [tag, z, nn,  'CountNoun']]
[[txt, should], [tag, z, md, 'Modal']]
[[txt, be], [tag, z,  be, vb, 'BeAux']]
[[txt, good], [tag, laast, jj,  'Adjective']]


e2c("We did it in Jan").

[[txt, 'We'], [tag,  staart, prp, ppss, 'Determiner', 'Determiner-Central', 'Determiner-ClassA',  'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun',  'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun',  'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun',  'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun',  'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, did], [tag, z, dod,  vbd, 'DoAux']]
[[txt, it], [tag, z, prp, pps, ppo, 'ExpletivePronoun',  'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun',  'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject',  'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun',  'WHPronoun']]
[[txt, in], [tag, z, in, 'Adjective', 'Adverb', 'CountNoun',  'Preposition', 'Preposition-Directional-Telic', 'Preposition-Locative',  'VerbParticle', 'WHAdverb']]
[[txt, 'Jan'], [tag, laast, nnp,  np]]

seg([p('ADVP_non_cyclic', 1, 1), p('VP_non_cyclic', 2, 2),  p('ADVP_non_cyclic', 3, 3), p('PP_non_cyclic', 4, 4), p('VP_non_cyclic', 5,  5)])

(thereExists ?WE 
  (and 
    (equals ?WE  
      (PronounFn FirstPerson-NLAttr Plural-NLAttr  Ungendered-NLAttr SubjectPronoun ) ) 
    (and  
      (and  
        (occursDurring ?IN3 ?G431374 )  
        (bodilyDoer ?WE ?IN3 ) )  
      (implies  
        (properNameString ?JAN68 "Jan" )  
        (and  
          (occursDuring ?IN3  Now ) 
          (holdsIn ?IN3  
             (in-UnderspecifiedContainer ?WE ?JAN68 ) ) ) ) ) ) )


e2c("Failure to  comply may result in dismissal").

[[txt, 'Failure'], [tag, staart, nn,  'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, to], [tag, z, to, in,  'InfinitiveComp', 'Preposition', 'Preposition-Directional']]
[[txt, comply],  [tag, z, vb, 'Adjective', 'Adverb', 'WHAdverb']]
[[txt, may], [tag, z, md,  'Modal', 'ProperCountNoun', 'ProperNoun']]
[[txt, result], [tag, z, nn, vb,  'CountNoun']]
[[txt, in], [tag, z, in, 'Adjective', 'Adverb', 'CountNoun',  'Preposition', 'Preposition-Directional-Telic', 'Preposition-Locative',  'VerbParticle', 'WHAdverb']]
[[txt, dismissal], [tag, laast, nn, 'CountNoun',  'Adjective']]

seg([p('VP_non_cyclic', 1, 1), p('PP_non_cyclic', 2, 2),  p('VP_non_cyclic', 3, 3), p('VP_non_cyclic', 4, 4), p('VP_non_cyclic', 5, 5),  p('PP_non_cyclic', 6, 6), p('VP_non_cyclic', 7, 7)])

(implies 
   (properNameString ?FAILURE3 "Failure" ) 
  (and 
     (and 
      (isa ?RESULT3  
        (AdverbFn Comply-TheWord ) )  
      (and  
        (behavourCapable ?FAILURE3  ?RESULT3 ) 
        (implies  
          (and  
            (isa  ?DISMISSAL9  
               (NounFn Dismiss-TheWord ) )  
             (agentPopularity ?DISMISSAL9  
               (HighAmountFn PopularityLevel ) ) )  
          (and  
             (occursDuring ?RESULT3 Now )  
            (holdsIn  ?RESULT3  
               (eventOutcomes ?FAILURE3 ?DISMISSAL9 ) ) ) ) ) ) 
    (implies  
      (and  
        (isa ?G461366 Thing )  
        (isa ?G461366 Thing ) )  
      (to-UnderspecifiedLocation ?FAILURE3 ?G461366  ) ) ) )

e2c("Absence to comply may result in dismissal").

[[txt,  'Absence'], [tag, staart, 'CountNoun', 'CountNoun-Generic', 'NLWordForm',  'Noun']]
[[txt, to], [tag, z, to, in, 'InfinitiveComp', 'Preposition',  'Preposition-Directional']]
[[txt, comply], [tag, z, vb, 'Adjective',  'Adverb', 'WHAdverb']]
[[txt, may], [tag, z, md, 'Modal', 'ProperCountNoun',  'ProperNoun']]
[[txt, result], [tag, z, nn, vb, 'CountNoun']]
[[txt, in],  [tag, z, in, 'Adjective', 'Adverb', 'CountNoun', 'Preposition',  'Preposition-Directional-Telic', 'Preposition-Locative', 'VerbParticle',  'WHAdverb']]
[[txt, dismissal], [tag, laast, nn, 'CountNoun',  'Adjective']]


(implies 
  (properNameString ?ABSENCE3  "Absence" ) 
  (and 
    (and  
      (isa ?RESULT7  
        (AdverbFn Comply-TheWord ) )  
      (and  
        (behavourCapable ?ABSENCE3  ?RESULT7 ) 
        (implies  
          (and  
            (isa  ?DISMISSAL18  
               (NounFn Dismiss-TheWord ) )  
             (agentPopularity ?DISMISSAL18  
               (HighAmountFn PopularityLevel ) ) )  
          (and  
             (occursDuring ?RESULT7 Now )  
            (holdsIn  ?RESULT7  
               (eventOutcomes ?ABSENCE3 ?DISMISSAL18 ) ) ) ) ) ) 
     (implies 
      (and  
        (isa ?G495123 Thing )  
        (isa ?G495123 Thing ) )  
      (to-UnderspecifiedLocation ?ABSENCE3 ?G495123  ) ) ) )

e2c("He made a request that there be an  investigation").

[[txt, 'He'], [tag, staart, pps, 'ExpletivePronoun',  'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun',  'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject',  'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun',  'WHPronoun']]
[[txt, made], [tag, z, vbd, vbn]]
[[txt, a], [tag, z, dt,  at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA',  'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite',  'Postdeterminer', 'WHDeterminer', 'CountNoun', 'MassNoun',  'MassNoun-Generic']]
[[txt, request], [tag, z, nn, 'CountNoun']]
[[txt,  that], [tag, z, in, cs, dt, wdt, 'Adverb', 'Complementizer', 'Determiner',  'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB',  'Determiner-ClassC', 'Determiner-Definite', 'IndefinitePronoun', 'Number-SP',  'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post',  'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun',  'ReflexivePronoun', 'SubjectPronoun', 'WHAdverb', 'WHDeterminer',  'WHPronoun']]
[[txt, there], [tag, z, ex, rb, 'Adverb', 'AdverbOfPlace',  'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun',  'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun',  'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun',  'SubjectPronoun', 'There-Existential', 'WHAdverb', 'WHPronoun']]
[[txt, be],  [tag, z, be, vb, 'BeAux']]
[[txt, an], [tag, z, dt, at, 'Determiner',  'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB',  'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer',  'WHDeterminer']]
[[txt, investigation], [tag, laast, nn, 'CountNoun',  'MassNoun', 'MassNoun-Generic']]


(thereExists ?HE 
  (and  
    (isa ?HE Male ) 
    (and  
      (isa ?MADE1 Event )  
      (thereExists ?REQUEST8  
        (and  
          (and  
            (isa  ?REQUEST8  
               (OneOfFn InformationRequest-IBT Request Requesting-CommunicationAct ) )  
            (isa  ?REQUEST8 Thing ) ) 
           (and 
            (or  
               (causes-Underspecified ?HE ?REQUEST8 )  
               (createdBy ?REQUEST8 ?HE )  
               (doneBy ?REQUEST8 ?HE )  
               (and  
                 (isa ?MADE1 MakingSomething )  
                 (performedBy ?MADE1 ?HE )  
                 (products ?MADE1 ?REQUEST8 ) ) )  
            (and  
               (isa ?BE29  
                 (AdverbFn There-TheWord ) )  
               (thereExists ?INVESTIGATION7  
                 (and  
                   (isa ?INVESTIGATION7 Research )  
                   (and  
                     (isa ?BE29 Living )  
                     (occursDuring ?BE29 Now )  
                     (preActors ?BE29 ?REQUEST8 )  
                     (actors ?BE29 ?INVESTIGATION7 ) ) ) ) ) ) ) ) ) ) )

e2c("He stated the  fact that there be an investigation").

[[txt, 'He'], [tag, staart, pps,  'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun',  'PossessivePronoun', 'PossessivePronoun-Post', 'Pronoun',  'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun',  'SubjectPronoun', 'WHPronoun']]
[[txt, stated], [tag, z, vbn, vbd,  'Adjective']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central',  'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC',  'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun',  'MassNoun', 'MassNoun-Generic']]
[[txt, fact], [tag, z, nn,  'CountNoun']]
[[txt, that], [tag, z, in, cs, dt, wdt, 'Adverb',  'Complementizer', 'Determiner', 'Determiner-Central', 'Determiner-ClassA',  'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Definite',  'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun',  'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun',  'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun',  'SubjectPronoun', 'WHAdverb', 'WHDeterminer', 'WHPronoun']]
[[txt, there],  [tag, z, ex, rb, 'Adverb', 'AdverbOfPlace', 'ExpletivePronoun',  'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun',  'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject',  'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'There-Existential',  'WHAdverb', 'WHPronoun']]
[[txt, be], [tag, z, be, vb, 'BeAux']]
[[txt,  an], [tag, z, dt, at, 'Determiner', 'Determiner-Central', 'Determiner-ClassA',  'Determiner-ClassB', 'Determiner-ClassC', 'Determiner-Indefinite',  'Postdeterminer', 'WHDeterminer']]
[[txt, investigation], [tag, laast, nn,  'CountNoun', 'MassNoun', 'MassNoun-Generic']]


(thereExists ?HE  
  (and 
    (isa ?HE Male ) 
     (thereExists ?FACT10 
      (and  
        (ist :POSSESSOR ?FACT10 )  
        (and  
          (implies  
            (isa  ?STATED3  
               (VerbFn State-TheWord ) )  
            (eventSOT  ?STATED3 ?HE ?FACT10 Past ) )  
          (and  
            (isa  ?BE31  
               (AdverbFn There-TheWord ) )  
             (thereExists ?INVESTIGATION15  
               (and  
                 (isa ?INVESTIGATION15 Research )  
                 (and  
                   (isa ?BE31 Living )  
                   (occursDuring ?BE31 Now )  
                   (preActors ?BE31 ?FACT10 )  
                   (actors ?BE31 ?INVESTIGATION15 ) ) ) ) ) ) ) ) ) )


e2c("Many were  angered by the hearings").

[[txt, 'Many'], [tag, staart, dt, jj, nnp,  pdt, rb, 'Adverb', 'Determiner', 'Determiner-Central', 'Determiner-ClassA',  'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun',  'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun',  'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun',  'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun',  'SubjectPronoun', 'WHAdverb', 'WHDeterminer', 'WHPronoun',  'Adjective']]
[[txt, were], [tag, z, bed, vbd, 'BeAux']]
[[txt, angered],  [tag, z, vbn, vbd, 'Adjective']]
[[txt, by], [tag, z, in, 'Adverb',  'Preposition', 'Preposition-Directional-Telic', 'WHAdverb',  'Adjective']]
[[txt, a], [tag, z, dt, at, 'Determiner', 'Determiner-Central',  'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC',  'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun',  'MassNoun', 'MassNoun-Generic']]
[[txt, hearings], [tag, laast, nns,  'CountNoun', 'GerundiveCountNoun']]

seg([p('QP', 1, 1),  p('VP_non_cyclic', 2, 2), p('VP_non_cyclic', 3, 3), p('PP_non_cyclic', 4, 4),  p('QP', 5, 5), p('QP', 6, 6)])

(thereExists ?MANY 
  (and  
    (or 
      (and  
        (equals ?MANY Many-NLAttr )  
        (isa ?MANY  
          (CollectionUnionFn  Individual NLGenQuantAttribute ) ) ) 
      (and  
        (equals ?MANY Many-Quant )  
        (isa ?MANY  
          (CollectionUnionFn  Individual PositiveIntegerExtent ) ) ) 
      (and  
        (equals ?MANY many )  
        (isa ?MANY  
          (CollectionUnionFn  GeneralizedQuantifier-Conservative Individual ReflexiveBinaryPredicate  TruthFunction ) ) ) ) 
    (and  
      (occursDurring ?ANGERED3 Past )  
      (implies  
        (and  
          (isa ?G626264 Thing )  
          (isa ?G626264 Thing )  ) 
        (and  
          (implies  
            (isa  ?ANGERED3  
               (VerbFn Anger-TheWord ) )  
            (eventSOT  ?ANGERED3 ?MANY ?G626264 Past ) )  
          (thereExists  ?HEARINGS5  
            (and  
               (and  
                 (isa ?HEARINGS5 Hearing )  
                 (objectActedOn ?HEARINGS5 :POSSESSOR ) )  
               (by-Underspecified ?G626264 ?HEARINGS5 ) ) ) ) ) ) ) )


e2c("Many who  initially supported Thomas later changed their minds").

[[txt, 'Many'],  [tag, staart, dt, jj, nnp, pdt, rb, 'Adverb', 'Determiner',  'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB',  'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP',  'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post',  'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun',  'ReflexivePronoun', 'SubjectPronoun', 'WHAdverb', 'WHDeterminer', 'WHPronoun',  'Adjective']]
[[txt, who], [tag, z, wps, wp, 'ExpletivePronoun',  'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun',  'PossessivePronoun-Post', 'Pronoun', 'Pronoun-SubjectOrObject',  'ReciprocalPronoun', 'ReflexivePronoun', 'SubjectPronoun', 'WHPronoun',  'WHPronoun-Subject']]
[[txt, initially], [tag, z, rb, 'Adverb', 'WHAdverb',  'Adjective']]
[[txt, supported], [tag, z, vbn, vbd, 'Adjective']]
[[txt,  'Thomas'], [tag, z, np, nnp]]
[[txt, later], [tag, z, rbr, rb, 'Adjective',  'Adverb', 'AgentiveNoun', 'AdverbOfTime', 'WHAdverb']]
[[txt, changed], [tag,  z, vbn, vbd, 'Adjective', 'CountNoun']]
[[txt, their], [tag, z, 'pp$',  'prp$', 'Determiner', 'Determiner-Central', 'Determiner-ClassA',  'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun',  'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun',  'PossessivePronoun-Post', 'PossessivePronoun-Pre', 'Postdeterminer', 'Pronoun',  'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun',  'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, minds], [tag, laast,  nns, 'CountNoun']]

seg([p('QP', 1, 1), p('X', 2, 2), p('PP_non_cyclic',  3, 3), p('VP_non_cyclic', 4, 4), p('VP_non_cyclic', 5, 5), p('QP', 6, 6),  p('VP_non_cyclic', 7, 7), p('NX', 8, 9)])

(thereExists ?MANY 
   (and 
    (or 
      (and  
        (equals ?MANY Many-NLAttr )  
        (isa ?MANY  
          (CollectionUnionFn  Individual NLGenQuantAttribute ) ) ) 
      (and  
        (equals ?MANY Many-Quant )  
        (isa ?MANY  
          (CollectionUnionFn  Individual PositiveIntegerExtent ) ) ) 
      (and  
        (equals ?MANY many )  
        (isa ?MANY  
          (CollectionUnionFn  GeneralizedQuantifier-Conservative Individual ReflexiveBinaryPredicate  TruthFunction ) ) ) ) 
    (implies  
      (and  
        (or  
          (and  
            (equals  ?MANY Agent-PartiallyTangible )  
            (isa  ?MANY  
               (CollectionUnionFn Collection ExistingObjectType StuffType TemporalStuffType ) )  ) ) 
        (and  
          (isa ?CHANGED1 Event  ) 
          (and  
            (controls  ?THEIR ?MINDS4 )  
            (and  
               (equals ?THEIR  
                 (PronounFn ThirdPerson-NLAttr Plural-NLAttr Ungendered-NLAttr  PossessivePronoun-Pre ) )  
               (implies  
                 (and  
                   (isa ?MINDS4 TakingCareOfSomething )  
                   (beneficiary ?MINDS4 :POSSESSOR ) )  
                 (or  
                   (and  
                     (isa ?CHANGED1 IntrinsicStateChangeEvent )  
                     (performedBy ?CHANGED1 ?MANY )  
                     (objectOfStateChange ?CHANGED1 ?MINDS4 ) )  
                   (and  
                     (isa ?CHANGED1 ReplacingAnObject )  
                     (objectActedOn ?CHANGED1 ?MINDS4 )  
                     (doneBy ?CHANGED1 ?MANY ) ) ) ) ) ) ) ) 
      (and  
        (isa ?SUPPORTED1  
          (AdverbFn  Initial-TheWord ) ) 
        (and  
          (isa ?SUPPORTED1  
            (AdverbFn  Late-TheWord ) ) 
          (and  
            (isa  ?SUPPORTED1 Event )  
            (implies  
               (equals ?THOMAS2 JackThomas-911FOAF )  
               (or  
                 (satisfiesStandard ?MANY ?THOMAS2 )  
                 (and  
                   (isa ?SUPPORTED1 ShowingSupportForSomeone )  
                   (beneficiary ?SUPPORTED1 ?THOMAS2 )  
                   (performedBy ?SUPPORTED1 ?MANY ) )  
                 (and  
                   (isa ?SUPPORTED1 SupportingSomething )  
                   (supportedObject ?SUPPORTED1 ?THOMAS2 )  
                   (supportingObject ?SUPPORTED1 ?MANY ) ) ) ) ) ) ) ) ) )


e2c("Those  that want to come can come").

[[txt, 'Those'], [tag, staart, dt, nnp,  'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB',  'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP',  'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post',  'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun',  'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt,  that], [tag, z, in, cs, dt, wdt, 'Adverb', 'Complementizer', 'Determiner',  'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB',  'Determiner-ClassC', 'Determiner-Definite', 'IndefinitePronoun', 'Number-SP',  'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post',  'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun',  'ReflexivePronoun', 'SubjectPronoun', 'WHAdverb', 'WHDeterminer',  'WHPronoun']]
[[txt, want], [tag, z, vb, vbp, 'CountNoun']]
[[txt, to],  [tag, z, to, in, 'InfinitiveComp', 'Preposition',  'Preposition-Directional']]
[[txt, come], [tag, z, vb, vbn]]
[[txt, can],  [tag, z, md, 'Modal', 'CountNoun']]
[[txt, come], [tag, laast, vb,  vbn]]

seg([p('PP_non_cyclic', 1, 2), p('VP_non_cyclic', 3, 3),  p('PP_non_cyclic', 4, 4), p('VP_non_cyclic', 5, 5), p('VP_non_cyclic', 6, 6),  p('VP_non_cyclic', 7, 7)])

(thereExists ?THOSE 
  (and  
    (or 
      (and  
        (equals ?THOSE  Backreference-ClassB-NLAttr ) 
         (isa ?THOSE 
           (CollectionUnionFn Backreference-NLAttrType Individual ) ) )  
      (and  
        (equals ?THOSE  Demonstrative-ClassB-NLAttr ) 
         (isa ?THOSE 
           (CollectionUnionFn Demonstrative-NLAttrType Individual ) ) ) )  
    (and 
      (eventSOT  ?EVENT88 ?THOSE ?OBJ88 ?TIME88 ) 
      (implies  
        (occursDuring ?WANT3  
          (OneOfFn  ArrivingAtAPlace HavingAnOrgasm ) )  
        (holdsIn ?WANT3  
          (implies  
            (and  
               (isa ?G738781 Thing )  
               (isa ?G738781 Thing ) )  
            (and  
               (implies  
                 (isa ?WANT3  
                   (VerbFn Want-TheWord ) )  
                 (eventSOT ?WANT3 ?THOSE ?G738781 Now ) )  
               (implies  
                 (and  
                   (isa ?COME4 Emission )  
                   (isa ?COME4  
                     (OneOfFn Buttocks Can CanningFood ) ) )  
                 (to-UnderspecifiedLocation ?G738781 ?COME4 ) ) ) ) ) ) ) ) )


e2c("the  best costumes got prizes").

[[txt, a], [tag, staart, dt, at,  'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB',  'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer',  'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, best], [tag, z, jjt,  jjs, 'CountNoun', 'Adjective', 'Adverb']]
[[txt, costumes], [tag, z, nns,  'CountNoun']]
[[txt, got], [tag, z, vbd, vbn]]
[[txt, prizes], [tag,  laast, nns, 'CountNoun']]

seg([p('QP', 1, 1), p('ADVP_non_cyclic', 2, 2),  p('QP', 3, 3), p('VP_non_cyclic', 4, 4), p('QP', 5, 5)])

(thereExists  ?COSTUMES5 
  (and 
    (and  
      (isa ?COSTUMES5 Costume )  
      (isa ?COSTUMES5 Thing ) )  
    (implies 
      (isa ?PRIZES7  AwardPractice ) 
      (implies  
        (isa ?GOT7  
          (VerbFn Get-TheWord )  ) 
        (eventSOT ?GOT7 ?COSTUMES5  ?PRIZES7 Past ) ) ) ) )

e2c("a best costume got prizes").

[[txt,  a], [tag, staart, dt, at, 'Determiner', 'Determiner-Central',  'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC',  'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer', 'CountNoun',  'MassNoun', 'MassNoun-Generic']]
[[txt, best], [tag, z, jjt, jjs,  'CountNoun', 'Adjective', 'Adverb']]
[[txt, costume], [tag, z, nn,  'CountNoun']]
[[txt, got], [tag, z, vbd, vbn]]
[[txt, prizes], [tag,  laast, nns, 'CountNoun']]

seg([p('QP', 1, 1), p('ADVP_non_cyclic', 2, 2),  p('VP_non_cyclic', 3, 3), p('VP_non_cyclic', 4, 4), p('QP', 5,  5)])

(thereExists ?COSTUME5 
  (and 
    (and  
      (isa ?COSTUME5 Costume )  
      (isa ?COSTUME5 Thing ) )  
    (implies 
      (isa  ?PRIZES15 AwardPractice ) 
      (implies  
        (isa ?GOT14  
          (VerbFn Get-TheWord )  ) 
        (eventSOT ?GOT14 ?COSTUME5  ?PRIZES15 Past ) ) ) ) )

e2c("some best costumes got  prizes").

[[txt, some], [tag, staart, dt, dti, 'Adverb', 'Determiner',  'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB',  'Determiner-ClassC', 'Postdeterminer', 'WHAdverb', 'WHDeterminer']]
[[txt,  best], [tag, z, jjt, jjs, 'CountNoun', 'Adjective', 'Adverb']]
[[txt,  costumes], [tag, z, nns, 'CountNoun']]
[[txt, got], [tag, z, vbd,  vbn]]
[[txt, prizes], [tag, laast, nns, 'CountNoun']]

seg([p('QP', 1,  1), p('ADVP_non_cyclic', 2, 2), p('QP', 3, 3), p('VP_non_cyclic', 4, 4), p('QP',  5, 5)])

(thereExists ?COSTUMES10 
  (and 
     (and 
      (isa ?COSTUMES10 Costume )  
      (isa ?COSTUMES10 Thing ) )  
    (implies 
      (isa  ?PRIZES23 AwardPractice ) 
      (implies  
        (isa ?GOT21  
          (VerbFn Get-TheWord )  ) 
        (eventSOT ?GOT21 ?COSTUMES10  ?PRIZES23 Past ) ) ) ) )

e2c("the best five costumes got  prizes").

[[txt, a], [tag, staart, dt, at, 'Determiner',  'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB',  'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer',  'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, best], [tag, z, jjt,  jjs, 'CountNoun', 'Adjective', 'Adverb']]
[[txt, five], [tag, z, cd,  'CountNoun', 'Determiner', 'Determiner-Central', 'Determiner-ClassA',  'Determiner-ClassB', 'Determiner-ClassC', 'ExpletivePronoun',  'IndefinitePronoun', 'Number-SP', 'ObjectPronoun', 'PossessivePronoun',  'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun',  'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun',  'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, costumes], [tag, z,  nns, 'CountNoun']]
[[txt, got], [tag, z, vbd, vbn]]
[[txt, prizes], [tag,  laast, nns, 'CountNoun']]

seg([p('QP', 1, 1), p('ADVP_non_cyclic', 2, 2),  p('QP', 3, 4), p('VP_non_cyclic', 5, 5), p('QP', 6,  6)])

(thereExistExactly 5 ?FIVE1 
  (and 
     (and 
      (isa ?FIVE1 Costume )  
      (isa ?FIVE1 Thing ) ) 
     (implies 
      (isa ?PRIZES31 AwardPractice )  
      (implies  
        (isa ?GOT28  
          (VerbFn Get-TheWord )  ) 
        (eventSOT ?GOT28 ?FIVE1  ?PRIZES31 Past ) ) ) ) )

e2c("best costumes got prizes").

[[txt,  best], [tag, staart, jjt, jjs, 'CountNoun', 'Adjective', 'Adverb']]
[[txt,  costumes], [tag, z, nns, 'CountNoun']]
[[txt, got], [tag, z, vbd,  vbn]]
[[txt, prizes], [tag, laast, nns,  'CountNoun']]

seg([p('ADVP_non_cyclic', 1, 1), p('QP', 2, 2),  p('VP_non_cyclic', 3, 3), p('QP', 4, 4)])

e2c("best five costumes got  prizes").

[[txt, best], [tag, staart, jjt, jjs, 'CountNoun', 'Adjective',  'Adverb']]
[[txt, five], [tag, z, cd, 'CountNoun', 'Determiner',  'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB',  'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP',  'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post',  'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun',  'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt,  costumes], [tag, z, nns, 'CountNoun']]
[[txt, got], [tag, z, vbd,  vbn]]
[[txt, prizes], [tag, laast, nns,  'CountNoun']]

seg([p('ADVP_non_cyclic', 1, 1), p('QP', 2, 3),  p('VP_non_cyclic', 4, 4), p('QP', 5, 5)])

(implies 
  (and  
    (and 
      (isa ?COSTUMES42  
        (NounFn Five-TheWord ) )  
      (isa ?COSTUMES42 Costume ) )  
    (hasEvaluativeQuantity ?COSTUMES42  
      (MediumToVeryHighAmountFn Goodness-Generic )  ) ) 
  (implies 
    (isa ?PRIZES65 AwardPractice )  
    (implies 
      (isa ?GOT45  
        (VerbFn Get-TheWord ) )  
      (eventSOT ?GOT45 ?COSTUMES42 ?PRIZES65 Past )  ) ) )

e2c("five other costumes got prizes").

[[txt, five], [tag,  staart, cd, 'CountNoun', 'Determiner', 'Determiner-Central',  'Determiner-ClassA', 'Determiner-ClassB', 'Determiner-ClassC',  'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP', 'ObjectPronoun',  'PossessivePronoun', 'PossessivePronoun-Post', 'Postdeterminer', 'Pronoun',  'Pronoun-SubjectOrObject', 'ReciprocalPronoun', 'ReflexivePronoun',  'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt, other], [tag, z, jj,  ap, 'Adjective', 'CountNoun']]
[[txt, costumes], [tag, z, nns,  'CountNoun']]
[[txt, got], [tag, z, vbd, vbn]]
[[txt, prizes], [tag,  laast, nns, 'CountNoun']]

seg([p('QP', 1, 1), p('PP_non_cyclic', 2, 2),  p('QP', 3, 3), p('VP_non_cyclic', 4, 4), p('QP', 5,  5)])

(thereExistExactly 5 ?FIVE18 
  (and 
     (and 
      (and  
        (isa ?FIVE18 Costume )  
        (isa ?FIVE18 Thing ) )  
      (isa ?FIVE18 BIOS-OTHERSurveillanceSyndrome )  ) 
    (implies 
      (isa  ?PRIZES73 AwardPractice ) 
      (implies  
        (isa ?GOT52  
          (VerbFn Get-TheWord )  ) 
        (eventSOT ?GOT52 ?FIVE18  ?PRIZES73 Past ) ) ) ) )

e2c("the other five costumes got  prizes").

[[txt, a], [tag, staart, dt, at, 'Determiner',  'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB',  'Determiner-ClassC', 'Determiner-Indefinite', 'Postdeterminer', 'WHDeterminer',  'CountNoun', 'MassNoun', 'MassNoun-Generic']]
[[txt, other], [tag, z, jj, ap,  'Adjective', 'CountNoun']]
[[txt, five], [tag, z, cd, 'CountNoun',  'Determiner', 'Determiner-Central', 'Determiner-ClassA', 'Determiner-ClassB',  'Determiner-ClassC', 'ExpletivePronoun', 'IndefinitePronoun', 'Number-SP',  'ObjectPronoun', 'PossessivePronoun', 'PossessivePronoun-Post',  'Postdeterminer', 'Pronoun', 'Pronoun-SubjectOrObject', 'ReciprocalPronoun',  'ReflexivePronoun', 'SubjectPronoun', 'WHDeterminer', 'WHPronoun']]
[[txt,  costumes], [tag, z, nns, 'CountNoun']]
[[txt, got], [tag, z, vbd,  vbn]]
[[txt, prizes], [tag, laast, nns, 'CountNoun']]

seg([p('QP', 1,  2), p('QP', 3, 4), p('VP_non_cyclic', 5, 5), p('QP', 6,  6)])

(thereExistExactly 5 ?FIVE19 
  (and 
     (and 
      (isa ?FIVE19 Costume )  
      (isa ?FIVE19 Thing ) ) 
     (implies 
      (isa ?PRIZES81 AwardPractice )  
      (implies  
        (isa ?GOT59  
          (VerbFn Get-TheWord )  ) 
        (eventSOT ?GOT59 ?FIVE19  ?PRIZES81 Past ) ) ) ) )

e2c("other five costumes got  prizes").

(implies 
  (and 
    (and  
      (isa ?OTHER12  
        (NounFn Five-TheWord ) )  
      (isa ?OTHER12 Costume ) )  
    (isa ?OTHER12 BIOS-OTHERSurveillanceSyndrome ) )  
  (implies 
    (isa ?PRIZES89 AwardPractice )  
    (implies 
      (isa ?GOT62  
        (VerbFn Get-TheWord ) )  
      (eventSOT ?GOT62 ?OTHER12 ?PRIZES89 Past ) )  ) )


e2c("some other costumes were really  bad").


(thereExists ?OTHER52 
  (and 
     (and 
      (and  
        (isa ?OTHER52 Costume )  
        (isa ?OTHER52 Thing ) )  
      (isa ?OTHER52 BIOS-OTHERSurveillanceSyndrome  ) ) 
    (implies 
      (and  
        (isa ?BAD14  
          (NounFn Real-TheWord  ) ) 
        (isa ?BAD14  
          (OneOfFn  Badness-Generic Badness-Moral ) ) ) 
      (and  
        (isa ?WERE6 Living )  
        (occursDuring ?WERE6 Past )  
        (preActors ?WERE6 ?OTHER52 )  
        (actors ?WERE6 ?BAD14 ) ) ) )  )

</pre> 

<DIV><FONT face=Arial size=2></FONT>
<FONT face=Arial size=2>English  Parser
</FONT> <DIV> <FORM method=get> <P><TEXTAREA name=english cols=80>I drank the arabian coffee .</TEXTAREA>
<INPUT type=submit value="Parse Normally" name=submit><FONT  face=Arial size=2> </FONT><INPUT type=submit value="Parse with idiomatics" name=submit><FONT  face=Arial size=2> <INPUT type=checkbox value=CHECKED name=findall> Show  All
</FONT></P></FORM><FONT face=Arial size=2>Please wait..
</FONT><TEXTAREA name=debug rows=5 wrap=off cols=80>?- e2c("I drank the arabian coffee .").  substPos([nn, nnp, surroundtag, dt, nn], [[txt, arabian], 4:4, 1.0-nn, 0.85-nn, 0.2-'ProperCountNoun', 0.2-'ProperNoun', 0.2-'Adjective', 0.195-jj, 0.02-ns, 0.01-vbz], nn, nnp, [[txt, arabian], 4:4, 1.0-nnp, 0.85-nnp, 0.2-'ProperCountNoun', 0.2-'ProperNoun', 0.2-'Adjective', 0.195-jj, 0.02-ns, 0.01-vbz]) substPos([nnp, jj, surroundtag, dt, nn], [[txt, arabian], 4:4, 1.0-nnp, 0.85-nnp, 0.2-'ProperCountNoun', 0.2-'ProperNoun', 0.2-'Adjective', 0.195-jj, 0.02-ns, 0.01-vbz], nnp, jj, [[txt, arabian], 4:4, 1.0-jj, 0.85-jj, 0.2-'ProperCountNoun', 0.2-jj, 0.2-'Adjective', 0.195-jj, 0.02-ns, 0.01-vbz]) [[txt, 'I'], 1:1, 1.0-nnp, 0.2-'IndefinitePronoun', 0.2-'Pronoun-SubjectOrObject', 0.2-'Pronoun', 0.2-'PossessivePronoun', 0.2-'SubjectPronoun', 0.2-'ObjectPronoun', 0.2-'ReflexivePronoun', 0.2-'WHPronoun', 0.2-'PossessivePronoun-Post', 0.2-'ReciprocalPronoun', 0.2-'Number-SP', 0.2-'ExpletivePronoun', 0.000443-nn, 0.000295-nnp, 0.000148-fw, 0.000148-nns] [[txt, drank], 2:2, 1.0-vbd, 1.0-vbd, 0.2-'Verb'] [[txt, the], 3:3, 1.0-dt, 0.459398-at, 0.415235-dt, 0.25-vbd, 0.25-pdt, 0.25-'nn|dt', 0.25-in, 0.2-'Determiner-Definite', 0.2-'Determiner-ClassA', 0.2-'Determiner-ClassB', 0.2-'Determiner-ClassC', 0.2-'Postdeterminer', 0.2-'Determiner-Central', 0.2-'Determiner', 0.2-'WHDeterminer', 0.001645-'at-tl', 0.001269-'at-hl', 0.000192-'at-nc', 5.9e-005-jj, 4.4e-005-nnp, 2.2e-005-nil, 7e-006-'at-tl-hl', 7e-006-cd, 7e-006-nn, 7e-006-vbp] [[txt, arabian], 4:4, 1.0-jj, 0.85-jj, 0.2-'ProperCountNoun', 0.2-jj, 0.2-'Adjective', 0.195-jj, 0.02-ns, 0.01-vbz] [[txt, coffee], 5:5, 1.0-nn, 0.929134-nn, 0.2-'MassNoun-Generic', 0.2-'MassNoun'] [[txt, '.'], 6:6, 1.0-'.', 1.0-'.', 0.8-'.', 0.2-'Punctuation-SP']   seg(thing, 'PRONOUN', ['I'], [[[txt, 'I'], 1:1, 1.0-nnp, 0.2-'IndefinitePronoun', 0.2-'Pronoun-SubjectOrObject', 0.2-'Pronoun', 0.2-'PossessivePronoun', 0.2-'SubjectPronoun', 0.2-'ObjectPronoun', 0.2-'ReflexivePronoun', 0.2-'WHPronoun', 0.2-'PossessivePronoun-Post', 0.2-'ReciprocalPronoun', 0.2-'Number-SP', 0.2-'ExpletivePronoun', 0.000443-nn, 0.000295-nnp, 0.000148-fw, 0.000148-nns]]) seg(situation, 'Verb', [drank], [[[txt, drank], 2:2, 1.0-vbd, 1.0-vbd, 0.2-'Verb']]) seg(thing, 'DET', [the, arabian, coffee], [[[txt, the], 3:3, 1.0-dt, 0.459398-at, 0.415235-dt, 0.25-vbd, 0.25-pdt, 0.25-'nn|dt', 0.25-in, 0.2-'Determiner-Definite', 0.2-'Determiner-ClassA', 0.2-'Determiner-ClassB', 0.2-'Determiner-ClassC', 0.2-'Postdeterminer', 0.2-'Determiner-Central', 0.2-'Determiner', 0.2-'WHDeterminer', 0.001645-'at-tl', 0.001269-'at-hl', 0.000192-'at-nc', 5.9e-005-jj, 4.4e-005-nnp, 2.2e-005-nil, 7e-006-'at-tl-hl', 7e-006-cd, 7e-006-nn, 7e-006-vbp], [[txt, arabian], 4:4, 1.0-jj, 0.85-jj, 0.2-'ProperCountNoun', 0.2-jj, 0.2-'Adjective', 0.195-jj, 0.02-ns, 0.01-vbz], [[txt, coffee], 5:5, 1.0-nn, 0.929134-nn, 0.2-'MassNoun-Generic', 0.2-'MassNoun']]) seg(sym, 'SYM', ['.'], [[[txt, '.'], 6:6, 1.0-'.', 1.0-'.', 0.8-'.', 0.2-'Punctuation-SP']])   seg(thing, 'PRONOUN', ['I'], [[[txt, 'I'], 1:1, 1.0-nnp, 0.2-'IndefinitePronoun', 0.2-'Pronoun-SubjectOrObject', 0.2-'Pronoun', 0.2-'PossessivePronoun', 0.2-'SubjectPronoun', 0.2-'ObjectPronoun', 0.2-'ReflexivePronoun', 0.2-'WHPronoun', 0.2-'PossessivePronoun-Post', 0.2-'ReciprocalPronoun', 0.2-'Number-SP', 0.2-'ExpletivePronoun', 0.000443-nn, 0.000295-nnp, 0.000148-fw, 0.000148-nns]]) seg(situation, 'Verb', [drank], [[[txt, drank], 2:2, 1.0-vbd, 1.0-vbd, 0.2-'Verb']]) seg(thing, 'DET', [the, arabian, coffee], [[[txt, the], 3:3, 1.0-dt, 0.459398-at, 0.415235-dt, 0.25-vbd, 0.25-pdt, 0.25-'nn|dt', 0.25-in, 0.2-'Determiner-Definite', 0.2-'Determiner-ClassA', 0.2-'Determiner-ClassB', 0.2-'Determiner-ClassC', 0.2-'Postdeterminer', 0.2-'Determiner-Central', 0.2-'Determiner', 0.2-'WHDeterminer', 0.001645-'at-tl', 0.001269-'at-hl', 0.000192-'at-nc', 5.9e-005-jj, 4.4e-005-nnp, 2.2e-005-nil, 7e-006-'at-tl-hl', 7e-006-cd, 7e-006-nn, 7e-006-vbp], [[txt, arabian], 4:4, 1.0-jj, 0.85-jj, 0.2-'ProperCountNoun', 0.2-jj, 0.2-'Adjective', 0.195-jj, 0.02-ns, 0.01-vbz], [[txt, coffee], 5:5, 1.0-nn, 0.929134-nn, 0.2-'MassNoun-Generic', 0.2-'MassNoun']])   theObject(_G25115, 'Hypothetic-I', ['I']) seg(situation, 'Verb', [drank], [[[txt, drank], 2:2, 1.0-vbd, 1.0-vbd, 0.2-'Verb']]) seg(thing, 'DET', [the, arabian, coffee], [[[txt, the], 3:3, 1.0-dt, 0.459398-at, 0.415235-dt, 0.25-vbd, 0.25-pdt, 0.25-'nn|dt', 0.25-in, 0.2-'Determiner-Definite', 0.2-'Determiner-ClassA', 0.2-'Determiner-ClassB', 0.2-'Determiner-ClassC', 0.2-'Postdeterminer', 0.2-'Determiner-Central', 0.2-'Determiner', 0.2-'WHDeterminer', 0.001645-'at-tl', 0.001269-'at-hl', 0.000192-'at-nc', 5.9e-005-jj, 4.4e-005-nnp, 2.2e-005-nil, 7e-006-'at-tl-hl', 7e-006-cd, 7e-006-nn, 7e-006-vbp], [[txt, arabian], 4:4, 1.0-jj, 0.85-jj, 0.2-'ProperCountNoun', 0.2-jj, 0.2-'Adjective', 0.195-jj, 0.02-ns, 0.01-vbz], [[txt, coffee], 5:5, 1.0-nn, 0.929134-nn, 0.2-'MassNoun-Generic', 0.2-'MassNoun']])   theObject(_G25115, 'Hypothetic-I', ['I']) seg(situation, 'Verb', [drank], [[[txt, drank], 2:2, 1.0-vbd, 1.0-vbd, 0.2-'Verb']]) theObject(_G25405, 'Hypothetic-The-Arabian-Coffee', [the, arabian, coffee])   theObject('Action', 'Hypothetic-Drank', [drank]) theObject(_G25115, 'Hypothetic-I', ['I'])   theObject(_G25115, 'Hypothetic-I', ['I'])     </TEXTAREA>
 <FORM action=assert.moo method=get> <TABLE border=1>   <TBODY>   <TR>     <TH><FONT face=Arial size=2>Assertion</TR> </FONT>   <TR>     <TD noWrap><TEXTAREA name=cycl rows=20 wrap=off cols=80>(and    (situationConstituents Hypothetic-GenitiveFrame Hypothetic-I)    (subEvents Hypothetic-GenitiveFrame Hypothetic-Drank)    (actors Hypothetic-Drank Hypothetic-The-Arabian-Coffee)    (preActors Hypothetic-Drank Hypothetic-I)    (isa Hypothetic-Drank DrinkingEvent)    (performedBy Hypothetic-Drank Hypothetic-I)    (primaryObjectMoving Hypothetic-Drank Hypothetic-I)    (objectMoving Hypothetic-Drank Hypothetic-I)    (consumedObject Hypothetic-Drank Hypothetic-The-Arabian-Coffee)    (isa Hypothetic-Drank Event)    (isa Hypothetic-Drank Situation)    (termStrings Hypothetic-Drank "drank")    (occursDuring Hypothetic-Drank      (IntervalBeforeFn Now AnIndefiniteAmountOfTime))    (isa Hypothetic-The-Arabian-Coffee Individual)    (isa Hypothetic-The-Arabian-Coffee SomethingExisting)    (termStrings Hypothetic-The-Arabian-Coffee "the arabian coffee")    (isa Hypothetic-The-Arabian-Coffee Coffee-Ground)    (isa Hypothetic-The-Arabian-Coffee Coffee-Beverage)    (equals Hypothetic-The-Arabian-Coffee ArabianPeninsula)    (isa Hypothetic-The-Arabian-Coffee ArabianHorse)    (conceptuallyRelated Hypothetic-The-Arabian-Coffee ArabianPeninsula)    (isa Hypothetic-I Individual)    (properNameStrings Hypothetic-I "I")    (equals Hypothetic-I      (PronounFn FirstPerson-NLAttr Singular-NLAttr Ungendered-NLAttr SubjectPronoun))    (isa Hypothetic-I SomethingExisting)    (termStrings Hypothetic-I "I")    (equals Hypothetic-I Hypothetic-I)    (isa Hypothetic-GenitiveFrame Event)) </TEXTAREA><FONT face=Arial size=2> </FONT></TD></TR></TBODY></TABLE>
<INPUT type=submit value="Assert Now" name=assert>
</FORM> <FORM action=english.moo method=post><INPUT type=hidden  value="I drank the arabian coffee ." name=english><FONT face=Arial size=2>  </FONT> <TABLE border=1>   <CAPTION><FONT face=Arial size=2>['Hypothetic-I',    'Hypothetic-The-Arabian-Coffee', 'Hypothetic-Drank']</FONT></CAPTION>   <TBODY>   <TR>     <TH><FONT face=Arial size=2>Variable Quantification
Or Constant Name        </FONT>     <TH><FONT face=Arial size=2>Refactoring To Customize The Assertion        (Persistent)</TR> </FONT>   <TR>     <TD noWrap>       <P><FONT face=Arial size=2> <INPUT type=radio CHECKED value=skolemize        name="skolem('Hypothetic-I')">Hypothetic-I</INPUT>
 <INPUT        type=radio value=find-or-create-constant        name="skolem('Hypothetic-I')"></FONT><INPUT value=Hypothetic-I2        name="constant('Hypothetic-I')"></INPUT><FONT face=Arial size=2>        </FONT></P>     <TD noWrap><PRE><FONT face=Arial size=2></FONT></PRE></TD>   <TR>     <TD noWrap>       <P><FONT face=Arial size=2> <INPUT type=radio CHECKED value=skolemize        name="skolem('Hypothetic-The-Arabian-Coffee')">Hypothetic-The-Arabian-Coffee</INPUT>
 <INPUT        type=radio value=find-or-create-constant        name="skolem('Hypothetic-The-Arabian-Coffee')"></FONT><INPUT        value=Hypothetic-The-Arabian-Coffee2        name="constant('Hypothetic-The-Arabian-Coffee')"></INPUT><FONT face=Arial        size=2> </FONT></P>     <TD noWrap><PRE><FONT face=Arial size=2></FONT></PRE></TD>   <TR>     <TD noWrap>       <P><FONT face=Arial size=2> <INPUT type=radio CHECKED value=skolemize        name="skolem('Hypothetic-Drank')">Hypothetic-Drank</INPUT>
 <INPUT        type=radio value=find-or-create-constant        name="skolem('Hypothetic-Drank')"></FONT><INPUT value=Hypothetic-Drank2        name="constant('Hypothetic-Drank')"></INPUT><FONT face=Arial size=2>        </FONT></P>     <TD noWrap><PRE><FONT face=Arial size=2></FONT></PRE></TD>   <TR>     <TD noWrap><FONT face=Arial size=2></FONT>     <TD noWrap><PRE><FONT face=Arial size=2><INPUT title="'Hypothetic-I'." type=checkbox CHECKED name="accepted('Hypothetic-I')"></FONT><INPUT type=hidden value=Hypothetic-I name="offered('Hypothetic-I')"><FONT face=Arial size=2> (situationConstituents Hypothetic-GenitiveFrame Hypothetic-I)
 T <INPUT title="'Hypothetic-Drank'." type=checkbox CHECKED name="accepted('Hypothetic-Drank')"></FONT><INPUT type=hidden value=Hypothetic-Drank name="offered('Hypothetic-Drank')"><FONT face=Arial size=2> (subEvents Hypothetic-GenitiveFrame Hypothetic-Drank)
 T <INPUT title="textCached([drank], [denotation, 'DrinkingEvent', 'QAClarifyingCollectionType', 'IterativeSituationType', 'ProcessType', 'StuffType', 'ClarifyingCollectionType', 'Collection', 'TemporalStuffType', 'DurativeEventType'])." type=checkbox CHECKED name="accepted(textCached([drank], [denotation, 'DrinkingEvent', 'QAClarifyingCollectionType', 'IterativeSituationType', 'ProcessType', 'StuffType', 'ClarifyingCollectionType', 'Collection', 'TemporalStuffType', 'DurativeEventType']))"></FONT><INPUT type=hidden value="textCached([drank], [denotation, DrinkingEvent, QAClarifyingCollectionType, IterativeSituationType, ProcessType, StuffType, ClarifyingCollectionType, Collection, TemporalStuffType, DurativeEventType])" name="offered(textCached([drank], [denotation, 'DrinkingEvent', 'QAClarifyingCollectionType', 'IterativeSituationType', 'ProcessType', 'StuffType', 'ClarifyingCollectionType', 'Collection', 'TemporalStuffType', 'DurativeEventType']))"><FONT face=Arial size=2> (actors Hypothetic-Drank Hypothetic-The-Arabian-Coffee)
 T <INPUT title="textCached([drank], [denotation, 'DrinkingEvent', 'QAClarifyingCollectionType', 'IterativeSituationType', 'ProcessType', 'StuffType', 'ClarifyingCollectionType', 'Collection', 'TemporalStuffType', 'DurativeEventType'])." type=checkbox CHECKED name="accepted(textCached([drank], [denotation, 'DrinkingEvent', 'QAClarifyingCollectionType', 'IterativeSituationType', 'ProcessType', 'StuffType', 'ClarifyingCollectionType', 'Collection', 'TemporalStuffType', 'DurativeEventType']))"></FONT><INPUT type=hidden value="textCached([drank], [denotation, DrinkingEvent, QAClarifyingCollectionType, IterativeSituationType, ProcessType, StuffType, ClarifyingCollectionType, Collection, TemporalStuffType, DurativeEventType])" name="offered(textCached([drank], [denotation, 'DrinkingEvent', 'QAClarifyingCollectionType', 'IterativeSituationType', 'ProcessType', 'StuffType', 'ClarifyingCollectionType', 'Collection', 'TemporalStuffType', 'DurativeEventType']))"><FONT face=Arial size=2> (preActors Hypothetic-Drank Hypothetic-I)
 T <INPUT title="textCached([drank], [denotation, 'DrinkingEvent', 'QAClarifyingCollectionType', 'IterativeSituationType', 'ProcessType', 'StuffType', 'ClarifyingCollectionType', 'Collection', 'TemporalStuffType', 'DurativeEventType'])." type=checkbox CHECKED name="accepted(textCached([drank], [denotation, 'DrinkingEvent', 'QAClarifyingCollectionType', 'IterativeSituationType', 'ProcessType', 'StuffType', 'ClarifyingCollectionType', 'Collection', 'TemporalStuffType', 'DurativeEventType']))"></FONT><INPUT type=hidden value="textCached([drank], [denotation, DrinkingEvent, QAClarifyingCollectionType, IterativeSituationType, ProcessType, StuffType, ClarifyingCollectionType, Collection, TemporalStuffType, DurativeEventType])" name="offered(textCached([drank], [denotation, 'DrinkingEvent', 'QAClarifyingCollectionType', 'IterativeSituationType', 'ProcessType', 'StuffType', 'ClarifyingCollectionType', 'Collection', 'TemporalStuffType', 'DurativeEventType']))"><FONT face=Arial size=2> (isa Hypothetic-Drank DrinkingEvent)
 T <INPUT title="textCached('Drink-TheWord', [frame, 'Drink-TheWord', 'Verb', 'IntransitiveVerbFrame', and(isa('Hypothetic-Drank', 'DrinkingEvent'), performedBy('Hypothetic-Drank', 'Hypothetic-I')), verbSemTrans])." type=checkbox name="accepted(textCached('Drink-TheWord', [frame, 'Drink-TheWord', 'Verb', 'IntransitiveVerbFrame', and(isa('Hypothetic-Drank', 'DrinkingEvent'), performedBy('Hypothetic-Drank', 'Hypothetic-I')), verbSemTrans]))"></FONT><INPUT type=hidden value="textCached(Drink-TheWord, [frame, Drink-TheWord, Verb, IntransitiveVerbFrame, and(isa(Hypothetic-Drank, DrinkingEvent), performedBy(Hypothetic-Drank, Hypothetic-I)), verbSemTrans])" name="offered(textCached('Drink-TheWord', [frame, 'Drink-TheWord', 'Verb', 'IntransitiveVerbFrame', and(isa('Hypothetic-Drank', 'DrinkingEvent'), performedBy('Hypothetic-Drank', 'Hypothetic-I')), verbSemTrans]))"><FONT face=Arial size=2> (performedBy Hypothetic-Drank Hypothetic-I)
 "Formula    (#$performedBy #$Hypothetic-Drank #$Hypothetic-I)  was not well formed because:  Term #$Hypothetic-I violates arg-isa #$Agent-Generic applicable to argument 2 of relation #$performedBy in mt #&lt;(#$ParseMtForSourceFn (#$StringInDocumentFn #$NLTESTMT \"I drank the arabian coffee .\"))&gt;. Term #$Hypothetic-I violates arg-isa #$Agent-Generic applicable to argument 2 of relation #$performedBy (via #$deliberateActors) in mt #&lt;(#$ParseMtForSourceFn (#$StringInDocumentFn #$NLTESTMT \"I drank the arabian coffee .\"))&gt;. Term #$Hypothetic-I violates arg-isa #$Agent-Generic applicable to argument 2 of relation #$performedBy (via #$awareOf) in mt #&lt;(#$ParseMtForSourceFn (#$StringInDocumentFn #$NLTESTMT \"I drank the arabian coffee .\"))&gt;. " <INPUT title="textCached('Drink-TheWord', [frame, 'Drink-TheWord', 'Verb', 'IntransitiveVerbFrame', and(isa('Hypothetic-Drank', 'DrinkingEvent'), primaryObjectMoving('Hypothetic-Drank', 'Hypothetic-I')), verbSemTrans])." type=checkbox name="accepted(textCached('Drink-TheWord', [frame, 'Drink-TheWord', 'Verb', 'IntransitiveVerbFrame', and(isa('Hypothetic-Drank', 'DrinkingEvent'), primaryObjectMoving('Hypothetic-Drank', 'Hypothetic-I')), verbSemTrans]))"></FONT><INPUT type=hidden value="textCached(Drink-TheWord, [frame, Drink-TheWord, Verb, IntransitiveVerbFrame, and(isa(Hypothetic-Drank, DrinkingEvent), primaryObjectMoving(Hypothetic-Drank, Hypothetic-I)), verbSemTrans])" name="offered(textCached('Drink-TheWord', [frame, 'Drink-TheWord', 'Verb', 'IntransitiveVerbFrame', and(isa('Hypothetic-Drank', 'DrinkingEvent'), primaryObjectMoving('Hypothetic-Drank', 'Hypothetic-I')), verbSemTrans]))"><FONT face=Arial size=2> (primaryObjectMoving Hypothetic-Drank Hypothetic-I)
 "Formula    (#$primaryObjectMoving #$Hypothetic-Drank #$Hypothetic-I)  was not well formed because:  Term #$Hypothetic-I violates inter-arg-isa #$FluidTangibleThing applicable to argument 2 of relation #$primaryObjectMoving when argument 1, #$Hypothetic-Drank, isa #$FluidFlowEvent in mt #&lt;(#$ParseMtForSourceFn (#$StringInDocumentFn #$NLTESTMT \"I drank the arabian coffee .\"))&gt;. Term #$Hypothetic-I violates inter-arg-isa #$FluidTangibleThing applicable to argument 2 of relation #$primaryObjectMoving (via #$objectMoving) when argument 1, #$Hypothetic-Drank, isa #$FluidFlowEvent in mt #&lt;(#$ParseMtForSourceFn (#$StringInDocumentFn #$NLTESTMT \"I drank the arabian coffee .\"))&gt;. Term #$Hypothetic-I violates inter-arg-isa #$FluidTangibleThing applicable to argument 2 of relation #$primaryObjectMoving when argument 1, #$Hypothetic-Drank, isa #$FluidFlow-Translation in mt #&lt;(#$ParseMtForSourceFn (#$StringInDocumentFn #$NLTESTMT \"I drank the arabian coffee .\"))&gt;. Term #$Hypothetic-I violates arg-isa #$SpatialThing applicable to argument 2 of relation #$primaryObjectMoving (via #$objectMoving) in mt #&lt;(#$ParseMtForSourceFn (#$StringInDocumentFn #$NLTESTMT \"I drank the arabian coffee .\"))&gt;. Term #$Hypothetic-I violates arg-isa #$PartiallyTangible applicable to argument 2 of relation #$primaryObjectMoving in mt #&lt;(#$ParseMtForSourceFn (#$StringInDocumentFn #$NLTESTMT \"I drank the arabian coffee .\"))&gt;. " <INPUT title="textCached('Drink-TheWord', [frame, 'Drink-TheWord', 'Verb', 'IntransitiveVerbFrame', and(isa('Hypothetic-Drank', 'DrinkingEvent'), objectMoving('Hypothetic-Drank', 'Hypothetic-I')), verbSemTrans])." type=checkbox name="accepted(textCached('Drink-TheWord', [frame, 'Drink-TheWord', 'Verb', 'IntransitiveVerbFrame', and(isa('Hypothetic-Drank', 'DrinkingEvent'), objectMoving('Hypothetic-Drank', 'Hypothetic-I')), verbSemTrans]))"></FONT><INPUT type=hidden value="textCached(Drink-TheWord, [frame, Drink-TheWord, Verb, IntransitiveVerbFrame, and(isa(Hypothetic-Drank, DrinkingEvent), objectMoving(Hypothetic-Drank, Hypothetic-I)), verbSemTrans])" name="offered(textCached('Drink-TheWord', [frame, 'Drink-TheWord', 'Verb', 'IntransitiveVerbFrame', and(isa('Hypothetic-Drank', 'DrinkingEvent'), objectMoving('Hypothetic-Drank', 'Hypothetic-I')), verbSemTrans]))"><FONT face=Arial size=2> (objectMoving Hypothetic-Drank Hypothetic-I)
 "Formula    (#$objectMoving #$Hypothetic-Drank #$Hypothetic-I)  was not well formed because:  Term #$Hypothetic-I violates inter-arg-isa #$FluidTangibleThing applicable to argument 2 of relation #$objectMoving when argument 1, #$Hypothetic-Drank, isa #$FluidFlowEvent in mt #&lt;(#$ParseMtForSourceFn (#$StringInDocumentFn #$NLTESTMT \"I drank the arabian coffee .\"))&gt;. Term #$Hypothetic-I violates arg-isa #$SpatialThing applicable to argument 2 of relation #$objectMoving in mt #&lt;(#$ParseMtForSourceFn (#$StringInDocumentFn #$NLTESTMT \"I drank the arabian coffee .\"))&gt;. " <INPUT title="textCached('Drink-TheWord', [frame, 'Drink-TheWord', 'Verb', 'TransitiveNPFrame', and(isa('Hypothetic-Drank', 'DrinkingEvent'), performedBy('Hypothetic-Drank', 'Hypothetic-I'), consumedObject('Hypothetic-Drank', 'Hypothetic-The-Arabian-Coffee')), verbSemTrans])." type=checkbox CHECKED name="accepted(textCached('Drink-TheWord', [frame, 'Drink-TheWord', 'Verb', 'TransitiveNPFrame', and(isa('Hypothetic-Drank', 'DrinkingEvent'), performedBy('Hypothetic-Drank', 'Hypothetic-I'), consumedObject('Hypothetic-Drank', 'Hypothetic-The-Arabian-Coffee')), verbSemTrans]))"></FONT><INPUT type=hidden value="textCached(Drink-TheWord, [frame, Drink-TheWord, Verb, TransitiveNPFrame, and(isa(Hypothetic-Drank, DrinkingEvent), performedBy(Hypothetic-Drank, Hypothetic-I), consumedObject(Hypothetic-Drank, Hypothetic-The-Arabian-Coffee)), verbSemTrans])" name="offered(textCached('Drink-TheWord', [frame, 'Drink-TheWord', 'Verb', 'TransitiveNPFrame', and(isa('Hypothetic-Drank', 'DrinkingEvent'), performedBy('Hypothetic-Drank', 'Hypothetic-I'), consumedObject('Hypothetic-Drank', 'Hypothetic-The-Arabian-Coffee')), verbSemTrans]))"><FONT face=Arial size=2> (consumedObject Hypothetic-Drank Hypothetic-The-Arabian-Coffee)
 T <INPUT title="'Hypothetic-Drank'." type=checkbox CHECKED name="accepted('Hypothetic-Drank')"></FONT><INPUT type=hidden value=Hypothetic-Drank name="offered('Hypothetic-Drank')"><FONT face=Arial size=2> (isa Hypothetic-Drank Event)
 T <INPUT title="'Hypothetic-Drank'." type=checkbox CHECKED name="accepted('Hypothetic-Drank')"></FONT><INPUT type=hidden value=Hypothetic-Drank name="offered('Hypothetic-Drank')"><FONT face=Arial size=2> (isa Hypothetic-Drank Situation)
 T <INPUT title="'Hypothetic-Drank'." type=checkbox CHECKED name="accepted('Hypothetic-Drank')"></FONT><INPUT type=hidden value=Hypothetic-Drank name="offered('Hypothetic-Drank')"><FONT face=Arial size=2> (termStrings Hypothetic-Drank "drank")
 T <INPUT title="'Hypothetic-Drank'." type=checkbox CHECKED name="accepted('Hypothetic-Drank')"></FONT><INPUT type=hidden value=Hypothetic-Drank name="offered('Hypothetic-Drank')"><FONT face=Arial size=2> (occursDuring Hypothetic-Drank        (IntervalBeforeFn Now AnIndefiniteAmountOfTime))
 T <INPUT title="'Hypothetic-The-Arabian-Coffee'." type=checkbox CHECKED name="accepted('Hypothetic-The-Arabian-Coffee')"></FONT><INPUT type=hidden value=Hypothetic-The-Arabian-Coffee name="offered('Hypothetic-The-Arabian-Coffee')"><FONT face=Arial size=2> (isa Hypothetic-The-Arabian-Coffee Individual)
 T <INPUT title="'Hypothetic-The-Arabian-Coffee'." type=checkbox CHECKED name="accepted('Hypothetic-The-Arabian-Coffee')"></FONT><INPUT type=hidden value=Hypothetic-The-Arabian-Coffee name="offered('Hypothetic-The-Arabian-Coffee')"><FONT face=Arial size=2> (isa Hypothetic-The-Arabian-Coffee SomethingExisting)
 T <INPUT title="'Hypothetic-The-Arabian-Coffee'." type=checkbox CHECKED name="accepted('Hypothetic-The-Arabian-Coffee')"></FONT><INPUT type=hidden value=Hypothetic-The-Arabian-Coffee name="offered('Hypothetic-The-Arabian-Coffee')"><FONT face=Arial size=2> (termStrings Hypothetic-The-Arabian-Coffee "the arabian coffee")
 T <INPUT title="textCached([coffee], [denotation, 'Coffee-Ground', 'TangibleStuffCompositionType', 'ArtifactTypeByGenericCategory', 'StuffType', 'ClarifyingCollectionType', 'Collection', 'TemporalStuffType'])." type=checkbox CHECKED name="accepted(textCached([coffee], [denotation, 'Coffee-Ground', 'TangibleStuffCompositionType', 'ArtifactTypeByGenericCategory', 'StuffType', 'ClarifyingCollectionType', 'Collection', 'TemporalStuffType']))"></FONT><INPUT type=hidden value="textCached([coffee], [denotation, Coffee-Ground, TangibleStuffCompositionType, ArtifactTypeByGenericCategory, StuffType, ClarifyingCollectionType, Collection, TemporalStuffType])" name="offered(textCached([coffee], [denotation, 'Coffee-Ground', 'TangibleStuffCompositionType', 'ArtifactTypeByGenericCategory', 'StuffType', 'ClarifyingCollectionType', 'Collection', 'TemporalStuffType']))"><FONT face=Arial size=2> (isa Hypothetic-The-Arabian-Coffee Coffee-Ground)
 T <INPUT title="textCached([coffee], [denotation, 'Coffee-Beverage', 'DefaultDisjointEdibleStuffType', 'TangibleStuffCompositionType', 'StuffType', 'Collection', 'TemporalStuffType'])." type=checkbox CHECKED name="accepted(textCached([coffee], [denotation, 'Coffee-Beverage', 'DefaultDisjointEdibleStuffType', 'TangibleStuffCompositionType', 'StuffType', 'Collection', 'TemporalStuffType']))"></FONT><INPUT type=hidden value="textCached([coffee], [denotation, Coffee-Beverage, DefaultDisjointEdibleStuffType, TangibleStuffCompositionType, StuffType, Collection, TemporalStuffType])" name="offered(textCached([coffee], [denotation, 'Coffee-Beverage', 'DefaultDisjointEdibleStuffType', 'TangibleStuffCompositionType', 'StuffType', 'Collection', 'TemporalStuffType']))"><FONT face=Arial size=2> (isa Hypothetic-The-Arabian-Coffee Coffee-Beverage)
 T <INPUT title="textCached([arabian], [denotation, 'ArabianPeninsula', 'Peninsula', 'SpatialThing-Localized', 'Individual'])." type=checkbox CHECKED name="accepted(textCached([arabian], [denotation, 'ArabianPeninsula', 'Peninsula', 'SpatialThing-Localized', 'Individual']))"></FONT><INPUT type=hidden value="textCached([arabian], [denotation, ArabianPeninsula, Peninsula, SpatialThing-Localized, Individual])" name="offered(textCached([arabian], [denotation, 'ArabianPeninsula', 'Peninsula', 'SpatialThing-Localized', 'Individual']))"><FONT face=Arial size=2> (equals Hypothetic-The-Arabian-Coffee ArabianPeninsula)
 T <INPUT title="textCached([arabian], [denotation, 'ArabianHorse', 'BiologicalSubspecies', 'StuffType', 'Collection', 'TemporalStuffType'])." type=checkbox name="accepted(textCached([arabian], [denotation, 'ArabianHorse', 'BiologicalSubspecies', 'StuffType', 'Collection', 'TemporalStuffType']))"></FONT><INPUT type=hidden value="textCached([arabian], [denotation, ArabianHorse, BiologicalSubspecies, StuffType, Collection, TemporalStuffType])" name="offered(textCached([arabian], [denotation, 'ArabianHorse', 'BiologicalSubspecies', 'StuffType', 'Collection', 'TemporalStuffType']))"><FONT face=Arial size=2> (isa Hypothetic-The-Arabian-Coffee ArabianHorse)
 "Formula    (#$isa #$Hypothetic-The-Arabian-Coffee #$ArabianHorse)  was not well formed because:  #$Hypothetic-The-Arabian-Coffee is known not to be an instance of #$ArabianHorse in mt #&lt;(#$ParseMtForSourceFn (#$StringInDocumentFn #$NLTESTMT \"I drank the arabian coffee .\"))&gt;.   sbhl conflict: (#$isa #$Hypothetic-The-Arabian-Coffee #$ArabianHorse) TRUE #&lt;(#$ParseMtForSourceFn (#$StringInDocumentFn #$NLTESTMT \"I drank the arabian coffee .\"))&gt;       because: (#$isa #$Hypothetic-The-Arabian-Coffee #$Coffee-Beverage) True-JustificationTruth                (#$genls #$Coffee-Beverage #$Drink) TRUE                (#$genls #$Drink #$LiquidTangibleThing) TRUE                (#$genls #$LiquidTangibleThing #$FluidTangibleThing) TRUE                (#$disjointWith #$FluidTangibleThing #$Agent-PartiallyTangible) TRUE                (#$genls #&lt;(#$CollectionUnionFn (#$TheSet #$Person #$Animal))&gt; #$Agent-PartiallyTangible) TRUE                (#$genls #$Animal #&lt;(#$CollectionUnionFn (#$TheSet #$Person #$Animal))&gt;) TRUE                (#$genls #$NonHumanAnimal #$Animal) TRUE                (#$genls #$EquineAnimal #$NonHumanAnimal) TRUE                (#$genls #$Horse #$EquineAnimal) TRUE                (#$genls #$Horse-Domesticated #$Horse) TRUE                (#$genls #$ArabianHorse #$Horse-Domesticated) TRUE  " <INPUT title="textCached('Arabian-TheWord', [frame, 'Arabian-TheWord', 'Adjective', 'RegularAdjFrame', conceptuallyRelated('Hypothetic-The-Arabian-Coffee', 'ArabianPeninsula'), adjSemTrans])." type=checkbox name="accepted(textCached('Arabian-TheWord', [frame, 'Arabian-TheWord', 'Adjective', 'RegularAdjFrame', conceptuallyRelated('Hypothetic-The-Arabian-Coffee', 'ArabianPeninsula'), adjSemTrans]))"></FONT><INPUT type=hidden value="textCached(Arabian-TheWord, [frame, Arabian-TheWord, Adjective, RegularAdjFrame, conceptuallyRelated(Hypothetic-The-Arabian-Coffee, ArabianPeninsula), adjSemTrans])" name="offered(textCached('Arabian-TheWord', [frame, 'Arabian-TheWord', 'Adjective', 'RegularAdjFrame', conceptuallyRelated('Hypothetic-The-Arabian-Coffee', 'ArabianPeninsula'), adjSemTrans]))"><FONT face=Arial size=2> (conceptuallyRelated Hypothetic-The-Arabian-Coffee ArabianPeninsula)
 "Formula    (#$conceptuallyRelated #$Hypothetic-The-Arabian-Coffee #$ArabianPeninsula)  was not well formed because:  (#$isa #$conceptuallyRelated #$IrreflexiveBinaryPredicate) in mt #&lt;(#$ParseMtForSourceFn (#$StringInDocumentFn #$NLTESTMT \"I drank the arabian coffee .\"))&gt; " <INPUT title="'Hypothetic-I'." type=checkbox CHECKED name="accepted('Hypothetic-I')"></FONT><INPUT type=hidden value=Hypothetic-I name="offered('Hypothetic-I')"><FONT face=Arial size=2> (isa Hypothetic-I Individual)
 T <INPUT title=captialized1. type=checkbox name=accepted(captialized1)></FONT><INPUT type=hidden value=captialized1 name=offered(captialized1)><FONT face=Arial size=2> (properNameStrings Hypothetic-I "I")
 "Formula    (#$properNameStrings #$Hypothetic-I \"I\")  was not well formed because:  Asserting a literal with predicate #$properNameStrings is prohibited in mt #&lt;(#$ParseMtForSourceFn (#$StringInDocumentFn #$NLTESTMT \"I drank the arabian coffee .\"))&gt;. " <INPUT title="textCached(['I'], [denotation, nart(['PronounFn', 'FirstPerson-NLAttr', 'Singular-NLAttr', 'Ungendered-NLAttr', 'SubjectPronoun']), 'IndexicalConcept', 'Person', 'SpatialThing-Localized', 'Individual', 'Agent-Generic'])." type=checkbox CHECKED name="accepted(textCached(['I'], [denotation, nart(['PronounFn', 'FirstPerson-NLAttr', 'Singular-NLAttr', 'Ungendered-NLAttr', 'SubjectPronoun']), 'IndexicalConcept', 'Person', 'SpatialThing-Localized', 'Individual', 'Agent-Generic']))"></FONT><INPUT type=hidden value="textCached([I], [denotation, nart([PronounFn, FirstPerson-NLAttr, Singular-NLAttr, Ungendered-NLAttr, SubjectPronoun]), IndexicalConcept, Person, SpatialThing-Localized, Individual, Agent-Generic])" name="offered(textCached(['I'], [denotation, nart(['PronounFn', 'FirstPerson-NLAttr', 'Singular-NLAttr', 'Ungendered-NLAttr', 'SubjectPronoun']), 'IndexicalConcept', 'Person', 'SpatialThing-Localized', 'Individual', 'Agent-Generic']))"><FONT face=Arial size=2> (equals Hypothetic-I        (PronounFn FirstPerson-NLAttr Singular-NLAttr Ungendered-NLAttr SubjectPronoun))
 T <INPUT title="'Hypothetic-I'." type=checkbox CHECKED name="accepted('Hypothetic-I')"></FONT><INPUT type=hidden value=Hypothetic-I name="offered('Hypothetic-I')"><FONT face=Arial size=2> (isa Hypothetic-I SomethingExisting)
 T <INPUT title="'Hypothetic-I'." type=checkbox CHECKED name="accepted('Hypothetic-I')"></FONT><INPUT type=hidden value=Hypothetic-I name="offered('Hypothetic-I')"><FONT face=Arial size=2> (termStrings Hypothetic-I "I")
 T <INPUT title="textCached(['I'], [denotation, 'Hypothetic-I', 'SomethingExisting', 'Individual'])." type=checkbox CHECKED name="accepted(textCached(['I'], [denotation, 'Hypothetic-I', 'SomethingExisting', 'Individual']))"></FONT><INPUT type=hidden value="textCached([I], [denotation, Hypothetic-I, SomethingExisting, Individual])" name="offered(textCached(['I'], [denotation, 'Hypothetic-I', 'SomethingExisting', 'Individual']))"><FONT face=Arial size=2> (equals Hypothetic-I Hypothetic-I)
 T <INPUT title="'Hypothetic-GenitiveFrame'." type=checkbox CHECKED name="accepted('Hypothetic-GenitiveFrame')"></FONT><INPUT type=hidden value=Hypothetic-GenitiveFrame name="offered('Hypothetic-GenitiveFrame')"><FONT face=Arial size=2> (isa Hypothetic-GenitiveFrame Event)
 T </FONT></PRE></TD></TR></TBODY></TABLE>
<INPUT value=NLTESTMT  name=profile><FONT face=Arial size=2> </FONT><INPUT type=submit value="Save Profile" name=review></FORM> <P><FONT face=Arial size=2></FONT> </P></DIV></DIV></BODY></HTML> 