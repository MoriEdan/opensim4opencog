<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BehaviorDesc" xml:space="preserve">
    <value>This node represents the current behavior.</value>
  </data>
  <data name="BehaviorFilename" xml:space="preserve">
    <value>Filename</value>
  </data>
  <data name="BehaviorFilenameDesc" xml:space="preserve">
    <value>The file which holds this behaviour.</value>
  </data>
  <data name="BehaviorIsEmptyError" xml:space="preserve">
    <value>Behavior is empty.</value>
  </data>
  <data name="CategoryBasic" xml:space="preserve">
    <value>Basic</value>
  </data>
  <data name="CategoryComment" xml:space="preserve">
    <value>Comment</value>
  </data>
  <data name="CategoryDesign" xml:space="preserve">
    <value>Design</value>
  </data>
  <data name="ConditionConnectorsFalse" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="ConditionConnectorsTrue" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="DecoratorHasNoChildError" xml:space="preserve">
    <value>Decorator has no child.</value>
  </data>
  <data name="EditorAIDefinition" xml:space="preserve">
    <value>AI Definition</value>
  </data>
  <data name="EditorRandom" xml:space="preserve">
    <value>Random</value>
  </data>
  <data name="EditorRandomValue" xml:space="preserve">
    <value>Random Value</value>
  </data>
  <data name="EditorValue" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="EventBlockEvent" xml:space="preserve">
    <value>Block Event</value>
  </data>
  <data name="EventBlockEventDesc" xml:space="preserve">
    <value>If true the event is blocked.</value>
  </data>
  <data name="ExceptionBothStylesNull" xml:space="preserve">
    <value>Both styles may not be null.</value>
  </data>
  <data name="ExceptionDefaultStyleNull" xml:space="preserve">
    <value>Default style may not be null.</value>
  </data>
  <data name="ExceptionDesignerAttributeEnumCouldNotParseValue" xml:space="preserve">
    <value>Could not parse value {0}</value>
  </data>
  <data name="ExceptionDesignerAttributeEnumCouldNotReadValue" xml:space="preserve">
    <value>Could not read value {0}</value>
  </data>
  <data name="ExceptionDesignerAttributeEnumIllegalEnumIndex" xml:space="preserve">
    <value>Invalid enum index found {0}</value>
  </data>
  <data name="ExceptionDesignerAttributeEnumValueIllegal" xml:space="preserve">
    <value>Enum value {0} is illegal</value>
  </data>
  <data name="ExceptionDesignerAttributeExpectedEnum" xml:space="preserve">
    <value>Enum expected {0}</value>
  </data>
  <data name="ExceptionDesignerAttributeIllegalBooleanValue" xml:space="preserve">
    <value>Illegal boolean value {0}</value>
  </data>
  <data name="ExceptionDesignerAttributeIllegalFloatValue" xml:space="preserve">
    <value>Illegal float value {0}</value>
  </data>
  <data name="ExceptionDesignerAttributeIllegalIntegerValue" xml:space="preserve">
    <value>Illegal integer value {0}</value>
  </data>
  <data name="ExceptionDesignerAttributeInvalidType" xml:space="preserve">
    <value>Invalid type</value>
  </data>
  <data name="ExceptionDuplicatedConnectorIdentifier" xml:space="preserve">
    <value>A duplicated connector identifier was found. The identifier must be unique over the whole solution!</value>
  </data>
  <data name="ExceptionFileManagerXMLMissingAttribute" xml:space="preserve">
    <value>Missing attribute "{0}"</value>
  </data>
  <data name="ExceptionFlexiblePropertyInvalidEditor" xml:space="preserve">
    <value>No such editor {0}.</value>
  </data>
  <data name="ExceptionFlexiblePropertyInvalidValue" xml:space="preserve">
    <value>Value cannot be read {0}.</value>
  </data>
  <data name="ExceptionInvalidDefinitionName" xml:space="preserve">
    <value>The name of a definition may not contain any spaces.</value>
  </data>
  <data name="ExceptionMissingEventConstructor" xml:space="preserve">
    <value>Could not create event of type {0}. Constructor may only require the node it is created for as a parameter.</value>
  </data>
  <data name="ExceptionMissingNodeConstructor" xml:space="preserve">
    <value>Could not create node of type {0}. Constructor may not require any parameters.</value>
  </data>
  <data name="ExceptionMultipleBehaviorManagerInterfaces" xml:space="preserve">
    <value>There can only be one BehaviorManagerInterface.</value>
  </data>
  <data name="ExceptionMultipleDesignerAttributes" xml:space="preserve">
    <value>Only one loadable or savable attribute is allowed.</value>
  </data>
  <data name="ExceptionNodeHasTooManyChildren" xml:space="preserve">
    <value>The node is not allowed to have more children.</value>
  </data>
  <data name="ExceptionNodeIsNoChild" xml:space="preserve">
    <value>Node is not a child of this node.</value>
  </data>
  <data name="ExceptionNoSubItemForConnector" xml:space="preserve">
    <value>No subitem for the connector could be found.</value>
  </data>
  <data name="ExceptionNotImplementDefaultObject" xml:space="preserve">
    <value>The given type does not implement the DefaultObject interface.</value>
  </data>
  <data name="ExceptionPropertyCannotBeRead" xml:space="preserve">
    <value>All designer properties must be readable.</value>
  </data>
  <data name="ExceptionPropertyCannotBeWritten" xml:space="preserve">
    <value>All designer properties must be writable or flagged as read only and no save.</value>
  </data>
  <data name="ExceptionSubItemIsNoChild" xml:space="preserve">
    <value>The subitem does not belong to this node.</value>
  </data>
  <data name="ExceptionUnhandledCommentColor" xml:space="preserve">
    <value>The given color is not handled.</value>
  </data>
  <data name="ExceptionUnhandledNodeShape" xml:space="preserve">
    <value>Unhandled node shape.</value>
  </data>
  <data name="ExceptionUnknownEventType" xml:space="preserve">
    <value>No such event type {0}.</value>
  </data>
  <data name="ExceptionUnknownNodeType" xml:space="preserve">
    <value>No such node type {0}.</value>
  </data>
  <data name="ExceptionWrongNodeTagType" xml:space="preserve">
    <value>The given node tag type cannot be used with the given type.</value>
  </data>
  <data name="ImpulseDelay" xml:space="preserve">
    <value>Delay</value>
  </data>
  <data name="ImpulseDelayDesc" xml:space="preserve">
    <value>The time which must have passed before the node can become active again.</value>
  </data>
  <data name="ImpulseDuration" xml:space="preserve">
    <value>Duration</value>
  </data>
  <data name="ImpulseDurationDesc" xml:space="preserve">
    <value>Determines how old the oldest event may be for this node to become valid.</value>
  </data>
  <data name="NodeCommentBackground" xml:space="preserve">
    <value>Background</value>
  </data>
  <data name="NodeCommentBackgroundDesc" xml:space="preserve">
    <value>The background color rendered behind the node and its children.</value>
  </data>
  <data name="NodeCommentText" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="NodeCommentTextDesc" xml:space="preserve">
    <value>The comment shown for the node and its children.</value>
  </data>
  <data name="ParallelNoChildrenError" xml:space="preserve">
    <value>Parallel has no children.</value>
  </data>
  <data name="ParallelOnlyOneChildError" xml:space="preserve">
    <value>Parallel has only one child and could be removed.</value>
  </data>
  <data name="ReferencedBehaviorCircularReferenceError" xml:space="preserve">
    <value>Found circular reference.</value>
  </data>
  <data name="ReferencedBehaviorDesc" xml:space="preserve">
    <value>This node works like an action which calls the referenced behavior.</value>
  </data>
  <data name="ReferencedBehaviorFilename" xml:space="preserve">
    <value>Filename</value>
  </data>
  <data name="ReferencedBehaviorFilenameDesc" xml:space="preserve">
    <value>The file loaded as the referenced behaviour.</value>
  </data>
  <data name="SelectorNoChildrenError" xml:space="preserve">
    <value>Selector has no children.</value>
  </data>
  <data name="SelectorOnlyOneChildError" xml:space="preserve">
    <value>Selector has only one child and could be removed.</value>
  </data>
  <data name="SequenceNoChildrenError" xml:space="preserve">
    <value>Sequence has no children.</value>
  </data>
  <data name="SequenceOnlyOneChildError" xml:space="preserve">
    <value>Sequence has only one child and could be removed.</value>
  </data>
  <data name="UnitsSeconds" xml:space="preserve">
    <value>sec</value>
  </data>
</root>