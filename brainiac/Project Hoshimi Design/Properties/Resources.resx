<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActionBuild" xml:space="preserve">
    <value>Build</value>
  </data>
  <data name="ActionBuildDesc" xml:space="preserve">
    <value>This action lets the AI build a unit of the specified type.</value>
  </data>
  <data name="ActionBuildUnitType" xml:space="preserve">
    <value>Unit To Build</value>
  </data>
  <data name="ActionBuildUnitTypeDesc" xml:space="preserve">
    <value>The type of unit which will be built.</value>
  </data>
  <data name="ActionFocusClosest" xml:space="preserve">
    <value>Focus Closest</value>
  </data>
  <data name="ActionFocusClosestDesc" xml:space="preserve">
    <value>The unit will focus the closest object of the given type.</value>
  </data>
  <data name="ActionFocusClosestUnitType" xml:space="preserve">
    <value>Unit To Focus</value>
  </data>
  <data name="ActionFocusClosestUnitTypeDesc" xml:space="preserve">
    <value>The type of the units which will be considered to be focused.</value>
  </data>
  <data name="ActionFollowFocus" xml:space="preserve">
    <value>Follow Focus</value>
  </data>
  <data name="ActionFollowFocusDesc" xml:space="preserve">
    <value>The unit will follow the focused object. If no object is focused, the action fails.</value>
  </data>
  <data name="ActionInheritFocus" xml:space="preserve">
    <value>Inherit Focus</value>
  </data>
  <data name="ActionInheritFocusDesc" xml:space="preserve">
    <value>The unit will focus the focus of its focus.</value>
  </data>
  <data name="ActionMoveTillFocusIsInRange" xml:space="preserve">
    <value>Move Until Focus Is In Range</value>
  </data>
  <data name="ActionMoveTillFocusIsInRangeDesc" xml:space="preserve">
    <value>The unit moves towards the object is has focused and stops if it comes in attack/build range.</value>
  </data>
  <data name="ActionTransferOxygenFromFocus" xml:space="preserve">
    <value>Transfer Oxygen From Focus</value>
  </data>
  <data name="ActionTransferOxygenFromFocusDesc" xml:space="preserve">
    <value>This action transfers oxygen from the focused object into the units cargo.</value>
  </data>
  <data name="ActionTransferOxygenToFocus" xml:space="preserve">
    <value>Transfer Oxygen To Focus</value>
  </data>
  <data name="ActionTransferOxygenToFocusDesc" xml:space="preserve">
    <value>Oxygen is transferred from the units cargo to the focused object.</value>
  </data>
  <data name="ConditionCargoIsFull" xml:space="preserve">
    <value>Cargo Is Full</value>
  </data>
  <data name="ConditionCargoIsFullDesc" xml:space="preserve">
    <value>Checks if the cargo of the unit is completely full.</value>
  </data>
  <data name="ConditionFocusIs" xml:space="preserve">
    <value>Focus Is</value>
  </data>
  <data name="ConditionFocusIsDesc" xml:space="preserve">
    <value>Checks if the currently focused object is of the specified type.</value>
  </data>
  <data name="ConditionFocusIsUnitType" xml:space="preserve">
    <value>Focus Type</value>
  </data>
  <data name="ConditionFocusIsUnitTypeDesc" xml:space="preserve">
    <value>This condition is true if the focused unit is of this type.</value>
  </data>
  <data name="ConditionHasLessThan" xml:space="preserve">
    <value>Has Less Than</value>
  </data>
  <data name="ConditionHasLessThanCount" xml:space="preserve">
    <value>Unit Count</value>
  </data>
  <data name="ConditionHasLessThanCountDesc" xml:space="preserve">
    <value>This condition is true if the layer has less than this many units of the given type.</value>
  </data>
  <data name="ConditionHasLessThanDesc" xml:space="preserve">
    <value>This condition is true if the AI has less than n units of the specified type.</value>
  </data>
  <data name="ConditionHasLessThanUnitType" xml:space="preserve">
    <value>Unit Type</value>
  </data>
  <data name="ConditionHasLessThanUnitTypeDesc" xml:space="preserve">
    <value>The type of the units which are counted.</value>
  </data>
  <data name="ConditionHasNeedleWithLessServantsThan" xml:space="preserve">
    <value>Has Needle With Less Servants Than</value>
  </data>
  <data name="ConditionHasNeedleWithLessServantsThanDesc" xml:space="preserve">
    <value>This condition is true if the AI has a needle with less than n transporters assigned to it. If four transporters are assigned to a needle, it is fully charged.</value>
  </data>
  <data name="ConditionHasNeedleWithLessServantsThanServants" xml:space="preserve">
    <value>Servants</value>
  </data>
  <data name="ConditionHasNeedleWithLessServantsThanServantsDesc" xml:space="preserve">
    <value>This condition is true if any of the player's needles has less than n suppliers.</value>
  </data>
  <data name="DecoratorLoop" xml:space="preserve">
    <value>Loop</value>
  </data>
  <data name="DecoratorLoopCount" xml:space="preserve">
    <value>Count</value>
  </data>
  <data name="DecoratorLoopCountDesc" xml:space="preserve">
    <value>Determines how often the child will be called. If the child fails, the loop is aborted and fails.</value>
  </data>
  <data name="DecoratorLoopDesc" xml:space="preserve">
    <value>This decorator calls its child n times.</value>
  </data>
  <data name="DecoratorNot" xml:space="preserve">
    <value>Not</value>
  </data>
  <data name="DecoratorNotDesc" xml:space="preserve">
    <value>This decorator inverts the return value of the attached node. If the attached node fails, it will appear as it has succedded and vice versa.</value>
  </data>
  <data name="DecoratorTrue" xml:space="preserve">
    <value>Successful</value>
  </data>
  <data name="DecoratorTrueDesc" xml:space="preserve">
    <value>This decorator lets it child appear to be valid, even if it fails.</value>
  </data>
  <data name="EventFocusDestroyed" xml:space="preserve">
    <value>Focus Destroyed</value>
  </data>
  <data name="EventFocusDestroyedDesc" xml:space="preserve">
    <value>This node becomes active if the focus of the unit was destroyed.</value>
  </data>
  <data name="EventFocusDestroyedType" xml:space="preserve">
    <value>Focus Unit Type</value>
  </data>
  <data name="EventFocusDestroyedTypeDesc" xml:space="preserve">
    <value>The type of the focused unit which needs to be destroyed to trigger this event.</value>
  </data>
  <data name="EventUnitBuilt" xml:space="preserve">
    <value>Unit Built</value>
  </data>
  <data name="EventUnitBuiltDesc" xml:space="preserve">
    <value>This node is enabled if a unit of the specified type is built.</value>
  </data>
  <data name="EventUnitBuiltType" xml:space="preserve">
    <value>Built Unit Type</value>
  </data>
  <data name="EventUnitBuiltTypeDesc" xml:space="preserve">
    <value>The type of the unit which needs to be built to trigger this event.</value>
  </data>
  <data name="EventUnitDestroyed" xml:space="preserve">
    <value>Unit Destroyed</value>
  </data>
  <data name="EventUnitDestroyedDesc" xml:space="preserve">
    <value>This node becomes active if a unit of the specified type was destroyed.</value>
  </data>
  <data name="EventUnitDestroyedType" xml:space="preserve">
    <value>Destroyed Unit Type</value>
  </data>
  <data name="EventUnitDestroyedTypeDesc" xml:space="preserve">
    <value>The type of the unit which needs to be destroyed to trigger this event.</value>
  </data>
  <data name="Impulse" xml:space="preserve">
    <value>Impulse</value>
  </data>
  <data name="ImpulseDesc" xml:space="preserve">
    <value>This node is only visible when one of the associated events were fired.</value>
  </data>
  <data name="NodeGroupActions" xml:space="preserve">
    <value>Actions</value>
  </data>
  <data name="NodeGroupConditions" xml:space="preserve">
    <value>Conditions</value>
  </data>
  <data name="NodeGroupDecorators" xml:space="preserve">
    <value>Decorators</value>
  </data>
  <data name="NodeGroupEvents" xml:space="preserve">
    <value>Events</value>
  </data>
  <data name="NodeGroupImpulses" xml:space="preserve">
    <value>Impulses</value>
  </data>
  <data name="NodeGroupSelectors" xml:space="preserve">
    <value>Selectors</value>
  </data>
  <data name="NodeGroupSequences" xml:space="preserve">
    <value>Sequences</value>
  </data>
  <data name="SelectorLinear" xml:space="preserve">
    <value>Selector Linear</value>
  </data>
  <data name="SelectorLinearDesc" xml:space="preserve">
    <value>This node will call its attached nodes in the given order until one succeeds. If all attached nodes fail, this node fails, too.</value>
  </data>
  <data name="SequenceLinear" xml:space="preserve">
    <value>Sequence Linear</value>
  </data>
  <data name="SequenceLinearDesc" xml:space="preserve">
    <value>This node will call its attached nodes in the given order. If any of the attached nodes fails, this node fails as well.</value>
  </data>
  <data name="UnitsCount" xml:space="preserve">
    <value>n</value>
  </data>
  <data name="UnitsSeconds" xml:space="preserve">
    <value>sec</value>
  </data>
</root>