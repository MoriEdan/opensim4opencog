
using Apache.Qpid.Buffer;
using System.Text;

namespace Apache.Qpid.Framing
{
  ///
  /// This class is autogenerated
  /// Do not modify.
  ///
  /// @author Code Generator Script by robert.j.greig@jpmorgan.com
  public class ConnectionOpenBody : AMQMethodBody , IEncodableAMQDataBlock
  {
    public const int CLASS_ID = 10; 	
    public const int METHOD_ID = 40; 	

    public string VirtualHost;    
    public string Capabilities;    
    public bool Insist;    
     

    protected override ushort Clazz
    {
        get
        {
            return 10;
        }
    }
   
    protected override ushort Method
    {
        get
        {
            return 40;
        }
    }

    protected override uint BodySize
    {
    get
    {
        
        return (uint)
        (uint)EncodingUtils.EncodedShortStringLength(VirtualHost)+
            (uint)EncodingUtils.EncodedShortStringLength(Capabilities)+
            1 /*Insist*/		 
        ;
         
    }
    }

    protected override void WriteMethodPayload(ByteBuffer buffer)
    {
        EncodingUtils.WriteShortStringBytes(buffer, VirtualHost);
            EncodingUtils.WriteShortStringBytes(buffer, Capabilities);
            EncodingUtils.WriteBooleans(buffer, new bool[]{Insist});
            		 
    }

    protected override void PopulateMethodBodyFromBuffer(ByteBuffer buffer)
    {
        VirtualHost = EncodingUtils.ReadShortString(buffer);
        Capabilities = EncodingUtils.ReadShortString(buffer);
        bool[] bools = EncodingUtils.ReadBooleans(buffer);Insist = bools[0];
        		 
    }

    public override string ToString()
    {
        StringBuilder buf = new StringBuilder(base.ToString());
        buf.Append(" VirtualHost: ").Append(VirtualHost);
        buf.Append(" Capabilities: ").Append(Capabilities);
        buf.Append(" Insist: ").Append(Insist);
         
        return buf.ToString();
    }

    public static AMQFrame CreateAMQFrame(ushort channelId, string VirtualHost, string Capabilities, bool Insist)
    {
        ConnectionOpenBody body = new ConnectionOpenBody();
        body.VirtualHost = VirtualHost;
        body.Capabilities = Capabilities;
        body.Insist = Insist;
        		 
        AMQFrame frame = new AMQFrame();
        frame.Channel = channelId;
        frame.BodyFrame = body;
        return frame;
    }
} 
}
