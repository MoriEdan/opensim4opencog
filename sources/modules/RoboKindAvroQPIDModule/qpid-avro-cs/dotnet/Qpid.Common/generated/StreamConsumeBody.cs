
using Apache.Qpid.Buffer;
using System.Text;

namespace Apache.Qpid.Framing
{
  ///
  /// This class is autogenerated
  /// Do not modify.
  ///
  /// @author Code Generator Script by robert.j.greig@jpmorgan.com
  public class StreamConsumeBody : AMQMethodBody , IEncodableAMQDataBlock
  {
    public const int CLASS_ID = 80; 	
    public const int METHOD_ID = 20; 	

    public ushort Ticket;    
    public string Queue;    
    public string ConsumerTag;    
    public bool NoLocal;    
    public bool Exclusive;    
    public bool Nowait;    
     

    protected override ushort Clazz
    {
        get
        {
            return 80;
        }
    }
   
    protected override ushort Method
    {
        get
        {
            return 20;
        }
    }

    protected override uint BodySize
    {
    get
    {
        
        return (uint)
        2 /*Ticket*/+
            (uint)EncodingUtils.EncodedShortStringLength(Queue)+
            (uint)EncodingUtils.EncodedShortStringLength(ConsumerTag)+
            1 /*NoLocal*/+
            0 /*Exclusive*/+
            0 /*Nowait*/		 
        ;
         
    }
    }

    protected override void WriteMethodPayload(ByteBuffer buffer)
    {
        buffer.Put(Ticket);
            EncodingUtils.WriteShortStringBytes(buffer, Queue);
            EncodingUtils.WriteShortStringBytes(buffer, ConsumerTag);
            EncodingUtils.WriteBooleans(buffer, new bool[]{NoLocal, Exclusive, Nowait});
            		 
    }

    protected override void PopulateMethodBodyFromBuffer(ByteBuffer buffer)
    {
        Ticket = buffer.GetUInt16();
        Queue = EncodingUtils.ReadShortString(buffer);
        ConsumerTag = EncodingUtils.ReadShortString(buffer);
        bool[] bools = EncodingUtils.ReadBooleans(buffer);NoLocal = bools[0];
        Exclusive = bools[1];
        Nowait = bools[2];
        		 
    }

    public override string ToString()
    {
        StringBuilder buf = new StringBuilder(base.ToString());
        buf.Append(" Ticket: ").Append(Ticket);
        buf.Append(" Queue: ").Append(Queue);
        buf.Append(" ConsumerTag: ").Append(ConsumerTag);
        buf.Append(" NoLocal: ").Append(NoLocal);
        buf.Append(" Exclusive: ").Append(Exclusive);
        buf.Append(" Nowait: ").Append(Nowait);
         
        return buf.ToString();
    }

    public static AMQFrame CreateAMQFrame(ushort channelId, ushort Ticket, string Queue, string ConsumerTag, bool NoLocal, bool Exclusive, bool Nowait)
    {
        StreamConsumeBody body = new StreamConsumeBody();
        body.Ticket = Ticket;
        body.Queue = Queue;
        body.ConsumerTag = ConsumerTag;
        body.NoLocal = NoLocal;
        body.Exclusive = Exclusive;
        body.Nowait = Nowait;
        		 
        AMQFrame frame = new AMQFrame();
        frame.Channel = channelId;
        frame.BodyFrame = body;
        return frame;
    }
} 
}
