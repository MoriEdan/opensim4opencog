
using Apache.Qpid.Buffer;
using System.Text;

namespace Apache.Qpid.Framing
{
  ///
  /// This class is autogenerated
  /// Do not modify.
  ///
  /// @author Code Generator Script by robert.j.greig@jpmorgan.com
  public class AccessRequestBody : AMQMethodBody , IEncodableAMQDataBlock
  {
    public const int CLASS_ID = 30; 	
    public const int METHOD_ID = 10; 	

    public string Realm;    
    public bool Exclusive;    
    public bool Passive;    
    public bool Active;    
    public bool Write;    
    public bool Read;    
     

    protected override ushort Clazz
    {
        get
        {
            return 30;
        }
    }
   
    protected override ushort Method
    {
        get
        {
            return 10;
        }
    }

    protected override uint BodySize
    {
    get
    {
        
        return (uint)
        (uint)EncodingUtils.EncodedShortStringLength(Realm)+
            1 /*Exclusive*/+
            0 /*Passive*/+
            0 /*Active*/+
            0 /*Write*/+
            0 /*Read*/		 
        ;
         
    }
    }

    protected override void WriteMethodPayload(ByteBuffer buffer)
    {
        EncodingUtils.WriteShortStringBytes(buffer, Realm);
            EncodingUtils.WriteBooleans(buffer, new bool[]{Exclusive, Passive, Active, Write, Read});
            		 
    }

    protected override void PopulateMethodBodyFromBuffer(ByteBuffer buffer)
    {
        Realm = EncodingUtils.ReadShortString(buffer);
        bool[] bools = EncodingUtils.ReadBooleans(buffer);Exclusive = bools[0];
        Passive = bools[1];
        Active = bools[2];
        Write = bools[3];
        Read = bools[4];
        		 
    }

    public override string ToString()
    {
        StringBuilder buf = new StringBuilder(base.ToString());
        buf.Append(" Realm: ").Append(Realm);
        buf.Append(" Exclusive: ").Append(Exclusive);
        buf.Append(" Passive: ").Append(Passive);
        buf.Append(" Active: ").Append(Active);
        buf.Append(" Write: ").Append(Write);
        buf.Append(" Read: ").Append(Read);
         
        return buf.ToString();
    }

    public static AMQFrame CreateAMQFrame(ushort channelId, string Realm, bool Exclusive, bool Passive, bool Active, bool Write, bool Read)
    {
        AccessRequestBody body = new AccessRequestBody();
        body.Realm = Realm;
        body.Exclusive = Exclusive;
        body.Passive = Passive;
        body.Active = Active;
        body.Write = Write;
        body.Read = Read;
        		 
        AMQFrame frame = new AMQFrame();
        frame.Channel = channelId;
        frame.BodyFrame = body;
        return frame;
    }
} 
}
