

using System.Collections;
namespace Apache.Qpid.Framing
{
  /**
   * This class is autogenerated, do not modify. [From AMQ protocol 0.80 (major=, minor=)]
   */
  class MainRegistry
  {
    internal static void Register(Hashtable map)
    {
        map[10 * 1000 + 10] = typeof(ConnectionStartBody);
        map[10 * 1000 + 11] = typeof(ConnectionStartOkBody);
        map[10 * 1000 + 20] = typeof(ConnectionSecureBody);
        map[10 * 1000 + 21] = typeof(ConnectionSecureOkBody);
        map[10 * 1000 + 30] = typeof(ConnectionTuneBody);
        map[10 * 1000 + 31] = typeof(ConnectionTuneOkBody);
        map[10 * 1000 + 40] = typeof(ConnectionOpenBody);
        map[10 * 1000 + 41] = typeof(ConnectionOpenOkBody);
        map[10 * 1000 + 50] = typeof(ConnectionRedirectBody);
        map[10 * 1000 + 60] = typeof(ConnectionCloseBody);
        map[10 * 1000 + 61] = typeof(ConnectionCloseOkBody);
        map[20 * 1000 + 10] = typeof(ChannelOpenBody);
        map[20 * 1000 + 11] = typeof(ChannelOpenOkBody);
        map[20 * 1000 + 20] = typeof(ChannelFlowBody);
        map[20 * 1000 + 21] = typeof(ChannelFlowOkBody);
        map[20 * 1000 + 30] = typeof(ChannelAlertBody);
        map[20 * 1000 + 40] = typeof(ChannelCloseBody);
        map[20 * 1000 + 41] = typeof(ChannelCloseOkBody);
        map[30 * 1000 + 10] = typeof(AccessRequestBody);
        map[30 * 1000 + 11] = typeof(AccessRequestOkBody);
        map[40 * 1000 + 10] = typeof(ExchangeDeclareBody);
        map[40 * 1000 + 11] = typeof(ExchangeDeclareOkBody);
        map[40 * 1000 + 20] = typeof(ExchangeDeleteBody);
        map[40 * 1000 + 21] = typeof(ExchangeDeleteOkBody);
        map[40 * 1000 + 22] = typeof(ExchangeBoundBody);
        map[40 * 1000 + 23] = typeof(ExchangeBoundOkBody);
        map[50 * 1000 + 10] = typeof(QueueDeclareBody);
        map[50 * 1000 + 11] = typeof(QueueDeclareOkBody);
        map[50 * 1000 + 20] = typeof(QueueBindBody);
        map[50 * 1000 + 21] = typeof(QueueBindOkBody);
        map[50 * 1000 + 30] = typeof(QueuePurgeBody);
        map[50 * 1000 + 31] = typeof(QueuePurgeOkBody);
        map[50 * 1000 + 40] = typeof(QueueDeleteBody);
        map[50 * 1000 + 41] = typeof(QueueDeleteOkBody);
        map[60 * 1000 + 10] = typeof(BasicQosBody);
        map[60 * 1000 + 11] = typeof(BasicQosOkBody);
        map[60 * 1000 + 20] = typeof(BasicConsumeBody);
        map[60 * 1000 + 21] = typeof(BasicConsumeOkBody);
        map[60 * 1000 + 30] = typeof(BasicCancelBody);
        map[60 * 1000 + 31] = typeof(BasicCancelOkBody);
        map[60 * 1000 + 40] = typeof(BasicPublishBody);
        map[60 * 1000 + 50] = typeof(BasicReturnBody);
        map[60 * 1000 + 60] = typeof(BasicDeliverBody);
        map[60 * 1000 + 70] = typeof(BasicGetBody);
        map[60 * 1000 + 71] = typeof(BasicGetOkBody);
        map[60 * 1000 + 72] = typeof(BasicGetEmptyBody);
        map[60 * 1000 + 80] = typeof(BasicAckBody);
        map[60 * 1000 + 90] = typeof(BasicRejectBody);
        map[60 * 1000 + 100] = typeof(BasicRecoverBody);
        map[60 * 1000 + 101] = typeof(BasicRecoverOkBody);
        map[70 * 1000 + 10] = typeof(FileQosBody);
        map[70 * 1000 + 11] = typeof(FileQosOkBody);
        map[70 * 1000 + 20] = typeof(FileConsumeBody);
        map[70 * 1000 + 21] = typeof(FileConsumeOkBody);
        map[70 * 1000 + 30] = typeof(FileCancelBody);
        map[70 * 1000 + 31] = typeof(FileCancelOkBody);
        map[70 * 1000 + 40] = typeof(FileOpenBody);
        map[70 * 1000 + 41] = typeof(FileOpenOkBody);
        map[70 * 1000 + 50] = typeof(FileStageBody);
        map[70 * 1000 + 60] = typeof(FilePublishBody);
        map[70 * 1000 + 70] = typeof(FileReturnBody);
        map[70 * 1000 + 80] = typeof(FileDeliverBody);
        map[70 * 1000 + 90] = typeof(FileAckBody);
        map[70 * 1000 + 100] = typeof(FileRejectBody);
        map[80 * 1000 + 10] = typeof(StreamQosBody);
        map[80 * 1000 + 11] = typeof(StreamQosOkBody);
        map[80 * 1000 + 20] = typeof(StreamConsumeBody);
        map[80 * 1000 + 21] = typeof(StreamConsumeOkBody);
        map[80 * 1000 + 30] = typeof(StreamCancelBody);
        map[80 * 1000 + 31] = typeof(StreamCancelOkBody);
        map[80 * 1000 + 40] = typeof(StreamPublishBody);
        map[80 * 1000 + 50] = typeof(StreamReturnBody);
        map[80 * 1000 + 60] = typeof(StreamDeliverBody);
        map[90 * 1000 + 10] = typeof(TxSelectBody);
        map[90 * 1000 + 11] = typeof(TxSelectOkBody);
        map[90 * 1000 + 20] = typeof(TxCommitBody);
        map[90 * 1000 + 21] = typeof(TxCommitOkBody);
        map[90 * 1000 + 30] = typeof(TxRollbackBody);
        map[90 * 1000 + 31] = typeof(TxRollbackOkBody);
        map[100 * 1000 + 10] = typeof(DtxSelectBody);
        map[100 * 1000 + 11] = typeof(DtxSelectOkBody);
        map[100 * 1000 + 20] = typeof(DtxStartBody);
        map[100 * 1000 + 21] = typeof(DtxStartOkBody);
        map[110 * 1000 + 10] = typeof(TunnelRequestBody);
        map[120 * 1000 + 10] = typeof(TestIntegerBody);
        map[120 * 1000 + 11] = typeof(TestIntegerOkBody);
        map[120 * 1000 + 20] = typeof(TestStringBody);
        map[120 * 1000 + 21] = typeof(TestStringOkBody);
        map[120 * 1000 + 30] = typeof(TestTableBody);
        map[120 * 1000 + 31] = typeof(TestTableOkBody);
        map[120 * 1000 + 40] = typeof(TestContentBody);
        map[120 * 1000 + 41] = typeof(TestContentOkBody);
        
    }
}
}
    